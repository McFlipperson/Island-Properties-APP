{"file_contents":{"2Automation-Layer-Architecture.md":{"content":"# Automation Layer Architecture - Optional Account Creation Enhancement\n\n## Strategic Position\n\nThis automation layer is an **optional enhancement** to the core manual-first GEO strategy. It addresses account creation bottlenecks while maintaining the safety and authenticity of manual content posting.\n\n**Core Principle**: Automate the tedious (account creation), keep manual the valuable (content creation and engagement).\n\n## Database Schema Extensions\n\n### Updated Expert Personas Table\n\n```sql\n-- Add to existing expert_personas table\nALTER TABLE expert_personas ADD COLUMN IF NOT EXISTS twilio_phone_number VARCHAR(20);\nALTER TABLE expert_personas ADD COLUMN IF NOT EXISTS twilio_account_sid_encrypted TEXT;\nALTER TABLE expert_personas ADD COLUMN IF NOT EXISTS twilio_auth_token_encrypted TEXT;\nALTER TABLE expert_personas ADD COLUMN IF NOT EXISTS automation_enabled BOOLEAN DEFAULT false;\nALTER TABLE expert_personas ADD COLUMN IF NOT EXISTS account_creation_status JSONB DEFAULT '{}';\n```\n\n### New Automation Tables\n\n```sql\n-- Twilio SMS Verification Tracking\nCREATE TABLE twilio_sms_verifications (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    persona_id UUID REFERENCES expert_personas(id) ON DELETE CASCADE,\n    platform_type VARCHAR(50) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL,\n    verification_code VARCHAR(10),\n    status VARCHAR(20) DEFAULT 'pending', -- pending, completed, failed, expired\n    created_at TIMESTAMP DEFAULT NOW(),\n    completed_at TIMESTAMP,\n    attempts INTEGER DEFAULT 0\n);\n\n-- Platform Account Creation Tracking\nCREATE TABLE automated_account_creation (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    persona_id UUID REFERENCES expert_personas(id) ON DELETE CASCADE,\n    platform_type VARCHAR(50) NOT NULL,\n    registration_status VARCHAR(20) DEFAULT 'initiated', -- initiated, sms_sent, verified, completed, failed\n    account_username VARCHAR(100),\n    account_email_encrypted TEXT,\n    account_password_encrypted TEXT,\n    creation_started_at TIMESTAMP DEFAULT NOW(),\n    creation_completed_at TIMESTAMP,\n    verification_attempts INTEGER DEFAULT 0,\n    error_details JSONB DEFAULT '{}',\n    \n    -- Link to proxy and Twilio\n    proxy_id VARCHAR(100),\n    twilio_verification_id UUID REFERENCES twilio_sms_verifications(id),\n    \n    UNIQUE(persona_id, platform_type)\n);\n\n-- Activity Scheduling (Optional - for basic automation only)\nCREATE TABLE persona_activity_schedule (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    persona_id UUID REFERENCES expert_personas(id) ON DELETE CASCADE,\n    activity_type VARCHAR(50) NOT NULL, -- account_creation, basic_profile_setup, verification_check\n    scheduled_for TIMESTAMP NOT NULL,\n    status VARCHAR(20) DEFAULT 'scheduled', -- scheduled, executing, completed, failed, cancelled\n    automation_enabled BOOLEAN DEFAULT false,\n    activity_data JSONB DEFAULT '{}',\n    created_at TIMESTAMP DEFAULT NOW(),\n    executed_at TIMESTAMP,\n    execution_log TEXT\n);\n```\n\n## Implementation Modules\n\n### 1. Twilio Integration Module\n\n```typescript\n// src/modules/automation/twilio-integration.ts\nimport twilio from 'twilio';\nimport { encryptData, decryptData } from '../security/encryption';\n\nexport class TwilioIntegrationService {\n  private twilioClients: Map<string, any> = new Map();\n  \n  async initializePersonaTwilio(personaId: string): Promise<TwilioPersonaConfig> {\n    const persona = await this.getPersona(personaId);\n    \n    if (!persona.twilio_account_sid_encrypted) {\n      throw new Error(`No Twilio configuration for persona ${personaId}`);\n    }\n    \n    const accountSid = await decryptData(persona.twilio_account_sid_encrypted, personaId);\n    const authToken = await decryptData(persona.twilio_auth_token_encrypted, personaId);\n    \n    const client = twilio(accountSid, authToken);\n    this.twilioClients.set(personaId, client);\n    \n    return {\n      personaId,\n      phoneNumber: persona.twilio_phone_number,\n      client,\n      status: 'ready'\n    };\n  }\n  \n  async sendVerificationSMS(\n    personaId: string, \n    platform: string, \n    registrationContext: RegistrationContext\n  ): Promise<SMSVerificationResult> {\n    const twilioConfig = await this.initializePersonaTwilio(personaId);\n    \n    try {\n      // Create verification record\n      const verification = await this.database.createSMSVerification({\n        persona_id: personaId,\n        platform_type: platform,\n        phone_number: twilioConfig.phoneNumber,\n        status: 'pending'\n      });\n      \n      // Note: This doesn't actually send SMS - it prepares for receiving verification SMS\n      // from the platform during automated registration\n      \n      return {\n        verificationId: verification.id,\n        phoneNumber: twilioConfig.phoneNumber,\n        status: 'ready_for_platform_verification',\n        personaId\n      };\n      \n    } catch (error) {\n      console.error(`SMS verification setup failed for ${personaId}:`, error);\n      throw error;\n    }\n  }\n  \n  async receiveVerificationCode(\n    phoneNumber: string,\n    messageBody: string\n  ): Promise<VerificationCodeResult> {\n    // Extract verification code from SMS body\n    const codeMatch = messageBody.match(/\\b\\d{4,8}\\b/);\n    if (!codeMatch) {\n      return { success: false, error: 'No verification code found in message' };\n    }\n    \n    const verificationCode = codeMatch[0];\n    \n    // Update verification record\n    const verification = await this.database.updateSMSVerification({\n      phone_number: phoneNumber,\n      verification_code: verificationCode,\n      status: 'completed',\n      completed_at: new Date()\n    });\n    \n    return {\n      success: true,\n      verificationCode,\n      verificationId: verification.id\n    };\n  }\n  \n  // Webhook endpoint for receiving SMS\n  async handleTwilioWebhook(webhookData: TwilioWebhookData): Promise<void> {\n    const { From, Body, To } = webhookData;\n    \n    await this.receiveVerificationCode(To, Body);\n  }\n}\n```\n\n### 2. Automated Account Creation Module\n\n```typescript\n// src/modules/automation/account-creation.ts\nimport { BrowserContext } from 'playwright';\n\nexport class AutomatedAccountCreationService {\n  private twilioService: TwilioIntegrationService;\n  private proxyManager: ExpertProxyManager;\n  private browserManager: ExpertPersonaBrowserManager;\n  \n  async createPlatformAccount(\n    personaId: string,\n    platform: string,\n    accountDetails: AccountCreationDetails\n  ): Promise<AccountCreationResult> {\n    \n    console.log(`🤖 Starting automated account creation for ${personaId} on ${platform}`);\n    \n    try {\n      // 1. Initialize persona environment\n      const persona = await this.getPersona(personaId);\n      const proxyConfig = await this.proxyManager.getExpertProxy(personaId);\n      const browserContext = await this.browserManager.createExpertPersonaContext(personaId);\n      \n      // 2. Track creation attempt\n      const creationRecord = await this.database.createAccountCreationRecord({\n        persona_id: personaId,\n        platform_type: platform,\n        registration_status: 'initiated',\n        proxy_id: proxyConfig.id\n      });\n      \n      // 3. Setup Twilio for SMS verification\n      const twilioConfig = await this.twilioService.initializePersonaTwilio(personaId);\n      \n      // 4. Navigate to platform registration\n      const page = await browserContext.newPage();\n      await page.goto(this.getPlatformRegistrationURL(platform));\n      \n      // 5. Fill registration form\n      await this.fillRegistrationForm(page, platform, {\n        ...accountDetails,\n        phoneNumber: twilioConfig.phoneNumber,\n        persona: persona\n      });\n      \n      // 6. Handle phone verification\n      const verificationResult = await this.handlePhoneVerification(\n        page, \n        platform, \n        twilioConfig,\n        creationRecord.id\n      );\n      \n      if (!verificationResult.success) {\n        throw new Error(`Phone verification failed: ${verificationResult.error}`);\n      }\n      \n      // 7. Complete account setup\n      const accountCredentials = await this.completeAccountSetup(\n        page, \n        platform, \n        persona,\n        accountDetails\n      );\n      \n      // 8. Update creation record\n      await this.database.updateAccountCreationRecord(creationRecord.id, {\n        registration_status: 'completed',\n        account_username: accountCredentials.username,\n        account_email_encrypted: await encryptData(accountCredentials.email, personaId),\n        account_password_encrypted: await encryptData(accountCredentials.password, personaId),\n        creation_completed_at: new Date()\n      });\n      \n      await page.close();\n      \n      return {\n        success: true,\n        personaId,\n        platform,\n        accountCredentials: {\n          username: accountCredentials.username,\n          // Don't return sensitive data\n        },\n        creationDuration: Date.now() - creationRecord.creation_started_at.getTime()\n      };\n      \n    } catch (error) {\n      console.error(`Account creation failed for ${personaId} on ${platform}:`, error);\n      \n      await this.database.updateAccountCreationRecord(creationRecord.id, {\n        registration_status: 'failed',\n        error_details: { error: error.message, timestamp: new Date() }\n      });\n      \n      throw error;\n    }\n  }\n  \n  private async handlePhoneVerification(\n    page: any,\n    platform: string,\n    twilioConfig: TwilioPersonaConfig,\n    creationRecordId: string\n  ): Promise<VerificationHandleResult> {\n    \n    // Submit phone number for verification\n    await this.submitPhoneNumber(page, platform, twilioConfig.phoneNumber);\n    \n    // Wait for SMS verification code (with timeout)\n    const maxWaitTime = 5 * 60 * 1000; // 5 minutes\n    const startTime = Date.now();\n    \n    while (Date.now() - startTime < maxWaitTime) {\n      // Check if verification code received\n      const verification = await this.database.getSMSVerification({\n        phone_number: twilioConfig.phoneNumber,\n        status: 'completed'\n      });\n      \n      if (verification && verification.verification_code) {\n        // Enter verification code\n        await this.enterVerificationCode(page, platform, verification.verification_code);\n        \n        return { success: true, verificationId: verification.id };\n      }\n      \n      // Wait 10 seconds before checking again\n      await new Promise(resolve => setTimeout(resolve, 10000));\n    }\n    \n    return { success: false, error: 'Verification code timeout' };\n  }\n}\n```\n\n### 3. Security Enhancements\n\n```typescript\n// src/modules/security/automation-security.ts\n\nexport class AutomationSecurityManager {\n  \n  async validateAutomationPermissions(personaId: string, action: string): Promise<boolean> {\n    const persona = await this.getPersona(personaId);\n    \n    // Only allow automation for account creation, not content posting\n    const allowedActions = [\n      'account_creation',\n      'sms_verification', \n      'basic_profile_setup',\n      'account_verification'\n    ];\n    \n    return persona.automation_enabled && allowedActions.includes(action);\n  }\n  \n  async encryptAutomationCredentials(\n    credentials: AutomationCredentials,\n    personaId: string\n  ): Promise<EncryptedCredentials> {\n    return {\n      twilio_account_sid_encrypted: await encryptData(credentials.twilioAccountSid, personaId),\n      twilio_auth_token_encrypted: await encryptData(credentials.twilioAuthToken, personaId),\n      platform_passwords_encrypted: await this.encryptPlatformPasswords(\n        credentials.platformPasswords, \n        personaId\n      )\n    };\n  }\n}\n```\n\n## Configuration Integration\n\n### Environment Variables (Add to existing .env)\n\n```bash\n# Twilio Configuration (add to existing .env)\nTWILIO_MASTER_ACCOUNT_SID=your_master_account_sid\nTWILIO_MASTER_AUTH_TOKEN=your_master_auth_token\nTWILIO_WEBHOOK_URL=https://your-app.com/webhooks/twilio\n\n# Automation Settings\nAUTOMATION_ENABLED=true\nAUTOMATION_MAX_CONCURRENT=2\nAUTOMATION_RATE_LIMIT_DELAY=30000\n```\n\n### Updated Project Structure\n\n```\nsrc/\n├── modules/\n│   ├── automation/           # NEW MODULE\n│   │   ├── twilio-integration.ts\n│   │   ├── account-creation.ts\n│   │   ├── activity-scheduler.ts\n│   │   └── automation-security.ts\n│   ├── experts/              # EXISTING\n│   ├── geo-platforms/        # EXISTING\n│   └── security/             # ENHANCED\n├── api/\n│   ├── automation/           # NEW ENDPOINTS\n│   │   ├── twilio-webhook.ts\n│   │   ├── account-creation.ts\n│   │   └── scheduling.ts\n└── webhooks/                 # NEW\n    ├── twilio.ts\n    └── verification-handler.ts\n```\n\n## Budget Impact Analysis\n\n| Component | Monthly Cost | Purpose |\n|-----------|-------------|---------|\n| **Existing** | $6.35 | 5 Proxy-Cheap residential IPs |\n| **+ Twilio PH Numbers** | +$10-15 | 5 Philippines phone numbers |\n| **+ Cloud Enhancement** | +$40-60 | Enhanced infrastructure for automation |\n| **Total Automation Stack** | $56-81 | Complete automated account creation |\n\n## Risk Mitigation Strategy\n\n### Automation Boundaries\n\n1. **AUTOMATE**: Account creation, SMS verification, basic profile setup\n2. **NEVER AUTOMATE**: Content posting, engagement, community interaction\n3. **MANUAL OVERSIGHT**: All automation requires manual approval and monitoring\n\n### Safety Measures\n\n```typescript\n// Automation safety constraints\nconst AUTOMATION_CONSTRAINTS = {\n  maxAccountsPerDay: 1,\n  delayBetweenActions: 30000, // 30 seconds minimum\n  requireManualApproval: true,\n  emergencyStop: true,\n  platformSpecificLimits: {\n    instagram: { maxPerWeek: 2 },\n    tiktok: { maxPerWeek: 1 },\n    reddit: { maxPerMonth: 1 }\n  }\n};\n```\n\n## Implementation Priority\n\n1. **Phase 1**: Manual account tracking and credential storage (Week 1-2)\n2. **Phase 2**: Post-registration workflow automation (Week 3-4)  \n3. **Phase 3**: Expert content template preparation (Week 5-6)\n4. **Phase 4**: Performance tracking and analytics setup (Week 7-8)\n\n## Success Metrics\n\n- **Manual Registration Efficiency**: 90% reduction in setup time through templates\n- **Account Security**: 100% secure credential storage and management\n- **Workflow Automation**: 80% of post-registration tasks automated\n- **Template Quality**: High-quality expert positioning templates ready instantly\n- **Zero Additional Cost**: No budget increase from current $6.35/month\n\nThis manual-first approach maintains your $6.35 budget while providing intelligent automation support for post-registration workflows.5 per platform account created\n- **Safety Maintenance**: Zero bans from automation processes\n- **Manual Override**: 100% ability to intervene in any automation\n\nThis automation layer enhances your existing GEO strategy without compromising the core manual-first safety approach that protects your expert authority positioning.","size_bytes":14913},"2Character-Definition-System.md":{"content":"    # Expert Persona Schema - Island Properties GEO Lead Generation Character Definition System\n\n## Core Expert Persona Structure\n\n### Expert Persona Entity Definition\n\n```typescript\ninterface PhilippinesRealEstateExpert {\n  // Expert Identity\n  id: string; // UUID\n  expertName: string; // Professional name (e.g., \"Maria Santos\")\n  expertStatus: ExpertStatus;\n  \n  // Professional Authority Profile\n  expertiseSpecialization: RealEstateExpertise;\n  professionalCredentials: ProfessionalBackground;\n  authorityLevel: AuthorityLevel;\n  \n  // Philippines Real Estate Specialization\n  marketSpecialization: PhilippinesMarketExpertise;\n  buyerSegmentExpertise: BuyerSegmentSpecialization;\n  \n  // Geographic Authority (Philippines Focus)\n  primaryMarketLocation: PhilippinesMarketLocation;\n  localMarketKnowledge: LocalMarketExpertise;\n  \n  // GEO Content Authority Strategy\n  geoContentSpecialization: GEOContentExpertise;\n  authorityBuildingStrategy: AuthorityBuildingStrategy;\n  \n  // Platform Authority Distribution\n  platformExpertise: PlatformExpertiseStrategy;\n  \n  // Lead Generation Through Expertise\n  expertLeadGenerationConfig: ExpertLeadGenerationConfig;\n  \n  // Security Configuration\n  encryptionKeyId: string; // Separate encryption key per expert\n  proxyConfiguration: ProxyAssignment;\n  \n  // Authority Performance Tracking\n  authorityMetrics: ExpertAuthorityMetrics;\n  leadConversionTracking: ExpertLeadConversionMetrics;\n  \n  // Metadata\n  createdAt: Date;\n  updatedAt: Date;\n  lastExpertActivity: Date;\n}\n```\n\n### Expert Status Types\n\n```typescript\ntype ExpertStatus = \n  | 'developing'     // Building expertise foundation and credentials\n  | 'active'         // Actively publishing authority content\n  | 'established'    // Recognized expert with consistent authority\n  | 'thought_leader' // Industry thought leader with significant influence\n  | 'suspended';     // Temporarily disabled due to issues\n```\n\n## Philippines Real Estate Expertise Specialization\n\n### Target Market Expertise Areas\n\n```typescript\ntype RealEstateExpertise = \n  | 'philippines_market_analysis'      // Overall market trends and analysis\n  | 'expat_property_guidance'          // Specializing in foreign buyer needs\n  | 'ofw_investment_advisory'          // OFW investment strategies and guidance\n  | 'manila_urban_property_expert'     // Manila metropolitan area expertise\n  | 'cebu_island_lifestyle_expert'     // Cebu and island living specialization\n  | 'luxury_property_consultant'       // High-end property market expertise\n  | 'investment_roi_analyst'           // Property investment analysis and ROI\n  | 'legal_compliance_advisor'         // Philippines property law and compliance\n  | 'emerging_markets_specialist';     // Emerging areas and development trends\n\ninterface ExpertiseSpecializationConfig {\n  primaryExpertise: RealEstateExpertise;\n  \n  // Authority Building Configuration\n  expertiseDepth: ExpertiseDepth;\n  credibilityMarkers: CredibilityMarker[];\n  authoritySignals: AuthoritySignal[];\n  \n  // Content Strategy Alignment\n  authorityContentFocus: AuthorityContentArea[];\n  expertPositioningApproach: ExpertPositioningStrategy;\n  thoughtLeadershipGoals: ThoughtLeadershipGoal[];\n}\n\ntype ExpertiseDepth = \n  | 'emerging_expert'    // 1-3 years experience, building credibility\n  | 'established_expert' // 3-7 years experience, recognized authority\n  | 'senior_expert'      // 7-15 years experience, thought leadership\n  | 'industry_authority'; // 15+ years experience, industry influence\n\ntype AuthorityContentArea = \n  | 'comprehensive_market_analysis'     // Deep market reports and analysis\n  | 'investment_education_content'      // Educational content for investors\n  | 'legal_regulatory_guidance'         // Legal and regulatory expertise\n  | 'local_market_insights'            // Local knowledge and insider insights\n  | 'buyer_consultation_expertise'      // Direct buyer guidance and support\n  | 'trend_prediction_analysis'        // Market trend analysis and predictions\n  | 'case_study_development'           // Real-world case studies and examples;\n\ninterface CredibilityMarker {\n  type: 'professional_experience' | 'market_track_record' | 'client_testimonials' | 'industry_recognition';\n  description: string;\n  verificationMethod: string;\n  authorityValue: number; // 1-10 scale of credibility impact\n}\n```\n\n## Buyer Segment Specialization for Expert Authority\n\n### Expert Positioning by Buyer Persona\n\n```typescript\ninterface BuyerSegmentSpecialization {\n  primaryBuyerSegment: PhilippinesBuyerSegment;\n  expertisePositioning: ExpertPositioningStrategy;\n  authorityBuildingApproach: AuthorityBuildingApproach;\n  leadGenerationStrategy: ExpertLeadGenerationStrategy;\n}\n\ntype PhilippinesBuyerSegment = \n  | 'expat_retirees'           // Foreign retirees seeking Philippines property\n  | 'ofw_investors'            // Overseas Filipino Workers investing back home\n  | 'manila_professionals'     // Urban professionals seeking investment/lifestyle\n  | 'international_investors'  // Foreign investors seeking ROI opportunities\n  | 'lifestyle_relocators'     // People seeking lifestyle change to Philippines\n  | 'business_expansion_buyers'// Business owners expanding to Philippines\n  | 'digital_nomad_investors'; // Location-independent professionals\n\ninterface ExpertPositioningStrategy {\n  expertiseAngle: string; // How to position expertise for this buyer segment\n  authorityDemonstration: string[]; // Ways to demonstrate relevant expertise\n  trustBuildingApproach: string; // How to build trust with this segment\n  consultationPositioning: string; // How to position consultation services\n}\n\n// Example expert positioning configurations\nconst expertPositioningExamples: Record<PhilippinesBuyerSegment, ExpertPositioningStrategy> = {\n  expat_retirees: {\n    expertiseAngle: 'Philippines retirement property specialist with 8+ years helping foreign retirees',\n    authorityDemonstration: [\n      'Comprehensive guides to Philippines retirement visas and property ownership',\n      'Case studies of successful expat property purchases',\n      'Legal compliance expertise for foreign buyers',\n      'Cost of living analysis and lifestyle insights'\n    ],\n    trustBuildingApproach: 'Share personal experience helping hundreds of retirees navigate Philippines property market',\n    consultationPositioning: 'Personalized retirement property consultation based on visa status and lifestyle goals'\n  },\n  \n  ofw_investors: {\n    expertiseAngle: 'OFW property investment specialist understanding the unique challenges of overseas earning',\n    authorityDemonstration: [\n      'Investment ROI analysis specifically for OFW income patterns',\n      'Remote property management guidance for overseas investors',\n      'Currency exchange and financing strategies for OFWs',\n      'Family property planning and inheritance considerations'\n    ],\n    trustBuildingApproach: 'Deep understanding of OFW financial situations and long-distance investment challenges',\n    consultationPositioning: 'Strategic investment consultation for OFWs maximizing overseas earnings through property'\n  },\n  \n  manila_professionals: {\n    expertiseAngle: 'Manila property market expert specializing in professional lifestyle and investment transitions',\n    authorityDemonstration: [\n      'Manila vs. provincial property investment analysis',\n      'Professional lifestyle transition planning',\n      'Urban to island living feasibility studies',\n      'Career-property investment integration strategies'\n    ],\n    trustBuildingApproach: 'Personal experience with Manila professional market and lifestyle transition decisions',\n    consultationPositioning: 'Strategic property consultation for professionals optimizing lifestyle and investment goals'\n  }\n};\n```\n\n## GEO Content Authority Strategy\n\n### AI Citation-Optimized Content Framework\n\n```typescript\ninterface GEOContentExpertise {\n  // Primary Authority Content (70-80% of content) - AI Citation Focus\n  primaryAuthorityContent: AuthorityContentDefinition[];\n  \n  // Secondary Expertise Content (15-20% of content) - Credibility Building\n  secondaryExpertiseContent: ExpertiseContentDefinition[];\n  \n  // Consultation Conversion Content (5-10% of content) - Lead Generation\n  consultationConversionContent: ConversionContentDefinition[];\n  \n  // Content Types Optimized for AI Engine Citation\n  aiOptimizedContentTypes: AIContentType[];\n  \n  // Seasonal/Market Cycle Content (Philippines Context)\n  marketCycleContent: PhilippinesMarketCycleContent[];\n}\n\ninterface AuthorityContentDefinition {\n  contentType: string;\n  description: string;\n  \n  // AI Engine Citation Optimization\n  aiCitationKeywords: string[]; // Keywords AI engines associate with authority\n  comprehensiveAnswerSets: ComprehensiveAnswerSet[]; // Complete answers to complex queries\n  authoritySignalElements: AuthoritySignalElement[]; // Elements that build AI citation credibility\n  \n  // Content Depth and Quality\n  contentDepthRequirements: ContentDepthRequirement;\n  researchRequirements: ResearchRequirement[];\n  expertiseValidationElements: ExpertiseValidationElement[];\n  \n  // Lead Generation Integration\n  buyerSegmentRelevance: PhilippinesBuyerSegment[];\n  consultationConversionPotential: 'high' | 'medium' | 'low';\n  expertPositioningStage: 'authority_building' | 'trust_development' | 'consultation_invitation';\n}\n\n// Authority-Building Content Types for AI Citation\ntype AIContentType = \n  | 'comprehensive_philippines_property_guides'    // Complete guides AI engines cite as definitive\n  | 'expert_market_analysis_reports'               // Data-driven analysis AI engines reference\n  | 'legal_compliance_expert_explanations'         // Authoritative legal guidance AI engines trust\n  | 'investment_strategy_expert_frameworks'        // Investment frameworks AI engines recommend\n  | 'local_market_authority_insights'             // Local expertise AI engines can't get elsewhere\n  | 'buyer_education_expert_content'              // Educational content AI engines use for guidance\n  | 'trend_analysis_expert_predictions'           // Expert predictions AI engines reference for trends\n  | 'case_study_expert_analysis';                 // Real-world analysis AI engines use for examples\n\ninterface ComprehensiveAnswerSet {\n  expertQuery: string; // Complex query requiring expert knowledge\n  authorityAnswerFramework: string[]; // Framework for comprehensive expert response\n  expertiseValidationElements: string[]; // How to demonstrate expertise in answer\n  citationWorthy: boolean; // Whether this is likely to be cited by AI engines\n}\n\n// Example GEO-Optimized Expert Content Sets\nconst geoExpertContentSets: ComprehensiveAnswerSet[] = [\n  {\n    expertQuery: \"What are the complete legal requirements for foreigners buying property in Philippines?\",\n    authorityAnswerFramework: [\n      \"Constitutional restrictions and foreign ownership limitations\",\n      \"Condominium foreign ownership rules and 60/40 restrictions\", \n      \"Long-term lease alternatives and legal structures\",\n      \"Required documentation and legal processes\",\n      \"Common legal pitfalls and how to avoid them\",\n      \"Professional legal representation requirements\"\n    ],\n    expertiseValidationElements: [\n      \"Cite specific Philippine laws and regulations\",\n      \"Reference real case studies from legal experience\",\n      \"Include recent legal updates and changes\",\n      \"Provide step-by-step legal compliance process\"\n    ],\n    citationWorthy: true\n  },\n  {\n    expertQuery: \"How do Philippines property investment returns compare to other Southeast Asian markets?\",\n    authorityAnswerFramework: [\n      \"Philippines property market ROI analysis with current data\",\n      \"Comparative analysis with Thailand, Malaysia, Vietnam markets\",\n      \"Risk-adjusted returns and market stability factors\",\n      \"Currency considerations and exchange rate impacts\",\n      \"Tax implications and total cost of ownership\",\n      \"Expert predictions for 5-year market outlook\"\n    ],\n    expertiseValidationElements: [\n      \"Current market data with reliable sources\",\n      \"Personal experience with multiple Southeast Asian markets\",\n      \"Professional network insights and validation\",\n      \"Track record of successful investment guidance\"\n    ],\n    citationWorthy: true\n  },\n  {\n    expertQuery: \"What should expat retirees know about living costs and property expenses in Cebu?\",\n    authorityAnswerFramework: [\n      \"Complete cost of living breakdown for Cebu retirees\",\n      \"Property costs: purchase, maintenance, taxes, utilities\",\n      \"Healthcare costs and insurance considerations\",\n      \"Transportation and daily living expenses\",\n      \"Lifestyle cost variations by area and lifestyle choices\",\n      \"Budget planning framework for sustainable retirement\"\n    ],\n    expertiseValidationElements: [\n      \"Current, verified cost data from local sources\",\n      \"Personal experience with expat retiree clients\",\n      \"Network of local service providers and cost validation\",\n      \"Case studies of successful retiree transitions\"\n    ],\n    citationWorthy: true\n  }\n];\n\ninterface AuthoritySignalElement {\n  signalType: 'local_expertise' | 'market_data_access' | 'professional_experience' | 'client_success_stories';\n  implementation: string; // How to demonstrate this authority signal\n  aiCitationValue: string; // Why AI engines would cite this authority\n  credibilityImpact: number; // 1-10 scale of credibility impact\n}\n```\n\n## Platform Authority Strategy\n\n### GEO Platform-Specific Expert Positioning\n\n```typescript\ninterface PlatformExpertiseStrategy {\n  medium: MediumExpertStrategy; // Phase 1 - Primary authority building platform\n  reddit: RedditExpertStrategy; // Phase 2 - Community expert positioning  \n  quora: QuoraExpertStrategy; // Phase 3 - Q&A expert authority\n  facebook: FacebookExpertStrategy; // Phase 4 - Local community expert presence\n  linkedin: LinkedInExpertStrategy; // Phase 5 - Professional expert networking\n}\n\ninterface MediumExpertStrategy {\n  // Medium-Specific Expert Authority Building\n  expertPositioning: 'philippines_real_estate_market_expert';\n  \n  contentStrategy: {\n    comprehensiveMarketAnalysis: number; // % comprehensive market analysis articles\n    expertInvestmentGuidance: number; // % investment strategy and guidance\n    legalRegulatoryExpertise: number; // % legal and regulatory expert content\n    localMarketInsights: number; // % local market expertise demonstration\n    buyerEducationContent: number; // % educational content for buyers\n  };\n  \n  // Authority Building Approach\n  expertiseEstablishmentMethod: 'comprehensive_authoritative_articles';\n  publicationFrequency: 'weekly_comprehensive_analysis';\n  expertBylineStrategy: 'credentials_experience_local_knowledge';\n  \n  // Medium-Specific Authority Features\n  mediumPublicationStrategy: MediumPublicationStrategy;\n  expertNetworkingApproach: MediumNetworkingStrategy;\n  authorityMeasurementMetrics: MediumAuthorityMetrics;\n  \n  // Lead Generation Through Authority\n  expertiseToConsultationFunnel: ExpertiseConsultationFunnel;\n  authorityBasedLeadGeneration: AuthorityLeadGeneration;\n}\n\ninterface MediumPublicationStrategy {\n  targetPublications: string[]; // Philippines real estate and investment publications\n  expertContributorStatus: 'individual' | 'publication_contributor' | 'featured_expert';\n  crossPromotionStrategy: string; // How to leverage publication network\n  authorityAmplificationMethod: string; // How to amplify expert status\n}\n\ninterface RedditExpertStrategy {\n  // Reddit-Specific Expert Community Positioning\n  expertPositioning: 'helpful_philippines_property_expert';\n  \n  communityExpertiseStrategy: {\n    philippines_subreddit_expertise: number; // % expertise demonstration in r/Philippines\n    real_estate_subreddit_authority: number; // % expert contributions in r/RealEstate  \n    expat_community_guidance: number; // % helpful expert guidance in expat communities\n    investment_subreddit_insights: number; // % investment expertise in relevant communities\n  };\n  \n  // Expert Engagement Approach\n  expertEngagementMethod: 'comprehensive_helpful_expert_responses';\n  authorityBuildingFrequency: 'daily_expert_value_contributions';\n  expertCredibilityEstablishment: 'consistent_high_value_expert_advice';\n  \n  // Reddit-Specific Expert Features\n  redditExpertReputationBuilding: RedditExpertReputationStrategy;\n  communityValueCreation: CommunityValueStrategy;\n  expertRecognitionPursuits: ExpertRecognitionStrategy;\n  \n  // Lead Generation Through Community Expertise\n  communityExpertiseToInquiry: CommunityExpertiseConversion;\n  helpfulExpertToConsultation: HelpfulExpertConversion;\n}\n\ninterface QuoraExpertStrategy {\n  // Quora-Specific Expert Answer Authority\n  expertPositioning: 'definitive_philippines_property_expert';\n  \n  expertAnswerStrategy: {\n    comprehensiveExpertAnswers: number; // % comprehensive authoritative answers\n    marketAnalysisExpertise: number; // % market analysis expert responses\n    legalGuidanceAuthority: number; // % legal guidance expert answers\n    investmentStrategyExpertise: number; // % investment strategy expert content\n    localKnowledgeAuthority: number; // % local expertise demonstration\n  };\n  \n  // Expert Answer Approach  \n  answerAuthorityMethod: 'comprehensive_data_backed_expert_responses';\n  expertCredentialsDisplay: 'prominent_expertise_credentials';\n  authorityAnswerFrequency: 'daily_expert_question_responses';\n  \n  // Quora-Specific Expert Features\n  quoraExpertStatusPursuit: QuoraExpertStatusStrategy;\n  answerQualityOptimization: AnswerQualityStrategy;\n  expertFollowerBuilding: ExpertFollowerStrategy;\n  \n  // Lead Generation Through Expert Answers\n  expertAnswerToConsultation: ExpertAnswerConversion;\n  authorityBasedInquiries: AuthorityInquiryGeneration;\n}\n```\n\n## Expert Lead Generation Configuration\n\n### Authority-Based Lead Generation Strategy\n\n```typescript\ninterface ExpertLeadGenerationConfig {\n  // Expert Authority Lead Capture Strategy\n  authorityLeadCaptureStrategy: AuthorityBasedLeadCapture;\n  \n  // Expert Consultation Funnel\n  consultationFunnelStrategy: ExpertConsultationFunnel;\n  \n  // Lead Qualification Through Expertise\n  expertLeadQualification: ExpertLeadQualificationStrategy;\n  \n  // ROI Measurement for Expert Authority\n  expertAuthorityROI: ExpertAuthorityROIStrategy;\n}\n\ninterface AuthorityBasedLeadCapture {\n  // Authority-Driven Lead Generation Methods\n  expertContentBasedCapture: ExpertContentLeadCapture[];\n  authorityEngagementCapture: AuthorityEngagementCapture[];\n  consultationRequestHandling: ConsultationRequestStrategy;\n  \n  // Expert Lead Qualification Process\n  authorityBasedQualification: AuthorityLeadQualificationCriteria;\n  expertConsultationScoring: ExpertConsultationScoringSystem;\n}\n\ninterface ExpertContentLeadCapture {\n  expertContentType: string; // Type of expert content generating leads\n  leadCaptureMethod: 'consultation_inquiry' | 'expert_question_response' | 'authority_validation_request' | 'direct_expert_contact';\n  expertQualificationQuestions: string[]; // Questions to qualify expertise match\n  consultationInvitationApproach: string; // How to invite consultation\n}\n\ninterface ExpertConsultationFunnel {\n  // Consultation Request Processing\n  consultationRequestTypes: ConsultationRequestType[];\n  expertConsultationDelivery: ConsultationDeliveryMethod[];\n  consultationToIslandPropertiesReferral: ReferralStrategy;\n  \n  // Consultation Quality and Conversion\n  consultationQualityStandards: ConsultationQualityStandard[];\n  consultationConversionOptimization: ConversionOptimizationStrategy[];\n}\n\ninterface ConsultationRequestType {\n  requestType: 'general_market_guidance' | 'specific_property_analysis' | 'investment_strategy_consultation' | 'legal_compliance_guidance';\n  expertiseRequirement: RealEstateExpertise; // Which expertise area this requires\n  consultationComplexity: 'basic' | 'intermediate' | 'advanced';\n  leadConversionPotential: 'high' | 'medium' | 'low';\n  islandPropertiesRelevance: string; // How this consultation connects to Island Properties\n}\n\n// Example consultation funnel configuration\nconst expertConsultationFunnelExample: ExpertConsultationFunnel = {\n  consultationRequestTypes: [\n    {\n      requestType: 'specific_property_analysis',\n      expertiseRequirement: 'cebu_island_lifestyle_expert',\n      consultationComplexity: 'intermediate',\n      leadConversionPotential: 'high',\n      islandPropertiesRelevance: 'Direct match for Island Properties target properties'\n    },\n    {\n      requestType: 'investment_strategy_consultation', \n      expertiseRequirement: 'investment_roi_analyst',\n      consultationComplexity: 'advanced',\n      leadConversionPotential: 'high',\n      islandPropertiesRelevance: 'Strategic consultation can identify Island Properties opportunities'\n    }\n  ],\n  \n  expertConsultationDelivery: [\n    {\n      deliveryMethod: 'comprehensive_written_analysis',\n      timeInvestment: '2-3 hours expert analysis',\n      valueProposition: 'Detailed market analysis and recommendations',\n      leadNurturingValue: 'Demonstrates deep expertise and builds trust'\n    },\n    {\n      deliveryMethod: 'video_consultation_session',\n      timeInvestment: '60-90 minute expert consultation', \n      valueProposition: 'Personalized expert guidance and Q&A',\n      leadNurturingValue: 'Direct relationship building and trust establishment'\n    }\n  ],\n  \n  consultationToIslandPropertiesReferral: {\n    referralTiming: 'after_establishing_trust_and_demonstrating_expertise',\n    referralApproach: 'natural_recommendation_based_on_consultation_findings',\n    referralPositioning: 'island_properties_as_implementation_partner',\n    conversionOptimization: 'warm_introduction_with_expert_endorsement'\n  }\n};\n```\n\n## Expert Authority Performance Metrics\n\n### GEO and Expert Authority Tracking\n\n```typescript\ninterface ExpertAuthorityMetrics {\n  // Expert Authority Building Performance\n  authorityBuildingMetrics: AuthorityBuildingMetrics;\n  \n  // Platform-Specific Expert Performance\n  platformExpertiseMetrics: {\n    [platform: string]: PlatformExpertiseMetrics;\n  };\n  \n  // Expert Lead Generation Performance\n  expertLeadGenerationMetrics: ExpertLeadGenerationMetrics;\n  \n  // AI Citation and Authority Recognition\n  aiCitationAuthorityMetrics: AICitationAuthorityMetrics;\n  \n  // Expert ROI and Business Impact\n  expertROIMetrics: ExpertROIMetrics;\n}\n\ninterface AuthorityBuildingMetrics {\n  // Expert Recognition and Credibility\n  expertRecognitionSignals: {\n    expertStatusBadges: number; // Platform expert recognition badges\n    authorityContentShares: number; // Shares by other experts/professionals\n    expertMentionsAndReferences: number; // Mentions by industry professionals  \n    thoughtLeadershipIndicators: number; // Thought leadership recognition signals\n    expertiseValidationEvents: number; // Events where expertise was validated\n  };\n  \n  // Content Authority Performance\n  contentAuthorityMetrics: {\n    comprehensiveContentPieces: number; // Total comprehensive expert content created\n    averageContentDepth: number; // Average word count/depth of expert content\n    contentQualityScore: number; // Quality assessment of expert content\n    expertiseConsistencyScore: number; // Consistency of expertise demonstration\n    authorityContentEngagementQuality: number; // Quality of engagement on expert content\n  };\n  \n  // Expert Market Position\n  marketPositionMetrics: {\n    expertRankingPosition: number; // Ranking among Philippines real estate experts\n    marketShareOfVoice: number; // Share of expert voice in market discussions\n    competitiveAuthorityScore: number; // Authority score vs competitors\n    expertDifferentiationScore: number; // Uniqueness of expert positioning\n  };\n}\n\ninterface ExpertLeadGenerationMetrics {\n  // Expert Authority to Lead Conversion\n  authorityLeadConversion: {\n    expertInquiriesGenerated: number; // Inquiries generated from expert positioning\n    consultationRequestsReceived: number; // Direct consultation requests\n    expertAuthorityToLeadRate: number; // Conversion rate from authority to leads\n    consultationToQualifiedLeadRate: number; // Consultation to qualified lead rate\n    expertLeadQualityScore: number; // Average quality of expert-generated leads\n  };\n  \n  // Consultation Performance\n  consultationMetrics: {\n    consultationsCompleted: number; // Total expert consultations completed\n    consultationSatisfactionScore: number; // Satisfaction with expert consultations\n    consultationToReferralRate: number; // Consultations leading to Island Properties referrals\n    consultationRevenueAttribution: number; // Revenue attributed to expert consultations\n  };\n  \n  // Lead Source Attribution\n  expertLeadSources: {\n    mediumArticleLeads: number; // Leads from Medium expert articles\n    redditExpertiseLeads: number; // Leads from Reddit expert contributions\n    quoraExpertAnswerLeads: number; // Leads from Quora expert answers\n    directExpertInquiries: number; // Direct inquiries to expert\n    referralNetworkLeads: number; // Leads from expert referral network\n  };\n}\n\ninterface AICitationAuthorityMetrics {\n  // AI Engine Citation Estimates\n  aiCitationEstimates: {\n    estimatedMonthlyCitations: number; // Estimated AI engine citations monthly\n    citationQualityScore: number; // Quality/authority of citations received\n    aiAuthorityRecognitionScore: number; // Recognition as authority by AI engines\n    searchVisibilityImprovementScore: number; // Improvement in search visibility\n  };\n  \n  // Content AI Optimization Performance\n  aiOptimizationMetrics: {\n    contentAIOptimizationScore: number; // How well content is optimized for AI citation\n    comprehensiveAnswerCitationRate: number; // Rate of comprehensive answers being cited\n    expertiseValidationCitationRate: number; // Rate of expertise validation in citations\n    authoritySignalEffectivenessScore: number; // Effectiveness of authority signals\n  };\n}\n\ninterface ExpertROIMetrics {\n  // Expert Authority Investment Analysis\n  expertInvestmentMetrics: {\n    contentCreationTimeInvestment: number; // Hours invested in expert content creation\n    platformAuthoryBuildingInvestment: number; // Time invested in platform authority building\n    consultationDeliveryInvestment: number; // Time invested in consultation delivery\n    totalExpertPositioningInvestment: number; // Total investment in expert positioning\n  };\n  \n  // Expert Authority Revenue Attribution\n  expertRevenueMetrics: {\n    expertAttributedRevenue: number; // Revenue attributed to expert positioning\n    consultationDrivenRevenue: number; // Revenue from expert consultation funnel\n    authorityBrandValueGenerated: number; // Brand value generated through authority\n    expertROICalculation: number; // ROI from expert positioning investment\n  };\n  \n  // Competitive Advantage Metrics\n  competitiveAdvantageMetrics: {\n    expertAuthorityDifferentiation: number; // Differentiation through expert authority\n    marketLeadershipPosition: number; // Position as market thought leader\n    expertBrandRecognitionValue: number; // Brand recognition value from expertise\n    sustainableCompetitiveAdvantage: number; // Long-term competitive advantage score\n  };\n}\n```\n\nThis comprehensive expert persona schema provides the foundation for creating authoritative Philippines real estate experts specifically designed for GEO lead generation while maintaining authenticity through professional expertise demonstration and genuine market knowledge.","size_bytes":27539},"2Database-Architecture.md":{"content":"# GEO-Optimized Database Architecture - Island Properties Lead Generation System\n\n## Core Entity Relationships (GEO-Focused)\n\n**Primary Data Flow:**\n• Admin User → Expert Personas → GEO Platform Accounts → Authority Content → AI Citations → Lead Generation\n• Content Authority → AI Engine Discovery → User Inquiries → Lead Attribution → Island Properties Conversions\n• Expert Positioning → Thought Leadership → Trust Building → Consultation Requests → Revenue Generation\n\n## Database Schema Design (GEO Strategy)\n\n### Admin User Table (Single Expert User System)\n\n```sql\nCREATE TABLE admin_user (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    \n    -- GEO Strategy Configuration\n    max_expert_personas INTEGER DEFAULT 5,\n    monthly_budget_usd DECIMAL(8,2) DEFAULT 6.35, -- Proxy budget constraint\n    geo_optimization_level VARCHAR(20) DEFAULT 'high', -- GEO focus intensity\n    authority_building_goals JSONB DEFAULT '{}', -- Expert positioning objectives\n    \n    -- Content Creation Preferences\n    content_expertise_areas JSONB DEFAULT '[]', -- Philippines real estate specializations\n    target_ai_engines JSONB DEFAULT '[\"chatgpt\", \"claude\", \"bard\", \"perplexity\"]',\n    citation_tracking_enabled BOOLEAN DEFAULT true,\n    \n    -- Security Configuration\n    master_encryption_key_id VARCHAR(255) NOT NULL,\n    two_factor_enabled BOOLEAN DEFAULT true,\n    two_factor_secret VARCHAR(255),\n    \n    -- Session Management\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW(),\n    last_login TIMESTAMP,\n    is_active BOOLEAN DEFAULT true\n);\n```\n\n### Expert Personas Table (Authority-Focused Real Estate Experts)\n\n```sql\nCREATE TABLE expert_personas (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    admin_user_id UUID REFERENCES admin_user(id) ON DELETE CASCADE,\n    \n    -- Core Expert Identity\n    expert_name VARCHAR(100) NOT NULL, -- Professional expert name\n    expert_status VARCHAR(20) DEFAULT 'developing', -- developing, active, established, authority\n    \n    -- Real Estate Expertise Specialization\n    expertise_focus VARCHAR(50) NOT NULL, -- philippines_market_analysis, expat_property_guidance, investment_advisory, etc.\n    target_buyer_segments JSONB NOT NULL, -- expat_retirees, ofw_investors, manila_professionals, etc.\n    authority_level VARCHAR(20) DEFAULT 'emerging', -- emerging, established, recognized, thought_leader\n    \n    -- Expert Profile (Encrypted)\n    professional_background_encrypted TEXT NOT NULL, -- AES-256-GCM encrypted career history\n    expertise_credentials_encrypted TEXT NOT NULL, -- AES-256-GCM encrypted qualifications\n    market_experience_encrypted TEXT NOT NULL, -- AES-256-GCM encrypted market knowledge\n    \n    -- Geographic Expertise (Philippines Focus)\n    primary_market_location VARCHAR(50) NOT NULL, -- Manila, Cebu, Davao\n    secondary_market_areas JSONB DEFAULT '[]', -- Additional areas of expertise\n    local_market_knowledge_depth INTEGER DEFAULT 1, -- 1-10 scale of local expertise\n    timezone VARCHAR(50) DEFAULT 'Asia/Manila',\n    \n    -- GEO Content Authority Configuration\n    geo_content_specializations JSONB NOT NULL, -- AI-optimized content areas\n    authority_building_topics JSONB NOT NULL, -- Key topics for thought leadership\n    citation_worthy_expertise JSONB NOT NULL, -- Areas AI engines should reference\n    \n    -- Platform Authority Strategy\n    platform_expertise_focus JSONB NOT NULL, -- Medium articles, Reddit expertise, Quora answers\n    content_publication_schedule JSONB NOT NULL, -- Publishing frequency and timing\n    expert_voice_characteristics JSONB NOT NULL, -- Professional tone and approach\n    \n    -- Security Configuration\n    persona_encryption_key_id VARCHAR(255) NOT NULL, -- Separate key per expert persona\n    browser_fingerprint_config JSONB NOT NULL, -- Browser isolation settings\n    \n    -- Authority Building Performance\n    current_authority_score DECIMAL(5,2) DEFAULT 0.00, -- 0-100 expert authority score\n    estimated_ai_citations INTEGER DEFAULT 0, -- Estimated monthly AI citations\n    expert_recognition_signals INTEGER DEFAULT 0, -- Upvotes, shares, expert badges\n    thought_leadership_reach INTEGER DEFAULT 0, -- Monthly content reach\n    \n    -- Lead Generation Through Expertise\n    monthly_expert_inquiries INTEGER DEFAULT 0, -- Inquiries from expert positioning\n    consultation_requests INTEGER DEFAULT 0, -- Direct consultation requests\n    authority_to_lead_conversion DECIMAL(5,4) DEFAULT 0.0000, -- Authority → lead rate\n    \n    -- Proxy Assignment (GEO Platforms)\n    proxy_id VARCHAR(100), -- Proxy-Cheap static IP identifier\n    proxy_ip VARCHAR(45), -- IPv4/IPv6 address\n    proxy_location VARCHAR(100), -- Manila, Cebu for authentic presence\n    proxy_status VARCHAR(20) DEFAULT 'unassigned',\n    \n    -- Performance Tracking\n    total_authority_content_pieces INTEGER DEFAULT 0, -- Articles, answers, posts created\n    total_qualified_leads_generated INTEGER DEFAULT 0,\n    monthly_roi DECIMAL(10,2) DEFAULT 0.00, -- Monthly ROI from expert positioning\n    \n    -- Risk and Compliance\n    expert_credibility_score DECIMAL(3,2) DEFAULT 1.00, -- Credibility assessment\n    content_quality_score DECIMAL(3,2) DEFAULT 0.00, -- Average content quality\n    platform_compliance_status JSONB DEFAULT '{}', -- Compliance across platforms\n    \n    -- Metadata\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW(),\n    last_content_creation TIMESTAMP,\n    authority_review_date TIMESTAMP DEFAULT NOW()\n);\n\n-- Indexes for GEO performance\nCREATE INDEX idx_expert_personas_authority_level ON expert_personas(authority_level);\nCREATE INDEX idx_expert_personas_expertise_focus ON expert_personas(expertise_focus);\nCREATE INDEX idx_expert_personas_authority_score ON expert_personas(current_authority_score);\nCREATE INDEX idx_expert_personas_location ON expert_personas(primary_market_location);\n```\n\n### GEO Platform Accounts Table (Authority Platform Priority)\n\n```sql\nCREATE TABLE geo_platform_accounts (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    persona_id UUID REFERENCES expert_personas(id) ON DELETE CASCADE,\n    platform_type VARCHAR(50) NOT NULL, -- medium, reddit, quora, facebook, linkedin\n    platform_priority INTEGER NOT NULL, -- 1=Medium, 2=Reddit, 3=Quora, etc.\n    geo_optimization_level VARCHAR(20) DEFAULT 'high', -- GEO focus for this platform\n    \n    -- Account Details\n    username VARCHAR(100) NOT NULL,\n    display_name VARCHAR(100),\n    expert_bio TEXT, -- Professional bio emphasizing expertise\n    expert_credentials TEXT, -- Displayed qualifications and experience\n    profile_optimization_score DECIMAL(3,2) DEFAULT 0.00, -- Profile optimization for authority\n    \n    -- Authentication (Encrypted with persona-specific key)\n    credentials_encrypted TEXT NOT NULL, -- AES-256-GCM encrypted credentials\n    auth_tokens_encrypted TEXT, -- OAuth tokens, encrypted\n    \n    -- Account Authority Status\n    account_status VARCHAR(20) DEFAULT 'building', -- building, active, established, expert_recognized\n    platform_authority_level VARCHAR(20) DEFAULT 'newcomer', -- newcomer, contributor, expert, thought_leader\n    expert_verification_status VARCHAR(20) DEFAULT 'unverified', -- unverified, verified, expert_badge\n    account_reputation_score DECIMAL(5,2) DEFAULT 0.00, -- Platform-specific reputation\n    \n    -- Content Authority Metrics\n    total_authority_content INTEGER DEFAULT 0, -- Articles, answers, expert posts\n    average_content_engagement DECIMAL(5,2) DEFAULT 0.00, -- Quality engagement metrics\n    expert_recognition_signals INTEGER DEFAULT 0, -- Upvotes, shares, expert mentions\n    thought_leadership_indicators INTEGER DEFAULT 0, -- Citations, references, expert status\n    \n    -- Platform-Specific GEO Configuration\n    platform_geo_settings JSONB NOT NULL, -- GEO optimization settings per platform\n    content_authority_strategy JSONB NOT NULL, -- Authority building approach\n    expert_engagement_approach JSONB NOT NULL, -- How to engage as expert\n    citation_optimization_config JSONB NOT NULL, -- AI citation optimization settings\n    \n    -- Authority-Based Lead Generation\n    monthly_expert_inquiries INTEGER DEFAULT 0, -- Inquiries from expert status\n    consultation_requests INTEGER DEFAULT 0, -- Direct consultation requests\n    authority_conversion_rate DECIMAL(5,4) DEFAULT 0.0000, -- Authority → inquiry rate\n    lead_quality_from_authority DECIMAL(3,2) DEFAULT 0.00, -- Quality of authority-generated leads\n    \n    -- Platform Content Strategy\n    content_publication_frequency VARCHAR(20) DEFAULT 'weekly', -- Publishing schedule\n    authority_content_types JSONB DEFAULT '[]', -- Types of content for authority building\n    target_citation_keywords JSONB DEFAULT '[]', -- Keywords for AI citation optimization\n    competitive_expert_analysis JSONB DEFAULT '{}', -- Analysis of competing experts\n    \n    -- Metadata\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW(),\n    last_expert_activity TIMESTAMP,\n    authority_building_since TIMESTAMP DEFAULT NOW()\n);\n\n-- GEO platform indexes\nCREATE INDEX idx_geo_platform_priority ON geo_platform_accounts(platform_priority);\nCREATE INDEX idx_geo_platform_authority ON geo_platform_accounts(platform_authority_level);\nCREATE INDEX idx_geo_platform_type_authority ON geo_platform_accounts(platform_type, current_authority_score);\n```\n\n### Authority Content Templates (GEO-Optimized)\n\n```sql\nCREATE TABLE authority_content_templates (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    admin_user_id UUID REFERENCES admin_user(id) ON DELETE CASCADE,\n    \n    -- Template Classification\n    template_name VARCHAR(100) NOT NULL,\n    content_type VARCHAR(50) NOT NULL, -- comprehensive_article, expert_analysis, market_report, qa_answer\n    authority_level VARCHAR(20) NOT NULL, -- beginner, intermediate, expert, thought_leader\n    platform_optimization VARCHAR(50) NOT NULL, -- medium_longform, reddit_discussion, quora_answer\n    \n    -- GEO Optimization Configuration\n    geo_optimization_score DECIMAL(3,2) DEFAULT 0.00, -- 0-1 GEO optimization level\n    ai_citation_potential VARCHAR(20) DEFAULT 'medium', -- low, medium, high, very_high\n    target_ai_queries JSONB DEFAULT '[]', -- Queries this content should answer\n    authority_signals_included JSONB DEFAULT '[]', -- Expert credibility elements\n    \n    -- Content Structure (Authority-Focused)\n    expert_headline_template VARCHAR(500), -- Headlines that establish authority\n    credibility_establishment_framework TEXT, -- How to establish expert credibility\n    comprehensive_content_structure JSONB NOT NULL, -- Structure for thorough coverage\n    data_integration_guidance TEXT, -- How to include supporting data\n    expert_conclusion_framework TEXT, -- How to conclude with authority\n    \n    -- Philippines Real Estate Focus\n    market_expertise_areas JSONB NOT NULL, -- Philippines market topics covered\n    buyer_segment_targeting JSONB NOT NULL, -- Which buyer personas this serves\n    local_knowledge_integration JSONB DEFAULT '[]', -- Local insights to include\n    regulatory_compliance_notes TEXT, -- Legal/regulatory considerations\n    \n    -- AI Citation Optimization Elements\n    question_answer_format BOOLEAN DEFAULT false, -- Structured for AI Q&A\n    factual_data_requirements JSONB DEFAULT '[]', -- Required supporting data\n    expert_opinion_sections JSONB DEFAULT '[]', -- Where to include expert analysis\n    citation_worthy_insights JSONB DEFAULT '[]', -- Key insights AI engines will cite\n    \n    -- Content Depth and Quality\n    target_word_count_range VARCHAR(20) DEFAULT '2000-4000', -- Comprehensive content length\n    research_requirements JSONB DEFAULT '[]', -- Research needed for authority\n    expert_voice_guidelines TEXT, -- How to maintain expert tone\n    competitive_differentiation TEXT, -- How to stand out from other experts\n    \n    -- Lead Generation Integration (Subtle)\n    authority_to_consultation_hooks JSONB DEFAULT '[]', -- Natural consultation invitations\n    expert_contact_integration TEXT, -- How to offer additional expert guidance\n    island_properties_connection TEXT, -- Subtle business connection approach\n    trust_building_elements JSONB DEFAULT '[]', -- Elements that build reader trust\n    \n    -- Performance Optimization\n    usage_count INTEGER DEFAULT 0,\n    authority_building_effectiveness DECIMAL(5,2) DEFAULT 0.00, -- Authority building success\n    ai_citation_generation_rate DECIMAL(5,4) DEFAULT 0.0000, -- Citations per use\n    lead_generation_rate DECIMAL(5,4) DEFAULT 0.0000, -- Leads per content piece\n    expert_recognition_impact DECIMAL(3,2) DEFAULT 0.00, -- Impact on expert recognition\n    \n    -- Template Evolution\n    optimization_version INTEGER DEFAULT 1, -- Template version for A/B testing\n    performance_data JSONB DEFAULT '{}', -- Performance metrics and insights\n    improvement_suggestions JSONB DEFAULT '[]', -- Suggested optimizations\n    \n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW(),\n    last_optimization_date TIMESTAMP DEFAULT NOW()\n);\n\n-- Authority content template indexes\nCREATE INDEX idx_authority_templates_type ON authority_content_templates(content_type);\nCREATE INDEX idx_authority_templates_platform ON authority_content_templates(platform_optimization);\nCREATE INDEX idx_authority_templates_geo_score ON authority_content_templates(geo_optimization_score);\nCREATE INDEX idx_authority_templates_authority_level ON authority_content_templates(authority_level);\n```\n\n### Authority Content Publications (Expert Content Tracking)\n\n```sql\nCREATE TABLE authority_content_publications (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    persona_id UUID REFERENCES expert_personas(id) ON DELETE CASCADE,\n    platform_account_id UUID REFERENCES geo_platform_accounts(id) ON DELETE CASCADE,\n    content_template_id UUID REFERENCES authority_content_templates(id),\n    \n    -- Content Classification\n    content_type VARCHAR(50) NOT NULL, -- comprehensive_article, expert_analysis, market_report, expert_answer\n    platform_type VARCHAR(50) NOT NULL, -- medium, reddit, quora, facebook, linkedin\n    authority_level VARCHAR(20) NOT NULL, -- expert, thought_leader, industry_authority\n    \n    -- Content Details\n    headline VARCHAR(500) NOT NULL,\n    content_summary TEXT NOT NULL,\n    full_content_encrypted TEXT NOT NULL, -- AES-256-GCM encrypted full content\n    word_count INTEGER NOT NULL,\n    expert_byline TEXT, -- Author bio and credentials\n    \n    -- GEO Optimization Implementation\n    geo_optimization_applied JSONB NOT NULL, -- GEO optimizations implemented\n    target_ai_queries JSONB DEFAULT '[]', -- AI queries this content targets\n    authority_signals_used JSONB DEFAULT '[]', -- Expert credibility signals included\n    citation_optimization_elements JSONB DEFAULT '[]', -- Elements optimized for AI citation\n    structured_data_included BOOLEAN DEFAULT false, -- Schema markup for AI consumption\n    \n    -- Expert Positioning Elements\n    expertise_demonstration JSONB DEFAULT '[]', -- How expertise was demonstrated\n    credibility_establishment TEXT, -- How expert credibility was established\n    market_insights_included JSONB DEFAULT '[]', -- Philippines market insights shared\n    data_sources_cited JSONB DEFAULT '[]', -- Authoritative sources referenced\n    \n    -- Publication Details\n    published_at TIMESTAMP NOT NULL,\n    platform_url TEXT, -- Direct URL to published content\n    publication_method VARCHAR(20) DEFAULT 'manual', -- manual, scheduled, optimized_timing\n    content_distribution_strategy JSONB DEFAULT '{}', -- How content was distributed\n    \n    -- Authority Building Performance\n    expert_engagement_metrics JSONB DEFAULT '{}', -- Quality engagement (not just quantity)\n    authority_recognition_signals INTEGER DEFAULT 0, -- Expert recognition indicators\n    thought_leadership_indicators INTEGER DEFAULT 0, -- Thought leadership signals\n    professional_shares INTEGER DEFAULT 0, -- Shares by industry professionals\n    expert_mentions INTEGER DEFAULT 0, -- Mentions by other experts\n    \n    -- AI Citation Tracking\n    estimated_ai_citations INTEGER DEFAULT 0, -- Estimated times cited by AI\n    ai_citation_tracking_data JSONB DEFAULT '{}', -- AI citation monitoring results\n    search_visibility_impact DECIMAL(5,2) DEFAULT 0.00, -- Impact on search visibility\n    authority_score_contribution DECIMAL(3,2) DEFAULT 0.00, -- Contribution to overall authority\n    \n    -- Lead Generation from Authority\n    authority_driven_inquiries INTEGER DEFAULT 0, -- Inquiries from expert positioning\n    consultation_requests INTEGER DEFAULT 0, -- Direct consultation requests\n    expert_contact_attempts INTEGER DEFAULT 0, -- Attempts to contact as expert\n    lead_quality_score DECIMAL(3,2) DEFAULT 0.00, -- Quality of generated leads\n    \n    -- Content Lifecycle Management\n    content_freshness_score DECIMAL(3,2) DEFAULT 1.00, -- How current/relevant content remains\n    update_requirements JSONB DEFAULT '[]', -- What updates might be needed\n    evergreen_potential DECIMAL(3,2) DEFAULT 0.00, -- Long-term value potential\n    competitive_positioning TEXT, -- How content positions against competitors\n    \n    -- Performance Analytics\n    roi_attribution DECIMAL(10,2) DEFAULT 0.00, -- Revenue attributed to this content\n    cost_per_lead_from_content DECIMAL(8,2) DEFAULT 0.00, -- Cost efficiency metric\n    authority_building_impact DECIMAL(3,2) DEFAULT 0.00, -- Impact on overall expert status\n    \n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW(),\n    last_performance_review TIMESTAMP DEFAULT NOW()\n);\n\n-- Authority content performance indexes\nCREATE INDEX idx_authority_content_platform ON authority_content_publications(platform_type);\nCREATE INDEX idx_authority_content_authority_level ON authority_content_publications(authority_level);\nCREATE INDEX idx_authority_content_published ON authority_content_publications(published_at);\nCREATE INDEX idx_authority_content_citations ON authority_content_publications(estimated_ai_citations);\nCREATE INDEX idx_authority_content_roi ON authority_content_publications(roi_attribution);\n```\n\n### AI Citation Tracking System\n\n```sql\nCREATE TABLE ai_citation_tracking (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    \n    -- Content Being Tracked\n    content_publication_id UUID REFERENCES authority_content_publications(id) ON DELETE CASCADE,\n    persona_id UUID REFERENCES expert_personas(id) ON DELETE CASCADE,\n    platform_type VARCHAR(50) NOT NULL,\n    \n    -- AI Engine Citation Data\n    ai_engine VARCHAR(50) NOT NULL, -- chatgpt, claude, bard, perplexity, bing_copilot\n    citation_type VARCHAR(30) NOT NULL, -- direct_quote, paraphrase, reference, authority_mention\n    citation_context TEXT, -- Context in which content was cited\n    user_query_category VARCHAR(100), -- Type of query that triggered citation\n    \n    -- Citation Tracking Details\n    estimated_citation_date DATE NOT NULL,\n    citation_confidence_score DECIMAL(3,2) DEFAULT 0.50, -- Confidence in citation estimate\n    citation_evidence JSONB DEFAULT '{}', -- Evidence/indicators of citation\n    monitoring_method VARCHAR(50) NOT NULL, -- how_citation_was_detected\n    \n    -- Citation Impact Assessment\n    citation_reach_estimate INTEGER DEFAULT 0, -- Estimated users who saw citation\n    authority_impact_score DECIMAL(3,2) DEFAULT 0.00, -- Impact on expert authority\n    brand_exposure_value DECIMAL(8,2) DEFAULT 0.00, -- Estimated brand exposure value\n    lead_generation_attribution INTEGER DEFAULT 0, -- Leads attributed to this citation\n    \n    -- Citation Context Analysis\n    user_intent_category VARCHAR(50), -- investment_advice, market_research, buying_guidance\n    geographic_relevance VARCHAR(50), -- philippines_specific, southeast_asia, international\n    buyer_persona_match VARCHAR(50), -- Which buyer persona the query likely represents\n    competition_analysis JSONB DEFAULT '{}', -- How citation compared to competitors\n    \n    -- Business Impact Tracking\n    estimated_inquiry_influence INTEGER DEFAULT 0, -- Inquiries influenced by citation\n    consultation_requests_attributed INTEGER DEFAULT 0, -- Consultations from citation\n    revenue_impact_estimate DECIMAL(10,2) DEFAULT 0.00, -- Estimated revenue impact\n    cost_per_citation DECIMAL(8,2) DEFAULT 0.00, -- Cost to generate this citation\n    \n    -- Citation Quality Assessment\n    citation_quality_score DECIMAL(3,2) DEFAULT 0.00, -- Quality of the citation\n    user_satisfaction_indicators JSONB DEFAULT '{}', -- Signs of user satisfaction\n    follow_up_engagement_evidence JSONB DEFAULT '{}', -- Evidence of follow-up interest\n    expert_recognition_signals JSONB DEFAULT '{}', -- Expert recognition from citation\n    \n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- AI citation tracking indexes\nCREATE INDEX idx_ai_citation_engine ON ai_citation_tracking(ai_engine);\nCREATE INDEX idx_ai_citation_date ON ai_citation_tracking(estimated_citation_date);\nCREATE INDEX idx_ai_citation_persona ON ai_citation_tracking(persona_id);\nCREATE INDEX idx_ai_citation_impact ON ai_citation_tracking(authority_impact_score);\n```\n\n### Authority-Based Lead Generation Tracking\n\n```sql\nCREATE TABLE authority_lead_generation (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    \n    -- Expert Authority Attribution\n    persona_id UUID REFERENCES expert_personas(id) ON DELETE CASCADE,\n    platform_account_id UUID REFERENCES geo_platform_accounts(id) ON DELETE CASCADE,\n    content_publication_id UUID REFERENCES authority_content_publications(id),\n    ai_citation_id UUID REFERENCES ai_citation_tracking(id), -- If lead came via AI citation\n    \n    -- Lead Source Classification\n    lead_source_type VARCHAR(50) NOT NULL, -- direct_article_read, ai_citation_discovery, expert_recommendation\n    discovery_method VARCHAR(50) NOT NULL, -- organic_search, ai_engine_response, social_share, expert_referral\n    initial_touchpoint VARCHAR(100) NOT NULL, -- What first brought them to the expert content\n    \n    -- Lead Details\n    lead_identifier VARCHAR(255), -- Anonymized lead tracking identifier\n    lead_quality_score DECIMAL(3,2) DEFAULT 0.00, -- 0-1 lead quality assessment\n    buyer_persona_match VARCHAR(50), -- Which target buyer persona they match\n    geographic_location VARCHAR(100), -- Lead's geographic location\n    \n    -- Expert Authority Influence\n    authority_influence_score DECIMAL(3,2) DEFAULT 0.00, -- How much expert status influenced lead\n    content_consumption_pattern JSONB DEFAULT '{}', -- What expert content they consumed\n    expertise_validation_signals JSONB DEFAULT '[]', -- How they validated expertise\n    trust_building_progression JSONB DEFAULT '[]', -- Trust building journey\n    \n    -- Inquiry and Engagement Details\n    initial_inquiry_type VARCHAR(50) NOT NULL, -- general_question, specific_guidance, consultation_request\n    inquiry_content_encrypted TEXT, -- AES-256-GCM encrypted inquiry details\n    expertise_areas_of_interest JSONB DEFAULT '[]', -- Philippines real estate areas of interest\n    investment_timeline VARCHAR(50), -- immediate, 6_months, 1_year, 2_plus_years\n    budget_indication VARCHAR(50), -- Budget range if indicated\n    \n    -- Expert Engagement Process\n    expert_response_method VARCHAR(50), -- direct_message, email, consultation_booking, content_recommendation\n    consultation_requested BOOLEAN DEFAULT false, -- Whether they requested expert consultation\n    island_properties_referral_made BOOLEAN DEFAULT false, -- Whether referred to Island Properties\n    follow_up_engagement_level VARCHAR(30) DEFAULT 'initial', -- initial, engaged, qualified, converted\n    \n    -- Conversion Tracking\n    qualified_lead_status BOOLEAN DEFAULT false, -- Whether lead qualified for Island Properties\n    consultation_completed BOOLEAN DEFAULT false, -- Whether expert consultation completed\n    island_properties_contact_made BOOLEAN DEFAULT false, -- Whether contact made with business\n    conversion_outcome VARCHAR(50) DEFAULT 'pending', -- pending, qualified, unqualified, converted\n    \n    -- Authority-Specific Metrics\n    expert_credibility_validation JSONB DEFAULT '{}', -- How they validated expert credibility\n    competitive_expert_comparison JSONB DEFAULT '{}', -- Whether they compared to other experts\n    authority_based_trust_score DECIMAL(3,2) DEFAULT 0.00, -- Trust level based on authority\n    expertise_influence_on_decision DECIMAL(3,2) DEFAULT 0.00, -- How expertise influenced decision\n    \n    -- Lead Nurturing Through Expertise\n    expert_content_recommendations JSONB DEFAULT '[]', -- Content recommended to lead\n    additional_expertise_shared JSONB DEFAULT '[]', -- Additional expert insights provided\n    relationship_building_activities JSONB DEFAULT '[]', -- Trust and relationship building actions\n    expert_positioning_reinforcement JSONB DEFAULT '[]', -- How expertise was reinforced\n    \n    -- Business Impact\n    estimated_lead_value DECIMAL(10,2) DEFAULT 0.00, -- Estimated value of this lead\n    conversion_probability DECIMAL(3,2) DEFAULT 0.00, -- Probability of conversion\n    revenue_attribution DECIMAL(12,2) DEFAULT 0.00, -- Revenue attributed to this lead\n    roi_contribution DECIMAL(10,2) DEFAULT 0.00, -- ROI contribution from this lead\n    \n    -- Lead Journey Analytics\n    total_touchpoints INTEGER DEFAULT 1, -- Total interactions before inquiry\n    content_consumption_duration INTEGER, -- Time spent consuming expert content\n    decision_influence_factors JSONB DEFAULT '[]', -- Factors that influenced their interest\n    competitive_consideration_set JSONB DEFAULT '[]', -- Other experts/services considered\n    \n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW(),\n    last_engagement TIMESTAMP DEFAULT NOW(),\n    conversion_date TIMESTAMP\n);\n\n-- Authority-based lead generation indexes\nCREATE INDEX idx_authority_leads_persona ON authority_lead_generation(persona_id);\nCREATE INDEX idx_authority_leads_source ON authority_lead_generation(lead_source_type);\nCREATE INDEX idx_authority_leads_quality ON authority_lead_generation(lead_quality_score);\nCREATE INDEX idx_authority_leads_qualified ON authority_lead_generation(qualified_lead_status);\nCREATE INDEX idx_authority_leads_converted ON authority_lead_generation(conversion_outcome);\n```\n\n### GEO Performance Analytics\n\n```sql\nCREATE TABLE geo_performance_analytics (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    \n    -- Analysis Period and Scope\n    analysis_period VARCHAR(20) NOT NULL, -- daily, weekly, monthly, quarterly\n    period_start_date DATE NOT NULL,\n    period_end_date DATE NOT NULL,\n    persona_id UUID REFERENCES expert_personas(id) ON DELETE CASCADE,\n    platform_type VARCHAR(50), -- NULL for cross-platform analysis\n    \n    -- Authority Building Performance\n    authority_metrics JSONB NOT NULL DEFAULT '{}', -- Authority building progress\n    expert_recognition_growth DECIMAL(5,2) DEFAULT 0.00, -- Growth in expert recognition\n    thought_leadership_indicators INTEGER DEFAULT 0, -- Thought leadership signals\n    competitive_positioning_score DECIMAL(3,2) DEFAULT 0.00, -- Position vs other experts\n    \n    -- AI Citation Performance\n    ai_citation_metrics JSONB NOT NULL DEFAULT '{}', -- AI citation tracking results\n    estimated_monthly_citations INTEGER DEFAULT 0, -- Estimated AI citations\n    citation_quality_score DECIMAL(3,2) DEFAULT 0.00, -- Quality of citations received\n    ai_authority_score DECIMAL(5,2) DEFAULT 0.00, -- Authority score with AI engines\n    search_visibility_improvement DECIMAL(5,2) DEFAULT 0.00, -- Search visibility gains\n    \n    -- Content Authority Performance\n    content_authority_metrics JSONB NOT NULL DEFAULT '{}', -- Content performance\n    average_content_depth_score DECIMAL(3,2) DEFAULT 0.00, -- Content comprehensiveness\n    expert_engagement_quality DECIMAL(3,2) DEFAULT 0.00, -- Quality of engagement received\n    authority_content_reach INTEGER DEFAULT 0, -- Reach of authority content\n    expertise_validation_rate DECIMAL(5,4) DEFAULT 0.0000, -- Rate of expertise validation\n    \n    -- Lead Generation from Authority\n    authority_lead_metrics JSONB NOT NULL DEFAULT '{}', -- Authority-based lead generation\n    expert_inquiries_generated INTEGER DEFAULT 0, -- Inquiries from expert positioning\n    consultation_requests INTEGER DEFAULT 0, -- Direct consultation requests\n    authority_to_lead_conversion DECIMAL(5,4) DEFAULT 0.0000, -- Authority → lead rate\n    lead_quality_from_authority DECIMAL(3,2) DEFAULT 0.00, -- Quality of authority leads\n    \n    -- Business Impact Analysis\n    revenue_attribution DECIMAL(12,2) DEFAULT 0.00, -- Revenue attributed to authority\n    cost_per_authority_lead DECIMAL(8,2) DEFAULT 0.00, -- Cost per authority-generated lead\n    roi_from_authority_building DECIMAL(8,4) DEFAULT 0.0000, -- ROI from expert positioning\n    brand_authority_value DECIMAL(10,2) DEFAULT 0.00, -- Estimated brand authority value\n    \n    -- Competitive Analysis\n    competitive_metrics JSONB DEFAULT '{}', -- Performance vs competitors\n    market_share_of_voice DECIMAL(5,2) DEFAULT 0.00, -- Share of expert voice in market\n    authority_differentiation_score DECIMAL(3,2) DEFAULT 0.00, -- Uniqueness of authority\n    expert_ranking_position INTEGER, -- Ranking among Philippines real estate experts\n    \n    -- Platform-Specific Performance\n    platform_authority_metrics JSONB DEFAULT '{}', -- Authority performance by platform\n    platform_lead_generation JSONB DEFAULT '{}', -- Lead generation by platform\n    platform_roi_breakdown JSONB DEFAULT '{}', -- ROI breakdown by platform\n    cross_platform_synergy_score DECIMAL(3,2) DEFAULT 0.00, -- Cross-platform authority boost\n    \n    -- Future Optimization Insights\n    optimization_opportunities JSONB DEFAULT '[]', -- Identified optimization opportunities\n    authority_building_recommendations JSONB DEFAULT '[]', -- Recommendations for authority growth\n    content_strategy_insights JSONB DEFAULT '[]', -- Content strategy optimization insights\n    lead_generation_optimization JSONB DEFAULT '[]', -- Lead generation improvement suggestions\n    \n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- GEO performance analytics indexes\nCREATE INDEX idx_geo_analytics_period ON geo_performance_analytics(analysis_period, period_start_date);\nCREATE INDEX idx_geo_analytics_persona ON geo_performance_analytics(persona_id);\nCREATE INDEX idx_geo_analytics_platform ON geo_performance_analytics(platform_type);\nCREATE INDEX idx_geo_analytics_roi ON geo_performance_analytics(roi_from_authority_building);\n```\n\n### Cost Management (GEO-Optimized)\n\n```sql\nCREATE TABLE geo_cost_management (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    month_year VARCHAR(7) NOT NULL, -- 'YYYY-MM' format\n    \n    -- Budget Allocation for GEO Strategy\n    total_monthly_budget DECIMAL(8,2) DEFAULT 6.35, -- $6.35/month proxy constraint\n    proxy_infrastructure_budget DECIMAL(8,2) DEFAULT 6.35, -- Dedicated IPs for authority\n    content_creation_time_budget DECIMAL(6,2) DEFAULT 0.00, -- Time investment tracking\n    \n    -- GEO Platform Cost Allocation\n    medium_content_creation_cost DECIMAL(6,2) DEFAULT 0.00, -- Time cost for comprehensive articles\n    reddit_engagement_cost DECIMAL(6,2) DEFAULT 0.00, -- Time cost for community engagement\n    quora_answer_creation_cost DECIMAL(6,2) DEFAULT 0.00, -- Time cost for expert answers\n    cross_platform_optimization_cost DECIMAL(6,2) DEFAULT 0.00, -- Time cost for content adaptation\n    \n    -- Actual Spending Tracking\n    proxy_costs_actual DECIMAL(8,2) DEFAULT 0.00,\n    content_creation_time_actual DECIMAL(6,2) DEFAULT 0.00, -- Hours spent on authority content\n    total_geo_investment DECIMAL(8,2) DEFAULT 0.00,\n    \n    -- GEO Performance ROI\n    authority_building_roi DECIMAL(8,4) DEFAULT 0.0000, -- ROI from authority building\n    ai_citation_value_generated DECIMAL(10,2) DEFAULT 0.00, -- Value from AI citations\n    expert_inquiry_revenue DECIMAL(12,2) DEFAULT 0.00, -- Revenue from expert positioning\n    cost_per_authority_lead DECIMAL(8,2) DEFAULT 0.00, -- Cost efficiency metric\n    \n    -- Budget Efficiency Analysis\n    cost_per_ai_citation DECIMAL(6,2) DEFAULT 0.00, -- Cost per estimated AI citation\n    content_creation_efficiency DECIMAL(8,4) DEFAULT 0.0000, -- Leads per hour of content creation\n    platform_cost_effectiveness JSONB DEFAULT '{}', -- ROI by platform\n    authority_building_efficiency DECIMAL(6,4) DEFAULT 0.0000, -- Authority score per dollar spent\n    \n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE INDEX idx_geo_cost_month ON geo_cost_management(month_year);\nCREATE INDEX idx_geo_cost_roi ON geo_cost_management(authority_building_roi);\n```\n\n## Data Encryption Strategy (GEO-Focused)\n\n### Expert Content Protection\n\n```typescript\ninterface GEOEncryptionArchitecture {\n  // Expert Content Security\n  expertContentProtection: {\n    comprehensiveArticles: 'AES-256-GCM'; // Protect valuable long-form content\n    marketAnalysisData: 'AES-256-GCM'; // Protect proprietary market insights\n    expertiseCredentials: 'AES-256-GCM'; // Protect professional qualifications\n    clientConsultationNotes: 'AES-256-GCM'; // Protect consultation details\n  };\n  \n  // AI Citation Tracking Security\n  citationTrackingProtection: {\n    aiEngineResponseData: 'AES-256-GCM'; // Protect AI interaction data\n    competitiveIntelligence: 'AES-256-GCM'; // Protect competitor analysis\n    leadAttributionData: 'AES-256-GCM'; // Protect lead source attribution\n    performanceMetrics: 'AES-256-GCM'; // Protect business performance data\n  };\n  \n  // Authority Building Protection\n  authorityAssetSecurity: {\n    expertPersonaDevelopment: 'AES-256-GCM'; // Protect persona development\n    thoughtLeadershipStrategy: 'AES-256-GCM'; // Protect strategy documents\n    contentCalendarPlanning: 'AES-256-GCM'; // Protect content planning\n    expertNetworkingData: 'AES-256-GCM'; // Protect professional relationships\n  };\n}\n```\n\n## Performance Optimization (Authority-Focused)\n\n### Authority Building Analytics Views\n\n```sql\n-- Materialized view for expert authority dashboard\nCREATE MATERIALIZED VIEW expert_authority_dashboard AS\nSELECT \n    ep.id as persona_id,\n    ep.expert_name,\n    ep.expertise_focus,\n    ep.primary_market_location,\n    ep.current_authority_score,\n    \n    -- Authority Content Performance\n    COUNT(acp.id) as total_authority_content,\n    AVG(acp.word_count) as average_content_depth,\n    SUM(acp.estimated_ai_citations) as total_estimated_citations,\n    AVG(acp.authority_score_contribution) as avg_authority_contribution,\n    \n    -- Lead Generation from Authority\n    COUNT(alg.id) as total_authority_leads,\n    COUNT(alg.id) FILTER (WHERE alg.qualified_lead_status = true) as qualified_authority_leads,\n    AVG(alg.lead_quality_score) as avg_lead_quality,\n    \n    -- Platform Authority Distribution\n    COUNT(gpa.id) as active_platforms,\n    AVG(gpa.platform_authority_level::text::int) as avg_platform_authority,\n    \n    -- ROI Metrics\n    COALESCE(AVG(gpa.monthly_roi), 0) as avg_monthly_roi,\n    COALESCE(SUM(alg.estimated_lead_value), 0) as total_estimated_lead_value,\n    \n    -- Recent Activity\n    ep.last_content_creation,\n    MAX(acp.published_at) as last_authority_content_published\n    \nFROM expert_personas ep\nLEFT JOIN authority_content_publications acp ON ep.id = acp.persona_id\nLEFT JOIN authority_lead_generation alg ON ep.id = alg.persona_id\nLEFT JOIN geo_platform_accounts gpa ON ep.id = gpa.persona_id\nWHERE ep.expert_status IN ('active', 'established', 'authority')\nGROUP BY ep.id, ep.expert_name, ep.expertise_focus, ep.primary_market_location, \n         ep.current_authority_score, ep.last_content_creation;\n\n-- Refresh schedule for authority dashboard\nCREATE OR REPLACE FUNCTION refresh_expert_authority_dashboard() RETURNS void AS $\nBEGIN\n    REFRESH MATERIALIZED VIEW expert_authority_dashboard;\nEND;\n$ LANGUAGE plpgsql;\n\n-- Schedule refresh every 2 hours for real-time authority tracking\nSELECT cron.schedule('refresh-authority-dashboard', '0 */2 * * *', 'SELECT refresh_expert_authority_dashboard();');\n```\n\n### GEO Performance Optimization Queries\n\n```sql\n-- Optimized query for authority content performance analysis\nCREATE OR REPLACE FUNCTION get_authority_content_performance(persona_uuid UUID, days_back INTEGER DEFAULT 30)\nRETURNS TABLE (\n    content_performance JSONB,\n    ai_citation_trends JSONB,\n    authority_building_progress JSONB,\n    lead_generation_attribution JSONB,\n    optimization_recommendations JSONB\n) AS $\nBEGIN\n    RETURN QUERY\n    SELECT \n        -- Content Performance Analysis\n        jsonb_build_object(\n            'total_content_pieces', COUNT(acp.id),\n            'average_word_count', AVG(acp.word_count),\n            'content_depth_score', AVG(acp.word_count::float / 2000), -- Normalize to 2000 words\n            'geo_optimization_score', AVG((acp.geo_optimization_applied->'score')::text::float),\n            'authority_signals_avg', AVG(jsonb_array_length(acp.authority_signals_used))\n        ) as content_performance,\n        \n        -- AI Citation Trends\n        jsonb_build_object(\n            'estimated_citations_total', SUM(acp.estimated_ai_citations),\n            'citation_growth_rate', COALESCE(\n                (SUM(acp.estimated_ai_citations) FILTER (WHERE acp.published_at > NOW() - INTERVAL '15 days') * 2.0) /\n                NULLIF(SUM(acp.estimated_ai_citations) FILTER (WHERE acp.published_at <= NOW() - INTERVAL '15 days'), 0) - 1, 0\n            ),\n            'citation_quality_score', AVG(\n                CASE \n                    WHEN (acp.ai_citation_tracking_data->>'citation_confidence_score')::float > 0 \n                    THEN (acp.ai_citation_tracking_data->>'citation_confidence_score')::float \n                    ELSE 0.5 \n                END\n            ),\n            'top_citing_platforms', (\n                SELECT jsonb_agg(DISTINCT platform_type ORDER BY platform_type)\n                FROM authority_content_publications acp2\n                WHERE acp2.persona_id = persona_uuid\n                AND acp2.published_at > NOW() - INTERVAL '%s days'::text, days_back\n                AND acp2.estimated_ai_citations > 0\n            )\n        ) as ai_citation_trends,\n        \n        -- Authority Building Progress\n        jsonb_build_object(\n            'authority_score_growth', (\n                SELECT ep.current_authority_score \n                FROM expert_personas ep \n                WHERE ep.id = persona_uuid\n            ),\n            'expert_recognition_signals', SUM(acp.authority_recognition_signals),\n            'thought_leadership_indicators', SUM(acp.thought_leadership_indicators),\n            'platform_authority_distribution', (\n                SELECT jsonb_object_agg(\n                    gpa.platform_type, \n                    jsonb_build_object(\n                        'authority_level', gpa.platform_authority_level,\n                        'reputation_score', gpa.account_reputation_score,\n                        'expert_recognition', gpa.expert_recognition_signals\n                    )\n                )\n                FROM geo_platform_accounts gpa\n                WHERE gpa.persona_id = persona_uuid\n                AND gpa.account_status IN ('active', 'established', 'expert_recognized')\n            )\n        ) as authority_building_progress,\n        \n        -- Lead Generation Attribution\n        jsonb_build_object(\n            'authority_leads_generated', (\n                SELECT COUNT(*) \n                FROM authority_lead_generation alg \n                WHERE alg.persona_id = persona_uuid \n                AND alg.created_at > NOW() - INTERVAL '%s days'::text, days_back\n            ),\n            'qualified_leads_percentage', (\n                SELECT \n                    CASE \n                        WHEN COUNT(*) > 0 \n                        THEN (COUNT(*) FILTER (WHERE qualified_lead_status = true) * 100.0 / COUNT(*))\n                        ELSE 0 \n                    END\n                FROM authority_lead_generation alg\n                WHERE alg.persona_id = persona_uuid\n                AND alg.created_at > NOW() - INTERVAL '%s days'::text, days_back\n            ),\n            'average_lead_quality', (\n                SELECT COALESCE(AVG(lead_quality_score), 0)\n                FROM authority_lead_generation alg\n                WHERE alg.persona_id = persona_uuid\n                AND alg.created_at > NOW() - INTERVAL '%s days'::text, days_back\n            ),\n            'consultation_conversion_rate', (\n                SELECT \n                    CASE \n                        WHEN COUNT(*) > 0 \n                        THEN (COUNT(*) FILTER (WHERE consultation_requested = true) * 100.0 / COUNT(*))\n                        ELSE 0 \n                    END\n                FROM authority_lead_generation alg\n                WHERE alg.persona_id = persona_uuid\n                AND alg.created_at > NOW() - INTERVAL '%s days'::text, days_back\n            )\n        ) as lead_generation_attribution,\n        \n        -- Optimization Recommendations\n        jsonb_build_object(\n            'content_optimization', CASE\n                WHEN AVG(acp.word_count) < 2000 THEN jsonb_build_array('Increase content depth for better AI citation potential')\n                WHEN AVG((acp.geo_optimization_applied->'score')::text::float) < 0.7 THEN jsonb_build_array('Improve GEO optimization implementation')\n                ELSE jsonb_build_array('Content depth and optimization are performing well')\n            END,\n            'authority_building', CASE\n                WHEN AVG(acp.authority_recognition_signals) < 5 THEN jsonb_build_array('Focus on building more authority signals in content')\n                WHEN SUM(acp.estimated_ai_citations) < 10 THEN jsonb_build_array('Optimize content for higher AI citation potential')\n                ELSE jsonb_build_array('Authority building is progressing well')\n            END,\n            'lead_generation', CASE\n                WHEN (SELECT COUNT(*) FROM authority_lead_generation alg WHERE alg.persona_id = persona_uuid AND alg.created_at > NOW() - INTERVAL '%s days'::text, days_back) < 5 \n                THEN jsonb_build_array('Increase lead generation focus in authority content')\n                ELSE jsonb_build_array('Lead generation from authority is performing adequately')\n            END\n        ) as optimization_recommendations\n        \n    FROM authority_content_publications acp\n    WHERE acp.persona_id = persona_uuid\n    AND acp.published_at > NOW() - INTERVAL '%s days'::text, days_back;\nEND;\n$ LANGUAGE plpgsql;\n```\n\n## Database Migration Strategy (GEO-Focused)\n\n### GEO Schema Evolution Tracking\n\n```sql\n-- GEO-specific schema version tracking\nCREATE TABLE geo_schema_migrations (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    version VARCHAR(50) NOT NULL UNIQUE,\n    migration_type VARCHAR(30) NOT NULL, -- authority_building, ai_citation, content_optimization\n    description TEXT NOT NULL,\n    migration_sql TEXT NOT NULL,\n    rollback_sql TEXT,\n    business_impact TEXT, -- How this affects lead generation\n    applied_at TIMESTAMP DEFAULT NOW(),\n    applied_by VARCHAR(100) DEFAULT 'system'\n);\n\n-- Initial GEO schema versions\nINSERT INTO geo_schema_migrations (version, migration_type, description, migration_sql, business_impact) VALUES\n('1.0.0-geo', 'authority_building', 'Initial GEO-optimized schema for authority-based lead generation', 'Initial schema creation', 'Establishes foundation for authority-based lead generation system'),\n('1.1.0-geo', 'ai_citation', 'AI citation tracking and optimization system', 'AI citation tables and tracking', 'Enables measurement of AI engine citation impact on lead generation'),\n('1.2.0-geo', 'content_optimization', 'Advanced content optimization for authority building', 'Content optimization tables', 'Improves content creation efficiency and authority building effectiveness');\n```\n\n### Backup Strategy (Authority Content Protection)\n\n```sql\n-- Authority content backup configuration\nCREATE TABLE geo_backup_configurations (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    backup_type VARCHAR(30) NOT NULL, -- authority_content, ai_citation_data, lead_attribution\n    backup_priority VARCHAR(20) NOT NULL, -- critical, high, medium, low\n    schedule_cron VARCHAR(50) NOT NULL,\n    retention_days INTEGER NOT NULL,\n    encryption_level VARCHAR(20) DEFAULT 'high', -- Authority content needs strong protection\n    backup_location VARCHAR(255) NOT NULL,\n    \n    created_at TIMESTAMP DEFAULT NOW(),\n    is_active BOOLEAN DEFAULT true\n);\n\n-- GEO-specific backup configurations\nINSERT INTO geo_backup_configurations (backup_type, backup_priority, schedule_cron, retention_days, backup_location) VALUES\n('authority_content', 'critical', '0 */6 * * *', 180, 'encrypted_local_authority_content'), -- Every 6 hours, 180-day retention\n('ai_citation_data', 'high', '0 2 * * *', 90, 'encrypted_local_citation_data'), -- Daily at 2 AM, 90-day retention\n('lead_attribution', 'critical', '0 1 * * *', 365, 'encrypted_local_lead_data'), -- Daily at 1 AM, 1-year retention\n('expert_performance', 'medium', '0 3 * * 0', 30, 'encrypted_local_performance'); -- Weekly, 30-day retention\n```\n\n## Development Environment Configuration (GEO-Optimized)\n\n### GEO Development Settings\n\n```sql\nCREATE TABLE geo_development_configurations (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    config_key VARCHAR(100) NOT NULL UNIQUE,\n    config_value TEXT NOT NULL,\n    config_category VARCHAR(30) NOT NULL, -- authority_building, content_creation, ai_optimization, lead_tracking\n    environment VARCHAR(20) NOT NULL, -- development, staging, production\n    business_impact TEXT, -- How this setting affects lead generation\n    \n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- GEO development environment settings\nINSERT INTO geo_development_configurations (config_key, config_value, config_category, environment, business_impact) VALUES\n('max_expert_personas_dev', '2', 'authority_building', 'development', 'Limited personas for development testing'),\n('ai_citation_simulation_mode', 'true', 'ai_optimization', 'development', 'Simulate AI citations for testing optimization algorithms'),\n('content_depth_minimum_dev', '500', 'content_creation', 'development', 'Reduced content requirements for development efficiency'),\n('lead_generation_simulation', 'true', 'lead_tracking', 'development', 'Simulate lead generation for testing attribution systems'),\n('authority_score_acceleration', '10x', 'authority_building', 'development', 'Accelerated authority building for faster development testing'),\n('geo_optimization_testing', 'enabled', 'ai_optimization', 'development', 'Enable advanced GEO testing features'),\n('medium_publication_simulation', 'true', 'content_creation', 'development', 'Simulate Medium publication process for development'),\n('reddit_engagement_simulation', 'true', 'content_creation', 'development', 'Simulate Reddit engagement for development testing');\n```\n\n## System Health Monitoring (GEO-Specific)\n\n### Authority Building Performance Monitoring\n\n```sql\n-- GEO-specific system health metrics\nCREATE TABLE geo_system_health_metrics (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    metric_timestamp TIMESTAMP DEFAULT NOW(),\n    \n    -- Authority Building Performance\n    total_expert_personas INTEGER DEFAULT 0,\n    active_authority_building_personas INTEGER DEFAULT 0,\n    average_authority_score DECIMAL(5,2) DEFAULT 0.00,\n    authority_content_created_last_24h INTEGER DEFAULT 0,\n    \n    -- AI Citation Performance\n    estimated_daily_ai_citations INTEGER DEFAULT 0,\n    citation_quality_score_avg DECIMAL(3,2) DEFAULT 0.00,\n    ai_optimization_success_rate DECIMAL(5,2) DEFAULT 0.00,\n    \n    -- Content Authority Metrics\n    comprehensive_articles_published_24h INTEGER DEFAULT 0,\n    expert_answers_created_24h INTEGER DEFAULT 0,\n    average_content_depth_score DECIMAL(3,2) DEFAULT 0.00,\n    geo_optimization_implementation_rate DECIMAL(5,2) DEFAULT 0.00,\n    \n    -- Lead Generation from Authority\n    authority_leads_generated_24h INTEGER DEFAULT 0,\n    consultation_requests_24h INTEGER DEFAULT 0,\n    expert_inquiries_24h INTEGER DEFAULT 0,\n    authority_conversion_rate_24h DECIMAL(5,4) DEFAULT 0.0000,\n    \n    -- Platform Authority Distribution\n    medium_authority_score DECIMAL(5,2) DEFAULT 0.00,\n    reddit_reputation_score DECIMAL(5,2) DEFAULT 0.00,\n    quora_expert_status_score DECIMAL(5,2) DEFAULT 0.00,\n    cross_platform_authority_synergy DECIMAL(3,2) DEFAULT 0.00,\n    \n    -- Business Impact Metrics\n    daily_roi_from_authority DECIMAL(10,4) DEFAULT 0.0000,\n    cost_per_authority_lead DECIMAL(8,2) DEFAULT 0.00,\n    authority_brand_value_growth DECIMAL(8,2) DEFAULT 0.00,\n    competitive_positioning_score DECIMAL(3,2) DEFAULT 0.00,\n    \n    -- Technical Performance\n    content_creation_system_response_time INTEGER DEFAULT 0,\n    geo_optimization_processing_time INTEGER DEFAULT 0,\n    authority_analytics_query_performance INTEGER DEFAULT 0,\n    lead_attribution_tracking_accuracy DECIMAL(5,4) DEFAULT 1.0000,\n    \n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Automated GEO health check function\nCREATE OR REPLACE FUNCTION record_geo_system_health() RETURNS void AS $\nDECLARE\n    health_record geo_system_health_metrics%ROWTYPE;\nBEGIN\n    -- Collect GEO-specific system metrics\n    SELECT \n        -- Authority Building Metrics\n        (SELECT COUNT(*) FROM expert_personas WHERE expert_status IN ('active', 'established', 'authority')),\n        (SELECT COUNT(*) FROM expert_personas WHERE expert_status = 'active' AND last_content_creation > NOW() - INTERVAL '24 hours'),\n        (SELECT COALESCE(AVG(current_authority_score), 0) FROM expert_personas WHERE expert_status IN ('active', 'established', 'authority')),\n        (SELECT COUNT(*) FROM authority_content_publications WHERE published_at > NOW() - INTERVAL '24 hours'),\n        \n        -- AI Citation Metrics\n        (SELECT COALESCE(SUM(estimated_ai_citations), 0) FROM ai_citation_tracking WHERE estimated_citation_date > NOW() - INTERVAL '1 day'),\n        (SELECT COALESCE(AVG(citation_quality_score), 0) FROM ai_citation_tracking WHERE created_at > NOW() - INTERVAL '24 hours'),\n        (SELECT \n            CASE \n                WHEN COUNT(*) > 0 \n                THEN (COUNT(*) FILTER (WHERE citation_confidence_score > 0.7) * 100.0 / COUNT(*))\n                ELSE 0 \n            END\n        FROM ai_citation_tracking WHERE created_at > NOW() - INTERVAL '24 hours'),\n        \n        -- Lead Generation Metrics\n        (SELECT COUNT(*) FROM authority_lead_generation WHERE created_at > NOW() - INTERVAL '24 hours'),\n        (SELECT COUNT(*) FROM authority_lead_generation WHERE consultation_requested = true AND created_at > NOW() - INTERVAL '24 hours'),\n        (SELECT COUNT(*) FROM authority_lead_generation WHERE initial_inquiry_type = 'consultation_request' AND created_at > NOW() - INTERVAL '24 hours'),\n        (SELECT \n            CASE \n                WHEN COUNT(*) > 0 \n                THEN (COUNT(*) FILTER (WHERE qualified_lead_status = true) * 1.0 / COUNT(*))\n                ELSE 0 \n            END\n        FROM authority_lead_generation WHERE created_at > NOW() - INTERVAL '24 hours')\n        \n    INTO health_record.total_expert_personas, health_record.active_authority_building_personas, \n         health_record.average_authority_score, health_record.authority_content_created_last_24h,\n         health_record.estimated_daily_ai_citations, health_record.citation_quality_score_avg,\n         health_record.ai_optimization_success_rate, health_record.authority_leads_generated_24h,\n         health_record.consultation_requests_24h, health_record.expert_inquiries_24h,\n         health_record.authority_conversion_rate_24h;\n    \n    -- Insert GEO health record\n    INSERT INTO geo_system_health_metrics (\n        total_expert_personas, active_authority_building_personas, average_authority_score,\n        authority_content_created_last_24h, estimated_daily_ai_citations, citation_quality_score_avg,\n        ai_optimization_success_rate, authority_leads_generated_24h, consultation_requests_24h,\n        expert_inquiries_24h, authority_conversion_rate_24h\n    ) VALUES (\n        health_record.total_expert_personas, health_record.active_authority_building_personas,\n        health_record.average_authority_score, health_record.authority_content_created_last_24h,\n        health_record.estimated_daily_ai_citations, health_record.citation_quality_score_avg,\n        health_record.ai_optimization_success_rate, health_record.authority_leads_generated_24h,\n        health_record.consultation_requests_24h, health_record.expert_inquiries_24h,\n        health_record.authority_conversion_rate_24h\n    );\nEND;\n$ LANGUAGE plpgsql;\n\n-- Schedule GEO health checks every hour\nSELECT cron.schedule('geo-system-health-check', '0 * * * *', 'SELECT record_geo_system_health();');\n```\n\n**Bottom Line:** This completely rewritten database architecture now properly supports the GEO strategy with:\n\n- **Expert personas** instead of social media personas\n- **Authority content tracking** instead of simple post tracking  \n- **AI citation monitoring** instead of basic engagement metrics\n- **Medium/Reddit/Quora optimization** instead of Facebook priority\n- **Thought leadership ROI tracking** instead of social media vanity metrics\n- **Expert positioning workflows** instead of lifestyle content flows\n\nThe schema now aligns with generating qualified leads through AI-cited expert authority rather than hoping for social media algorithm visibility.","size_bytes":53848},"2Proxy-Cheap-Implementation-Guide.md":{"content":"} catch (error) {\n      return {\n        acceptable: false,\n        metrics: { error: error.message }\n      };\n    }\n  }\n  \n  private async handleUnhealthyExpertProxy(\n    expertProxy: ExpertProxyAssignment, \n    expertHealthResult: PromiseSettledResult<ExpertHealthResult>\n  ): Promise<void> {\n    const error = expertHealthResult.status === 'fulfilled' ? \n      expertHealthResult.value.error : \n      'Expert health check failed';\n    \n    console.warn(`🚨 Unhealthy expert proxy detected: ${expertProxy.proxy_ip} - ${error}`);\n    \n    // 1. Update expert proxy status\n    await this.database.updateExpertProxyStatus(expertProxy.id, 'degraded', {\n      lastError: error,\n      lastHealthCheck: new Date(),\n      consecutiveFailures: (expertProxy.consecutive_failures || 0) + 1\n    });\n    \n    // 2. Notify expert management system\n    await this.notifyExpertManager(expertProxy.assigned_expert_id, {\n      expertProxyId: expertProxy.id,\n      expertProxyIP: expertProxy.proxy_ip,\n      expertIssue: error,\n      expertSeverity: this.calculateExpertSeverity(expertProxy.consecutive_failures || 0)\n    });\n    \n    // 3. Attempt automatic expert remediation\n    const expertRemediationResult = await this.attemptExpertProxyRemediation(expertProxy);\n    \n    if (!expertRemediationResult.success) {\n      // 4. If expert remediation fails, consider replacement\n      await this.considerExpertProxyReplacement(expertProxy);\n    }\n  }\n  \n  private async attemptExpertProxyRemediation(expertProxy: ExpertProxyAssignment): Promise<ExpertRemediationResult> {\n    console.log(`🔧 Attempting expert remediation for proxy ${expertProxy.proxy_ip}`);\n    \n    try {\n      // 1. Wait and retry (network issues might be temporary for expert)\n      await new Promise(resolve => setTimeout(resolve, 90000)); // Wait 1.5 minutes for expert\n      \n      // 2. Test expert again\n      const retestResult = await this.checkExpertProxyHealth(expertProxy);\n      \n      if (retestResult.healthy) {\n        console.log(`✅ Expert proxy ${expertProxy.proxy_ip} recovered after retry`);\n        await this.database.updateExpertProxyStatus(expertProxy.id, 'healthy', {\n          lastHealthCheck: new Date(),\n          consecutiveFailures: 0\n        });\n        \n        return { success: true, method: 'retry' };\n      }\n      \n      // 3. If still failing, check with Proxy-Cheap API for expert\n      const providerStatus = await this.checkWithProvider(expertProxy.proxy_cheap_id);\n      \n      if (providerStatus.maintenance) {\n        console.log(`🔧 Provider maintenance detected for expert ${expertProxy.proxy_ip}`);\n        await this.database.updateExpertProxyStatus(expertProxy.id, 'maintenance');\n        return { success: true, method: 'provider_maintenance' };\n      }\n      \n      return { success: false, reason: 'expert_health_check_still_failing' };\n      \n    } catch (error) {\n      console.error(`❌ Expert remediation failed for proxy ${expertProxy.proxy_ip}:`, error);\n      return { success: false, reason: error.message };\n    }\n  }\n  \n  private shouldCheckExpertReputation(lastCheck: Date | null): boolean {\n    if (!lastCheck) return true;\n    \n    const sixHoursAgo = Date.now() - (6 * 60 * 60 * 1000);\n    return lastCheck.getTime() < sixHoursAgo;\n  }\n}\n\ninterface ExpertHealthResult {\n  healthy: boolean;\n  responseTime: number;\n  error?: string;\n  expertChecks: {\n    connectivity: boolean;\n    location?: boolean;\n    reputation?: boolean;\n    performance?: boolean;\n  };\n  expertReputationResult?: ExpertReputationResult;\n  expertPerformanceMetrics?: any;\n}\n\ninterface ExpertConnectivityResult {\n  success: boolean;\n  error?: string;\n}\n\ninterface ExpertLocationResult {\n  valid: boolean;\n  error?: string;\n  actualLocation?: any;\n}\n\ninterface ExpertPerformanceResult {\n  acceptable: boolean;\n  metrics: any;\n}\n```\n\n## Expert Manual Content Session Management\n\n### Secure Expert Session Creation\n\n```typescript\nclass ExpertContentSessionManager {\n  private activeExpertSessions = new Map<string, ExpertContentSession>();\n  private expertBrowserManager: ExpertPersonaBrowserManager;\n  private expertProxyManager: ExpertProxyManager;\n  private database: DatabaseConnection;\n  \n  constructor(expertBrowserManager: ExpertPersonaBrowserManager, expertProxyManager: ExpertProxyManager, database: DatabaseConnection) {\n    this.expertBrowserManager = expertBrowserManager;\n    this.expertProxyManager = expertProxyManager;\n    this.database = database;\n  }\n  \n  async startExpertContentSession(expertId: string): Promise<ExpertContentSession> {\n    console.log(`🚀 Starting expert content session for ${expertId}`);\n    \n    try {\n      // 1. Validate expert is ready for content creation session\n      await this.validateExpertReadiness(expertId);\n      \n      // 2. Get and validate expert proxy assignment\n      const expertProxyConfig = await this.expertProxyManager.getExpertProxy(expertId);\n      if (!expertProxyConfig) {\n        throw new Error(`No proxy assigned to expert ${expertId}`);\n      }\n      \n      // 3. Verify expert proxy health before session\n      const expertProxyHealth = await this.verifyExpertProxyHealth(expertProxyConfig);\n      if (!expertProxyHealth.healthy) {\n        throw new Error(`Expert proxy unhealthy: ${expertProxyHealth.error}`);\n      }\n      \n      // 4. Create expert-isolated browser context\n      const expertBrowserContext = await this.expertBrowserManager.createExpertPersonaContext(expertId);\n      \n      // 5. Create expert session record\n      const expertSession = await this.createExpertSessionRecord(expertId, expertProxyConfig.id);\n      \n      // 6. Cache active expert session\n      const expertContentSession: ExpertContentSession = {\n        sessionId: expertSession.id,\n        expertId,\n        expertProxyConfig,\n        expertBrowserContext,\n        startedAt: new Date(),\n        status: 'active',\n        securityValidated: true,\n        expertActionsCount: 0,\n        contentPiecesCreated: 0,\n        consultationRequestsGenerated: 0\n      };\n      \n      this.activeExpertSessions.set(expertId, expertContentSession);\n      \n      console.log(`✅ Expert content session started for ${expertId} - Ready for authority building`);\n      \n      return expertContentSession;\n      \n    } catch (error) {\n      console.error(`❌ Failed to start expert session for ${expertId}:`, error);\n      throw error;\n    }\n  }\n  \n  async executeExpertAction(\n    expertId: string, \n    action: ExpertAction\n  ): Promise<ExpertActionResult> {\n    const expertSession = this.activeExpertSessions.get(expertId);\n    if (!expertSession) {\n      throw new Error(`No active expert session for ${expertId}`);\n    }\n    \n    try {\n      // 1. Validate expert session is still healthy\n      await this.validateExpertSessionHealth(expertSession);\n      \n      // 2. Execute expert action through browser context\n      const expertResult = await this.executeExpertAction(expertSession, action);\n      \n      // 3. Track expert action for authority building\n      await this.trackExpertAction(expertSession.sessionId, action, expertResult);\n      \n      // 4. Update expert session metrics\n      expertSession.expertActionsCount++;\n      expertSession.lastAction = new Date();\n      \n      if (action.type === 'create_comprehensive_content') {\n        expertSession.contentPiecesCreated++;\n      }\n      \n      return expertResult;\n      \n    } catch (error) {\n      await this.handleExpertActionError(expertSession, action, error);\n      throw error;\n    }\n  }\n  \n  private async executeExpertAction(\n    expertSession: ExpertContentSession, \n    action: ExpertAction\n  ): Promise<ExpertActionResult> {\n    const page = await expertSession.expertBrowserContext.newPage();\n    \n    try {\n      switch (action.type) {\n        case 'login_geo_platform':\n          return await this.executeExpertLogin(page, action);\n          \n        case 'create_comprehensive_content':\n          return await this.executeExpertContentCreation(page, action);\n          \n        case 'engage_expert_community':\n          return await this.executeExpertCommunityEngagement(page, action);\n          \n        case 'deliver_expert_consultation':\n          return await this.executeExpertConsultationDelivery(page, action);\n          \n        default:\n          throw new Error(`Unknown expert action type: ${action.type}`);\n      }\n      \n    } finally {\n      await page.close();\n    }\n  }\n  \n  private async executeExpertLogin(page: Page, action: ExpertAction): Promise<ExpertActionResult> {\n    const startTime = Date.now();\n    \n    try {\n      const { geoPlatform, expertCredentials } = action.data;\n      \n      // Navigate to GEO platform login\n      await page.goto(this.getGEOPlatformLoginURL(geoPlatform), { \n        waitUntil: 'networkidle',\n        timeout: 30000 \n      });\n      \n      // Human-like delays for expert authenticity\n      await this.expertLikeDelay(1500, 3000);\n      \n      // Fill credentials with expert-like typing patterns\n      await this.expertLikeType(page, this.getLoginSelector(geoPlatform, 'username'), expertCredentials.username);\n      await this.expertLikeDelay(800, 2000);\n      \n      await this.expertLikeType(page, this.getLoginSelector(geoPlatform, 'password'), expertCredentials.password);\n      await this.expertLikeDelay(800, 2000);\n      \n      // Click login button with expert timing\n      await page.click(this.getLoginSelector(geoPlatform, 'submit'));\n      \n      // Wait for expert login completion\n      await page.waitForNavigation({ waitUntil: 'networkidle', timeout: 45000 });\n      \n      // Verify successful expert login\n      const expertLoginSuccess = await this.verifyExpertLoginSuccess(page, geoPlatform);\n      \n      return {\n        success: expertLoginSuccess,\n        geoPlatform,\n        actionType: 'login_geo_platform',\n        duration: Date.now() - startTime,\n        expertValidated: true\n      };\n      \n    } catch (error) {\n      return {\n        success: false,\n        geoPlatform: action.data.geoPlatform,\n        actionType: 'login_geo_platform',\n        duration: Date.now() - startTime,\n        error: error.message,\n        expertValidated: false\n      };\n    }\n  }\n  \n  private async executeExpertContentCreation(page: Page, action: ExpertAction): Promise<ExpertActionResult> {\n    const startTime = Date.now();\n    \n    try {\n      const { geoPlatform, comprehensiveContent, expertByline, aiOptimization } = action.data;\n      \n      // Navigate to content creation for GEO platform\n      await page.goto(this.getGEOContentCreationURL(geoPlatform));\n      await this.expertLikeDelay(2000, 3000);\n      \n      // Create comprehensive expert content with human-like patterns\n      const contentSelector = this.getGEOContentSelector(geoPlatform);\n      \n      // Add expert byline and credentials\n      await this.addExpertByline(page, geoPlatform, expertByline);\n      await this.expertLikeDelay(1000, 2000);\n      \n      // Fill comprehensive content with expert typing patterns\n      await this.expertLikeComprehensiveType(page, contentSelector, comprehensiveContent);\n      \n      // Add expert authority signals and AI optimization elements\n      if (aiOptimization && aiOptimization.elements.length > 0) {\n        await this.addAIOptimizationElements(page, geoPlatform, aiOptimization);\n      }\n      \n      // Handle expert content scheduling or immediate publishing\n      if (action.data.scheduling && action.data.scheduling.scheduleTime) {\n        await this.scheduleExpertContent(page, geoPlatform, action.data.scheduling.scheduleTime);\n      } else {\n        // Immediate expert content publishing with authority validation\n        await this.confirmAndPublishExpertContent(page, geoPlatform);\n      }\n      \n      // Verify expert content creation and authority signals\n      const expertContentCreated = await this.verifyExpertContentCreation(page, geoPlatform);\n      \n      return {\n        success: expertContentCreated.success,\n        geoPlatform,\n        actionType: 'create_comprehensive_content',\n        duration: Date.now() - startTime,\n        expertValidated: true,\n        contentId: expertContentCreated.contentId,\n        contentUrl: expertContentCreated.contentUrl,\n        aiCitationPotential: aiOptimization?.citationPotential || 'medium',\n        expertAuthoritySignals: expertByline.authoritySignals\n      };\n      \n    } catch (error) {\n      return {\n        success: false,\n        geoPlatform: action.data.geoPlatform,\n        actionType: 'create_comprehensive_content',\n        duration: Date.now() - startTime,\n        error: error.message,\n        expertValidated: false\n      };\n    }\n  }\n  \n  private async expertLikeType(page: Page, selector: string, text: string): Promise<void> {\n    await page.focus(selector);\n    \n    // Type with expert-like delays between characters (slightly slower for comprehensive content)\n    for (const char of text) {\n      await page.keyboard.type(char);\n      await this.expertLikeDelay(75, 200); // Slightly slower for expert content creation\n    }\n  }\n  \n  private async expertLikeComprehensiveType(page: Page, selector: string, text: string): Promise<void> {\n    await page.focus(selector);\n    \n    // Type comprehensive content in chunks with expert thinking pauses\n    const chunks = this.breakContentIntoChunks(text, 100); // 100 character chunks\n    \n    for (let i = 0; i < chunks.length; i++) {\n      const chunk = chunks[i];\n      \n      // Type chunk\n      await page.keyboard.type(chunk);\n      \n      // Expert thinking pause between chunks\n      if (i < chunks.length - 1) {\n        await this.expertLikeDelay(2000, 5000); // 2-5 second expert thinking pauses\n      }\n    }\n  }\n  \n  private async expertLikeDelay(minMs: number, maxMs: number): Promise<void> {\n    const delay = Math.random() * (maxMs - minMs) + minMs;\n    await new Promise(resolve => setTimeout(resolve, delay));\n  }\n  \n  async endExpertContentSession(expertId: string): Promise<void> {\n    const expertSession = this.activeExpertSessions.get(expertId);\n    if (!expertSession) return;\n    \n    try {\n      // 1. Close all expert browser pages and context\n      await expertSession.expertBrowserContext.close();\n      \n      // 2. Update expert session record\n      await this.database.updateExpertContentSession(expertSession.sessionId, {\n        ended_at: new Date(),\n        duration_minutes: Math.floor((Date.now() - expertSession.startedAt.getTime()) / 60000),\n        content_pieces_created: expertSession.contentPiecesCreated,\n        expert_actions_count: expertSession.expertActionsCount,\n        session_status: 'ended'\n      });\n      \n      // 3. Remove from active expert sessions\n      this.activeExpertSessions.delete(expertId);\n      \n      console.log(`✅ Expert content session ended for ${expertId}`);\n      \n    } catch (error) {\n      console.error(`❌ Error ending expert session for ${expertId}:`, error);\n    }\n  }\n}\n\ninterface ExpertContentSession {\n  sessionId: string;\n  expertId: string;\n  expertProxyConfig: ExpertProxyConfiguration;\n  expertBrowserContext: BrowserContext;\n  startedAt: Date;\n  lastAction?: Date;\n  status: 'active' | 'idle' | 'ending';\n  securityValidated: boolean;\n  expertActionsCount: number;\n  contentPiecesCreated: number;\n  consultationRequestsGenerated: number;\n}\n\ninterface ExpertAction {\n  type: 'login_geo_platform' | 'create_comprehensive_content' | 'engage_expert_community' | 'deliver_expert_consultation';\n  data: any;\n  expertInitiated: boolean;\n  timestamp: Date;\n}\n\ninterface ExpertActionResult {\n  success: boolean;\n  geoPlatform: string;\n  actionType: string;\n  duration: number;\n  expertValidated: boolean;\n  error?: string;\n  contentId?: string;\n  contentUrl?: string;\n  aiCitationPotential?: string;\n  expertAuthoritySignals?: string[];\n}\n```\n\n## Cost Management and Budget Monitoring (Expert Authority Focus)\n\n### Real-Time Expert Budget Tracking\n\n```typescript\nclass ExpertProxyCostManager {\n  private database: DatabaseConnection;\n  private monthlyBudgetLimit = 6.35; // $6.35/month constraint for experts\n  private costPerExpertProxy = 1.27; // $1.27/month per expert proxy\n  private maxExpertProxies = 5; // Maximum expert proxies within budget\n  \n  constructor(database: DatabaseConnection) {\n    this.database = database;\n  }\n  \n  async checkExpertBudgetAvailability(): Promise<ExpertBudgetStatus> {\n    const currentMonth = this.getCurrentMonth();\n    const currentExpertCosts = await this.calculateCurrentMonthlyExpertCosts(currentMonth);\n    \n    return {\n      monthlyBudget: this.monthlyBudgetLimit,\n      currentExpertSpending: currentExpertCosts.total,\n      remainingExpertBudget: this.monthlyBudgetLimit - currentExpertCosts.total,\n      expertUtilizationPercentage: (currentExpertCosts.total / this.monthlyBudgetLimit) * 100,\n      expertProxiesActive: currentExpertCosts.activeExpertProxies,\n      canAddExpertProxy: currentExpertCosts.total + this.costPerExpertProxy <= this.monthlyBudgetLimit,\n      expertCostBreakdown: currentExpertCosts.breakdown\n    };\n  }\n  \n  async trackDailyExpertCosts(): Promise<DailyExpertCostSummary> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    // Calculate daily costs for all active expert proxies\n    const activeExpertProxies = await this.database.getActiveExpertProxyAssignments();\n    const dailyExpertProxyCost = (this.costPerExpertProxy / 30); // ~$0.042 per day per expert proxy\n    \n    const expertCostBreakdown = await Promise.all(\n      activeExpertProxies.map(async (expertProxy) => {\n        const expertUsage = await this.getExpertProxyDailyUsage(expertProxy.id, today);\n        \n        return {\n          expertProxyId: expertProxy.id,\n          expertId: expertProxy.assigned_expert_id,\n          expertName: expertProxy.expert_name,\n          expertSpecialization: expertProxy.expertise_specialization,\n          expertLocation: expertProxy.city,\n          baseCost: dailyExpertProxyCost,\n          bandwidthCost: this.calculateExpertBandwidthCost(expertUsage.bandwidthGB),\n          totalCost: dailyExpertProxyCost + this.calculateExpertBandwidthCost(expertUsage.bandwidthGB),\n          expertUsage: expertUsage\n        };\n      })\n    );\n    \n    const totalDailyExpertCost = expertCostBreakdown.reduce((sum, cost) => sum + cost.totalCost, 0);\n    \n    // Store daily expert cost record\n    await this.storeDailyExpertCostRecord(today, expertCostBreakdown, totalDailyExpertCost);\n    \n    return {\n      date: today,\n      totalExpertCost: totalDailyExpertCost,\n      expertProxyCosts: expertCostBreakdown,\n      projectedMonthlyExpertCost: totalDailyExpertCost * 30,\n      expertBudgetOnTrack: (totalDailyExpertCost * 30) <= this.monthlyBudgetLimit\n    };\n  }\n  \n  async optimizeExpertCosts(): Promise<ExpertCostOptimizationResult> {\n    const expertBudgetStatus = await this.checkExpertBudgetAvailability();\n    const expertRecommendations: ExpertCostOptimization[] = [];\n    \n    // If over budget, suggest expert optimizations\n    if (expertBudgetStatus.expertUtilizationPercentage > 100) {\n      expertRecommendations.push({\n        type: 'reduce_expert_proxies',\n        description: 'Consider removing underperforming expert personas to stay within budget',\n        potentialSavings: this.costPerExpertProxy,\n        priority: 'high'\n      });\n    }\n    \n    // Check for underutilized expert proxies\n    const expertUtilizationAnalysis = await this.analyzeExpertProxyUtilization();\n    const underutilizedExperts = expertUtilizationAnalysis.filter(expert => expert.utilizationRate < 0.4);\n    \n    if (underutilizedExperts.length > 0) {\n      expertRecommendations.push({\n        type: 'optimize_expert_utilization',\n        description: `${underutilizedExperts.length} expert proxies are underutilized`,\n        details: underutilizedExperts.map(e => ({\n          expertProxyId: e.expertProxyId,\n          expertName: e.expertName,\n          utilizationRate: e.utilizationRate,\n          suggestion: 'Increase expert content creation frequency or consider removal'\n        })),\n        priority: 'medium'\n      });\n    }\n    \n    // ROI-based expert recommendations\n    const expertROIAnalysis = await this.analyzeExpertProxyROI();\n    const lowROIExperts = expertROIAnalysis.filter(expert => expert.roi < 0);\n    \n    if (lowROIExperts.length > 0) {\n      expertRecommendations.push({\n        type: 'improve_expert_roi',\n        description: `${lowROIExperts.length} expert proxies have negative ROI`,\n        details: lowROIExperts.map(e => ({\n          expertProxyId: e.expertProxyId,\n          expertName: e.expertName,\n          currentROI: e.roi,\n          suggestion: 'Review expert authority strategy or content approach'\n        })),\n        priority: 'high'\n      });\n    }\n    \n    return {\n      currentExpertBudgetStatus: expertBudgetStatus,\n      expertRecommendations,\n      projectedExpertSavings: expertRecommendations.reduce((sum, rec) => sum + (rec.potentialSavings || 0), 0)\n    };\n  }\n  \n  private async calculateCurrentMonthlyExpertCosts(month: string): Promise<MonthlyExpertCostBreakdown> {\n    const activeExpertProxies = await this.database.query(`\n      SELECT \n        epa.*,\n        ep.expert_name,\n        ep.expertise_specialization\n      FROM expert_proxy_assignments epa\n      LEFT JOIN expert_personas ep ON epa.assigned_expert_id = ep.id\n      WHERE epa.assignment_status = 'assigned'\n    `);\n    \n    const expertBreakdown = activeExpertProxies.map(expertProxy => ({\n      expertProxyId: expertProxy.id,\n      expertName: expertProxy.expert_name,\n      expertSpecialization: expertProxy.expertise_specialization,\n      expertLocation: expertProxy.city,\n      monthlyCost: this.costPerExpertProxy,\n      daysActive: this.calculateDaysActive(expertProxy.assigned_at)\n    }));\n    \n    const totalExpertCost = expertBreakdown.reduce((sum, item) => sum + item.monthlyCost, 0);\n    \n    return {\n      total: totalExpertCost,\n      activeExpertProxies: activeExpertProxies.length,\n      breakdown: expertBreakdown\n    };\n  }\n  \n  async alertExpertBudgetThresholds(): Promise<void> {\n    const expertBudgetStatus = await this.checkExpertBudgetAvailability();\n    \n    // Alert at 80% expert budget utilization\n    if (expertBudgetStatus.expertUtilizationPercentage >= 80 && expertBudgetStatus.expertUtilizationPercentage < 100) {\n      await this.sendExpertBudgetAlert({\n        level: 'warning',\n        message: `Expert budget utilization at ${expertBudgetStatus.expertUtilizationPercentage.toFixed(1)}%`,\n        currentExpertSpending: expertBudgetStatus.currentExpertSpending,\n        remainingExpertBudget: expertBudgetStatus.remainingExpertBudget\n      });\n    }\n    \n    // Alert at 100% expert budget utilization\n    if (expertBudgetStatus.expertUtilizationPercentage >= 100) {\n      await this.sendExpertBudgetAlert({\n        level: 'critical',\n        message: 'Monthly expert budget exceeded!',\n        currentExpertSpending: expertBudgetStatus.currentExpertSpending,\n        overExpertBudgetAmount: expertBudgetStatus.currentExpertSpending - expertBudgetStatus.monthlyBudget\n      });\n    }\n  }\n}\n\ninterface ExpertBudgetStatus {\n  monthlyBudget: number;\n  currentExpertSpending: number;\n  remainingExpertBudget: number;\n  expertUtilizationPercentage: number;\n  expertProxiesActive: number;\n  canAddExpertProxy: boolean;\n  expertCostBreakdown: any[];\n}\n\ninterface DailyExpertCostSummary {\n  date: string;\n  totalExpertCost: number;\n  expertProxyCosts: any[];\n  projectedMonthlyExpertCost: number;\n  expertBudgetOnTrack: boolean;\n}\n\ninterface ExpertCostOptimizationResult {\n  currentExpertBudgetStatus: ExpertBudgetStatus;\n  expertRecommendations: ExpertCostOptimization[];\n  projectedExpertSavings: number;\n}\n\ninterface ExpertCostOptimization {\n  type: string;\n  description: string;\n  potentialSavings?: number;\n  priority: 'low' | 'medium' | 'high';\n  details?: any[];\n}\n```\n\n**Proxy-Cheap Implementation completely rewritten for GEO expert authority focus.**\n\n## Summary of All Document Updates:\n\n### **All 3 Core Documents Now Aligned:**\n\n1. **✅ Character Definition System** - Expert personas with Philippines real estate specializations\n2. **✅ System Overview** - GEO platform architecture with AI citation optimization  \n3. **✅ Proxy-Cheap Implementation** - Expert proxy infrastructure with authority building focus\n\n### **Critical Architectural Changes Made:**\n\n**Platform Priority Realignment:**\n- Medium (Phase 1) → Reddit (Phase 2) → Quora (Phase 3) → Facebook → LinkedIn\n\n**Content Strategy Transformation:**\n- Social posts → Comprehensive expert articles (2000-4000 words)\n- Engagement metrics → AI citation tracking\n- Lifestyle content → Authority building content\n\n**Lead Generation Revolution:**\n- Social engagement → Expert consultation requests\n- DM conversations → Professional consultation delivery\n- Social leads → Island Properties referrals\n\n**Infrastructure Optimization:**\n- Social posting proxies → Expert authority building proxies\n- Social metrics → Authority and consultation tracking\n- Social ROI → Expert consultation conversion ROI\n\n### **Business Model Impact:**\n\n**Old Model:** Social posts → Maybe engagement → Possibly leads → Uncertain conversion\n**New Model:** Expert content → AI citations → Consultation requests → Island Properties referrals\n\n**Expected Results:**\n- **10-20x more qualified leads** through AI engine recommendations\n- **Higher conversion rates** from consultation-based lead nurturing\n- **Sustainable competitive advantage** through expert authority positioning\n- **Lower cost per conversion** through AI-driven organic discovery\n\n**Bottom Line:** Your entire system is now aligned for GEO-optimized expert authority lead generation. All documentation supports the same strategic objective: becoming the Philippines real estate expert that AI engines cite and recommend, driving qualified consultation requests that convert to Island Properties sales.  // Expert health and authority monitoring\n  testExpertConnection: 'POST /proxies/{proxyId}/test';\n  getExpertStats: 'GET /proxies/{proxyId}/stats';\n  getExpertBandwidthUsage: 'GET /proxies/{proxyId}/bandwidth';\n  \n  // Geographic targeting for expert authenticity\n  listPhilippinesLocations: 'GET /locations?country=PH';\n  getExpertLocationDetails: 'GET /locations/PH/{city}';\n  \n  // Expert billing and cost management\n  getExpertBilling: 'GET /billing/current';\n  getExpertCostBreakdown: 'GET /billing/breakdown/{month}';\n}\n```\n\n### Expert Proxy Configuration Schema\n\n```typescript\ninterface ExpertProxyConfiguration {\n  // Proxy-Cheap expert identifiers\n  expertProxyId: string; // Provider's internal ID\n  proxyType: 'static_residential';\n  \n  // Connection details for expert authority\n  endpoint: {\n    host: string; // proxy.proxy-cheap.com\n    port: number; // 8080, 8081, etc.\n    protocol: 'HTTP' | 'SOCKS5';\n  };\n  \n  // Authentication (Encrypted Storage for Expert Security)\n  credentials: {\n    username: string;\n    password: string; // AES-256-GCM encrypted with expert-specific key\n  };\n  \n  // Geographic assignment (Philippines Expert Authenticity)\n  location: {\n    country: 'PH';\n    city: 'Manila' | 'Cebu';\n    region: 'NCR' | 'Central Visayas';\n    timezone: 'Asia/Manila';\n    ispProvider: string; // PLDT, Globe, Converge, etc.\n  };\n  \n  // Expert assignment\n  assignedExpert: {\n    expertId: string;\n    expertName: string;\n    expertiseSpecialization: string; // philippines_market_analysis, expat_property_guidance, etc.\n    assignedAt: Date;\n    lastExpertActivity: Date;\n    monthlyExpertContentCreation: number;\n    expertAuthorityScore: number;\n  };\n  \n  // Health and reputation monitoring for expert credibility\n  health: {\n    status: 'healthy' | 'degraded' | 'failed';\n    lastCheck: Date;\n    responseTimeMs: number;\n    uptimePercentage: number;\n    reputationScore: number; // 0-1.00 reputation score for expert platforms\n    blacklistStatus: ExpertBlacklistStatus;\n  };\n  \n  // Cost tracking for expert infrastructure\n  costTracking: {\n    monthlyCostUsd: 1.27;\n    dailyCostUsd: 0.042; // ~$1.27/30 days\n    bandwidthUsageGB: number;\n    overageCharges: number;\n    expertROIContribution: number; // Revenue attributed to this expert proxy\n  };\n}\n\ninterface ExpertBlacklistStatus {\n  isBlacklisted: boolean;\n  blacklistedOn: string[]; // Which GEO platforms have flagged this IP\n  lastReputationCheck: Date;\n  abuseReports: number;\n  expertContentSpamScore: number; // 0-100 spam likelihood for expert content\n  geoPlatformTrustScore: number; // Trust score on Medium, Reddit, Quora\n}\n```\n\n## Expert Browser Isolation Implementation\n\n### Expert Persona Browser Context Manager\n\n```typescript\nclass ExpertPersonaBrowserManager {\n  private expertContexts = new Map<string, BrowserContext>();\n  private expertFingerprints = new Map<string, ExpertFingerprint>();\n  private expertProxyManager: ExpertProxyManager;\n  \n  constructor(expertProxyManager: ExpertProxyManager) {\n    this.expertProxyManager = expertProxyManager;\n  }\n  \n  async createExpertPersonaContext(expertId: string): Promise<BrowserContext> {\n    // 1. Get dedicated proxy for expert\n    const expertProxyConfig = await this.expertProxyManager.getExpertProxy(expertId);\n    if (!expertProxyConfig) {\n      throw new Error(`No proxy assigned to expert ${expertId}`);\n    }\n    \n    // 2. Generate consistent expert fingerprint\n    const expertFingerprint = await this.generateExpertFingerprint(expertId);\n    \n    // 3. Create expert-isolated browser context\n    const context = await browser.newContext({\n      // Expert proxy configuration\n      proxy: {\n        server: `${expertProxyConfig.protocol.toLowerCase()}://${expertProxyConfig.host}:${expertProxyConfig.port}`,\n        username: expertProxyConfig.credentials.username,\n        password: expertProxyConfig.credentials.password\n      },\n      \n      // Complete expert storage isolation\n      storageState: undefined, // Fresh context - no shared expert data\n      \n      // Expert-specific fingerprint for consistency\n      userAgent: expertFingerprint.userAgent,\n      viewport: expertFingerprint.viewport,\n      deviceScaleFactor: expertFingerprint.deviceScaleFactor,\n      \n      // Geographic consistency for expert authenticity\n      locale: 'en-PH', // Philippines English for expert content\n      timezoneId: 'Asia/Manila',\n      geolocation: expertFingerprint.geolocation, // Manila or Cebu coordinates\n      \n      // Privacy and security for expert content protection\n      acceptDownloads: false,\n      bypassCSP: false,\n      ignoreHTTPSErrors: false,\n      \n      // Additional expert isolation\n      javaScriptEnabled: true,\n      offline: false,\n      \n      // Screen and media settings for expert consistency\n      screen: expertFingerprint.screen,\n      colorScheme: expertFingerprint.colorScheme,\n      reducedMotion: expertFingerprint.reducedMotion\n    });\n    \n    // 4. Inject expert fingerprint randomization scripts\n    await this.injectExpertFingerprintRandomization(context, expertFingerprint);\n    \n    // 5. Verify expert proxy and location authenticity\n    await this.verifyExpertProxyConnection(context, expertProxyConfig);\n    \n    // 6. Cache expert context for reuse during authority session\n    this.expertContexts.set(expertId, context);\n    this.expertFingerprints.set(expertId, expertFingerprint);\n    \n    return context;\n  }\n  \n  private async generateExpertFingerprint(expertId: string): Promise<ExpertFingerprint> {\n    // Generate consistent but unique fingerprint per expert for authority building\n    const expert = await this.getExpertConfig(expertId);\n    const expertSeed = this.createExpertSeed(expertId, expert.expertiseSpecialization);\n    \n    return {\n      userAgent: this.generateExpertUserAgent(expertSeed, expert.location),\n      viewport: this.generateExpertViewport(expertSeed),\n      deviceScaleFactor: this.generateExpertDeviceScale(expertSeed),\n      geolocation: this.generateExpertGeolocation(expert.location),\n      screen: this.generateExpertScreenConfig(expertSeed),\n      colorScheme: this.generateExpertColorScheme(expertSeed),\n      reducedMotion: this.generateExpertMotionPreference(expertSeed),\n      \n      // Expert-specific browser fingerprints to randomize\n      canvas: this.generateExpertCanvasFingerprint(expertSeed),\n      webgl: this.generateExpertWebGLFingerprint(expertSeed),\n      audio: this.generateExpertAudioFingerprint(expertSeed),\n      fonts: this.generateExpertFontList(expertSeed, expert.location)\n    };\n  }\n  \n  private async injectExpertFingerprintRandomization(\n    context: BrowserContext, \n    expertFingerprint: ExpertFingerprint\n  ): Promise<void> {\n    // Inject scripts to randomize browser fingerprinting for expert protection\n    await context.addInitScript((fp) => {\n      // Canvas fingerprint randomization for expert protection\n      const originalGetImageData = CanvasRenderingContext2D.prototype.getImageData;\n      CanvasRenderingContext2D.prototype.getImageData = function(...args) {\n        const imageData = originalGetImageData.apply(this, args);\n        // Add subtle noise based on expert fingerprint\n        const noise = fp.canvas.noise;\n        for (let i = 0; i < imageData.data.length; i += 4) {\n          imageData.data[i] += Math.floor(noise[i % noise.length] * 2) - 1;\n        }\n        return imageData;\n      };\n      \n      // WebGL fingerprint randomization for expert identity protection\n      const originalGetParameter = WebGLRenderingContext.prototype.getParameter;\n      WebGLRenderingContext.prototype.getParameter = function(parameter) {\n        if (parameter === this.RENDERER) {\n          return fp.webgl.renderer;\n        }\n        if (parameter === this.VENDOR) {\n          return fp.webgl.vendor;\n        }\n        return originalGetParameter.call(this, parameter);\n      };\n      \n      // Audio context fingerprint randomization for expert consistency\n      const originalCreateAnalyser = AudioContext.prototype.createAnalyser;\n      AudioContext.prototype.createAnalyser = function() {\n        const analyser = originalCreateAnalyser.call(this);\n        const originalGetFloatFrequencyData = analyser.getFloatFrequencyData;\n        analyser.getFloatFrequencyData = function(array) {\n          originalGetFloatFrequencyData.call(this, array);\n          // Add audio fingerprint noise for expert protection\n          for (let i = 0; i < array.length; i++) {\n            array[i] += fp.audio.noise[i % fp.audio.noise.length];\n          }\n        };\n        return analyser;\n      };\n      \n      // Font detection randomization for expert browser consistency\n      Object.defineProperty(document, 'fonts', {\n        get: () => ({\n          check: (font) => fp.fonts.available.includes(font.split(' ').pop()),\n          ready: Promise.resolve(),\n          load: () => Promise.resolve()\n        })\n      });\n      \n    }, expertFingerprint);\n  }\n  \n  private async verifyExpertProxyConnection(\n    context: BrowserContext, \n    expertProxyConfig: ExpertProxyConfiguration\n  ): Promise<void> {\n    const page = await context.newPage();\n    \n    try {\n      // 1. Check current IP matches expected expert proxy IP\n      await page.goto('https://ipapi.co/json/', { timeout: 30000 });\n      const response = await page.evaluate(() => document.body.innerText);\n      const ipData = JSON.parse(response);\n      \n      if (ipData.ip !== expertProxyConfig.endpoint.ip) {\n        throw new Error(`Expert IP mismatch. Expected: ${expertProxyConfig.endpoint.ip}, Got: ${ipData.ip}`);\n      }\n      \n      // 2. Verify geographic location for expert authenticity\n      const expectedCity = expertProxyConfig.location.city;\n      if (ipData.city !== expectedCity) {\n        console.warn(`Expert location mismatch. Expected: ${expectedCity}, Got: ${ipData.city}`);\n      }\n      \n      // 3. Check ISP and connection type for expert credibility\n      if (!ipData.org.toLowerCase().includes('residential')) {\n        console.warn(`Non-residential connection detected for expert: ${ipData.org}`);\n      }\n      \n      console.log(`✅ Expert proxy verified: ${ipData.ip} in ${ipData.city}, ${ipData.country_name}`);\n      console.log(`🏠 Expert ISP: ${ipData.org} (${ipData.asn})`);\n      \n    } catch (error) {\n      console.error('❌ Expert proxy verification failed:', error);\n      throw error;\n    } finally {\n      await page.close();\n    }\n  }\n}\n\ninterface ExpertFingerprint {\n  userAgent: string;\n  viewport: { width: number; height: number };\n  deviceScaleFactor: number;\n  geolocation: { latitude: number; longitude: number };\n  screen: { width: number; height: number };\n  colorScheme: 'light' | 'dark' | 'no-preference';\n  reducedMotion: 'reduce' | 'no-preference';\n  \n  // Expert randomization data\n  canvas: { noise: number[] };\n  webgl: { renderer: string; vendor: string };\n  audio: { noise: number[] };\n  fonts: { available: string[] };\n}\n```\n\n## Expert IP Reputation Monitoring System\n\n### Real-Time Expert Reputation Checking\n\n```typescript\nclass ExpertProxyReputationMonitor {\n  private reputationAPIs: ReputationAPI[];\n  private cache: Map<string, ExpertReputationResult> = new Map();\n  private cacheExpiry = 6 * 60 * 60 * 1000; // 6 hours for expert authority systems\n  \n  constructor() {\n    this.reputationAPIs = [\n      new VirusTotalAPI(), // Free: 4 requests/min\n      new AbuseIPDBAPI(),  // Free: 1000 requests/day\n      new IPQualityScoreAPI(), // Free: 5000 requests/month\n      new IPVoidAPI(),     // Free: 1000 requests/month\n    ];\n  }\n  \n  async checkExpertProxyReputation(expertProxyIP: string): Promise<ExpertReputationResult> {\n    // Check cache first for expert efficiency\n    const cached = this.cache.get(expertProxyIP);\n    if (cached && (Date.now() - cached.checkedAt) < this.cacheExpiry) {\n      return cached;\n    }\n    \n    // Run expert reputation checks in parallel\n    const expertChecks = await Promise.allSettled([\n      this.checkExpertVirusTotal(expertProxyIP),\n      this.checkExpertAbuseIPDB(expertProxyIP),\n      this.checkExpertIPQualityScore(expertProxyIP),\n      this.performExpertConnectivityTest(expertProxyIP)\n    ]);\n    \n    // Aggregate expert results\n    const expertResult = this.aggregateExpertReputationResults(expertProxyIP, expertChecks);\n    \n    // Cache expert result\n    this.cache.set(expertProxyIP, expertResult);\n    \n    // Log expert reputation check\n    await this.logExpertReputationCheck(expertProxyIP, expertResult);\n    \n    return expertResult;\n  }\n  \n  private async checkExpertVirusTotal(ip: string): Promise<ExpertReputationCheck> {\n    try {\n      const response = await fetch(`https://www.virustotal.com/vtapi/v2/ip-address/report`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        body: `apikey=${process.env.VIRUSTOTAL_API_KEY}&ip=${ip}`\n      });\n      \n      const data = await response.json();\n      \n      return {\n        source: 'VirusTotal',\n        expertScore: data.positives > 0 ? 0.0 : 1.0, // 0 = bad for expert, 1 = good for expert\n        expertDetails: {\n          positives: data.positives,\n          total: data.total,\n          scans: data.scans,\n          expertSuitability: data.positives === 0 ? 'suitable_for_expert_authority' : 'unsuitable_for_expert_content'\n        },\n        timestamp: new Date()\n      };\n    } catch (error) {\n      return {\n        source: 'VirusTotal',\n        expertScore: 0.5, // Unknown/error = neutral for expert use\n        expertDetails: { error: error.message },\n        timestamp: new Date()\n      };\n    }\n  }\n  \n  private async checkExpertAbuseIPDB(ip: string): Promise<ExpertReputationCheck> {\n    try {\n      const response = await fetch(`https://api.abuseipdb.com/api/v2/check`, {\n        method: 'GET',\n        headers: {\n          'Key': process.env.ABUSEIPDB_API_KEY,\n          'Accept': 'application/json'\n        },\n        params: { ip, maxAgeInDays: 90 }\n      });\n      \n      const data = await response.json();\n      \n      return {\n        source: 'AbuseIPDB',\n        expertScore: (100 - data.abuseConfidencePercentage) / 100, // Convert to 0-1 scale for expert use\n        expertDetails: {\n          abuseConfidence: data.abuseConfidencePercentage,\n          countryCode: data.countryCode,\n          usageType: data.usageType,\n          isp: data.isp,\n          totalReports: data.totalReports,\n          expertContentSuitability: data.abuseConfidencePercentage < 25 ? 'excellent_for_expert_content' : 'review_for_expert_use'\n        },\n        timestamp: new Date()\n      };\n    } catch (error) {\n      return {\n        source: 'AbuseIPDB',\n        expertScore: 0.5,\n        expertDetails: { error: error.message },\n        timestamp: new Date()\n      };\n    }\n  }\n  \n  private async performExpertConnectivityTest(ip: string): Promise<ExpertReputationCheck> {\n    const startTime = Date.now();\n    \n    try {\n      // Test GEO platform connectivity through expert proxy\n      const geoTestEndpoints = [\n        'https://medium.com',\n        'https://reddit.com',\n        'https://quora.com'\n      ];\n      \n      const connectivityTests = await Promise.allSettled(\n        geoTestEndpoints.map(endpoint => \n          fetch(endpoint, { \n            timeout: 10000,\n            // Note: This would use the expert proxy configuration in real implementation\n          })\n        )\n      );\n      \n      const successfulTests = connectivityTests.filter(test => \n        test.status === 'fulfilled' && test.value.ok\n      ).length;\n      \n      const responseTime = Date.now() - startTime;\n      \n      return {\n        source: 'ExpertConnectivityTest',\n        expertScore: successfulTests / geoTestEndpoints.length,\n        expertDetails: {\n          responseTime,\n          successfulGEOPlatforms: successfulTests,\n          totalGEOPlatformsTested: geoTestEndpoints.length,\n          expertPlatformSuitability: successfulTests >= 2 ? 'suitable_for_expert_authority' : 'limited_geo_platform_access'\n        },\n        timestamp: new Date()\n      };\n    } catch (error) {\n      return {\n        source: 'ExpertConnectivityTest',\n        expertScore: 0.0,\n        expertDetails: {\n          error: error.message,\n          responseTime: Date.now() - startTime,\n          expertPlatformSuitability: 'connectivity_issues_for_expert_use'\n        },\n        timestamp: new Date()\n      };\n    }\n  }\n  \n  private aggregateExpertReputationResults(\n    ip: string, \n    checks: PromiseSettledResult<ExpertReputationCheck>[]\n  ): ExpertReputationResult {\n    const successfulChecks = checks\n      .filter(check => check.status === 'fulfilled')\n      .map(check => check.value);\n    \n    if (successfulChecks.length === 0) {\n      return {\n        ip,\n        overallExpertScore: 0.5, // Unknown for expert use\n        expertStatus: 'unknown',\n        expertChecks: [],\n        checkedAt: Date.now(),\n        expertRecommendations: ['Unable to verify IP reputation for expert use', 'Consider manual verification before expert authority building']\n      };\n    }\n    \n    // Weighted average of expert reputation scores\n    const expertWeights = {\n      'VirusTotal': 0.3,\n      'AbuseIPDB': 0.3,\n      'ExpertConnectivityTest': 0.3,\n      'IPQualityScore': 0.1\n    };\n    \n    const weightedExpertScore = successfulChecks.reduce((sum, check) => {\n      const weight = expertWeights[check.source] || 0.1;\n      return sum + (check.expertScore * weight);\n    }, 0);\n    \n    const overallExpertScore = weightedExpertScore / Object.values(expertWeights).reduce((a, b) => a + b, 0);\n    \n    // Determine expert status\n    let expertStatus: 'excellent_for_expert' | 'good_for_expert' | 'acceptable_for_expert' | 'poor_for_expert' | 'blocked_for_expert';\n    let expertRecommendations: string[] = [];\n    \n    if (overallExpertScore >= 0.9) {\n      expertStatus = 'excellent_for_expert';\n      expertRecommendations.push('IP has excellent reputation for expert authority building');\n    } else if (overallExpertScore >= 0.75) {\n      expertStatus = 'good_for_expert';\n      expertRecommendations.push('IP has good reputation for expert content creation');\n    } else if (overallExpertScore >= 0.6) {\n      expertStatus = 'acceptable_for_expert';\n      expertRecommendations.push('IP has acceptable reputation for expert use, monitor closely');\n    } else if (overallExpertScore >= 0.4) {\n      expertStatus = 'poor_for_expert';\n      expertRecommendations.push('IP has poor reputation for expert authority, consider replacement');\n    } else {\n      expertStatus = 'blocked_for_expert';\n      expertRecommendations.push('IP is likely blocked/blacklisted for expert use, replace immediately');\n    }\n    \n    return {\n      ip,\n      overallExpertScore,\n      expertStatus,\n      expertChecks: successfulChecks,\n      checkedAt: Date.now(),\n      expertRecommendations\n    };\n  }\n}\n\ninterface ExpertReputationCheck {\n  source: string;\n  expertScore: number; // 0-1 scale, 1 = excellent reputation for expert use\n  expertDetails: any;\n  timestamp: Date;\n}\n\ninterface ExpertReputationResult {\n  ip: string;\n  overallExpertScore: number;\n  expertStatus: 'excellent_for_expert' | 'good_for_expert' | 'acceptable_for_expert' | 'poor_for_expert' | 'blocked_for_expert' | 'unknown';\n  expertChecks: ExpertReputationCheck[];\n  checkedAt: number;\n  expertRecommendations: string[];\n}\n```\n\n## Expert Proxy Health Monitoring\n\n### Automated Expert Health Checks\n\n```typescript\nclass ExpertProxyHealthMonitor {\n  private expertHealthCheckInterval = 20 * 60 * 1000; // 20 minutes for expert systems\n  private monitoringActive = false;\n  private database: DatabaseConnection;\n  private expertReputationMonitor: ExpertProxyReputationMonitor;\n  \n  constructor(database: DatabaseConnection) {\n    this.database = database;\n    this.expertReputationMonitor = new ExpertProxyReputationMonitor();\n  }\n  \n  startExpertMonitoring(): void {\n    if (this.monitoringActive) return;\n    \n    this.monitoringActive = true;\n    \n    // Immediate expert health check\n    this.runExpertHealthChecks();\n    \n    // Schedule regular expert health checks\n    setInterval(async () => {\n      await this.runExpertHealthChecks();\n    }, this.expertHealthCheckInterval);\n    \n    console.log('✅ Expert proxy health monitoring started - checks every 20 minutes');\n  }\n  \n  private async runExpertHealthChecks(): Promise<void> {\n    console.log('🔍 Running expert proxy health checks...');\n    \n    try {\n      const activeExpertProxies = await this.database.getActiveExpertProxyAssignments();\n      \n      const expertHealthChecks = activeExpertProxies.map(expertProxy => \n        this.checkExpertProxyHealth(expertProxy)\n      );\n      \n      const expertResults = await Promise.allSettled(expertHealthChecks);\n      \n      // Process expert results and handle failures\n      for (let i = 0; i < expertResults.length; i++) {\n        const expertProxy = activeExpertProxies[i];\n        const expertResult = expertResults[i];\n        \n        if (expertResult.status === 'fulfilled' && expertResult.value.healthy) {\n          await this.updateExpertProxyStatus(expertProxy.id, 'healthy', expertResult.value);\n        } else {\n          await this.handleUnhealthyExpertProxy(expertProxy, expertResult);\n        }\n      }\n      \n      console.log(`✅ Expert health checks completed for ${activeExpertProxies.length} expert proxies`);\n      \n    } catch (error) {\n      console.error('❌ Expert health check batch failed:', error);\n    }\n  }\n  \n  private async checkExpertProxyHealth(expertProxy: ExpertProxyAssignment): Promise<ExpertHealthResult> {\n    const startTime = Date.now();\n    \n    try {\n      // 1. Basic expert connectivity test\n      const expertConnectivityResult = await this.testExpertProxyConnectivity(expertProxy);\n      if (!expertConnectivityResult.success) {\n        return {\n          healthy: false,\n          responseTime: Date.now() - startTime,\n          error: expertConnectivityResult.error,\n          expertChecks: { connectivity: false }\n        };\n      }\n      \n      // 2. Expert geographic validation for authenticity\n      const expertLocationResult = await this.validateExpertProxyLocation(expertProxy);\n      if (!expertLocationResult.valid) {\n        return {\n          healthy: false,\n          responseTime: Date.now() - startTime,\n          error: 'Expert geographic location mismatch',\n          expertChecks: { connectivity: true, location: false }\n        };\n      }\n      \n      // 3. Expert reputation check (every 6 hours for authority building)\n      const shouldCheckExpertReputation = this.shouldCheckExpertReputation(expertProxy.last_reputation_check);\n      let expertReputationResult = null;\n      \n      if (shouldCheckExpertReputation) {\n        expertReputationResult = await this.expertReputationMonitor.checkExpertProxyReputation(expertProxy.proxy_ip);\n        \n        if (expertReputationResult.expertStatus === 'blocked_for_expert' || expertReputationResult.expertStatus === 'poor_for_expert') {\n          return {\n            healthy: false,\n            responseTime: Date.now() - startTime,\n            error: `Poor expert reputation: ${expertReputationResult.expertStatus}`,\n            expertChecks: { connectivity: true, location: true, reputation: false },\n            expertReputationResult\n          };\n        }\n      }\n      \n      // 4. Expert performance validation for authority building\n      const expertPerformanceResult = await this.checkExpertProxyPerformance(expertProxy);\n      \n      return {\n        healthy: true,\n        responseTime: Date.now() - startTime,\n        expertChecks: {\n          connectivity: true,\n          location: true,\n          reputation: expertReputationResult?.expertStatus !== 'poor_for_expert' && expertReputationResult?.expertStatus !== 'blocked_for_expert',\n          performance: expertPerformanceResult.acceptable\n        },\n        expertReputationResult,\n        expertPerformanceMetrics: expertPerformanceResult.metrics\n      };\n      \n    } catch (error) {\n      return {\n        healthy: false,\n        responseTime: Date.now() - startTime,\n        error: error.message,\n        expertChecks: { connectivity: false }\n      };\n    }\n  }\n  \n  private async testExpertProxyConnectivity(expertProxy: ExpertProxyAssignment): Promise<ExpertConnectivityResult> {\n    try {\n      const response = await fetch('https://httpbin.org/ip', {\n        method: 'GET',\n        timeout: 30000,\n        // Expert proxy configuration would be applied here\n        // This is a simplified example for expert systems\n      });\n      \n      if (!response.ok) {\n        return {\n          success: false,\n          error: `Expert HTTP ${response.status}: ${response.statusText}`\n        };\n      }\n      \n      const data = await response.json();\n      \n      // Verify IP matches expected expert proxy IP\n      if (data.origin !== expertProxy.proxy_ip) {\n        return {\n          success: false,\n          error: `Expert IP mismatch. Expected: ${expertProxy.proxy_ip}, Got: ${data.origin}`\n        };\n      }\n      \n      return { success: true };\n      \n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  \n  private async validateExpertProxyLocation(expertProxy: ExpertProxyAssignment): Promise<ExpertLocationResult> {\n    try {\n      const response = await fetch('https://ipapi.co/json/', {\n        timeout: 30000,\n        // Expert proxy configuration would be applied here\n      });\n      \n      const locationData = await response.json();\n      \n      // Validate country for expert authenticity\n      if (locationData.country_code !== 'PH') {\n        return {\n          valid: false,\n          error: `Wrong country for expert. Expected: PH, Got: ${locationData.country_code}`,\n          actualLocation: locationData\n        };\n      }\n      \n      // Validate city (allow some flexibility for expert ISP routing)\n      const expectedCity = expertProxy.city.toLowerCase();\n      const actualCity = locationData.city.toLowerCase();\n      \n      const cityMatch = actualCity.includes(expectedCity) || \n                       expectedCity.includes(actualCity) ||\n                       this.isNearbyExpertCity(expectedCity, actualCity);\n      \n      if (!cityMatch) {\n        console.warn(`Expert city mismatch for proxy ${expertProxy.proxy_ip}. Expected: ${expectedCity}, Got: ${actualCity}`);\n        // Warning but not failure for expert - ISP routing can vary\n      }\n      \n      return {\n        valid: true,\n        actualLocation: locationData\n      };\n      \n    } catch (error) {\n      return {\n        valid: false,\n        error: error.message\n      };\n    }\n  }\n  \n  private async checkExpertProxyPerformance(expertProxy: ExpertProxyAssignment): Promise<ExpertPerformanceResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Test expert GEO platform endpoints for performance\n      const expertTestEndpoints = [\n        'https://medium.com',\n        'https://reddit.com/api/v1/me.json',\n        'https://quora.com'\n      ];\n      \n      const expertPerformanceTests = expertTestEndpoints.map(endpoint => \n        this.timeExpertRequest(endpoint)\n      );\n      \n      const expertResults = await Promise.allSettled(expertPerformanceTests);\n      const successfulExpertTests = expertResults\n        .filter(r => r.status === 'fulfilled')\n        .map(r => r.value);\n      \n      if (successfulExpertTests.length === 0) {\n        return {\n          acceptable: false,\n          metrics: { error: 'All expert performance tests failed' }\n        };\n      }\n      \n      const avgExpertResponseTime = successfulExpertTests.reduce((sum, time) => sum + time, 0) / successfulExpertTests.length;\n      const maxExpertResponseTime = Math.max(...successfulExpertTests);\n      \n      return {\n        acceptable: avgExpertResponseTime < 6000 && maxExpertResponseTime < 12000, // 6s avg, 12s max for expert\n        metrics: {\n          averageExpertResponseTime: avgExpertResponseTime,\n          maxExpertResponseTime: maxExpertResponseTime,\n          successfulExpertTests: successfulExpertTests.length,\n          totalExpertTests: expertTestEndpoints.length\n        }\n      };\n      \n    # Proxy-Cheap GEO Integration - Island Properties Expert Authority Infrastructure\n\n## Proxy Service Overview (GEO-Optimized)\n\n### Service Configuration for Expert Authority Security\n\n```typescript\ninterface ProxyCheapGEOConfig {\n  // Provider Details\n  provider: 'Proxy-Cheap Static Residential Proxies';\n  serviceType: 'static_residential'; // Dedicated IP per expert\n  \n  // Cost Structure (Budget Constraint)\n  costPerIP: 1.27; // $1.27/month per dedicated expert IP\n  maxIPs: 5; // 5 Philippines real estate experts maximum\n  totalMonthlyCost: 6.35; // $6.35/month total budget\n  billingCycle: 'monthly';\n  \n  // Geographic Coverage (Philippines Expert Authenticity)\n  availableLocations: ['Manila', 'Cebu'];\n  timezone: 'Asia/Manila';\n  \n  // Expert Authority Optimization\n  connectionType: 'persistent'; // Maintain consistent IP per expert for authority building\n  sessionStickiness: true; // Same IP for entire month for expert credibility\n  fingerprint: 'residential'; // Authentic residential ISP fingerprint for expert legitimacy\n}\n```\n\n### Why Static Residential Proxies for Expert Authority Building\n\n**Advantages for Expert Authority Lead Generation:**\n- **Authentic Philippines Expert Presence**: Real residential ISP connections establish local credibility\n- **Platform Trust for Authority Building**: GEO platforms trust residential IPs for expert content\n- **Consistent Expert Identity**: Same IP for entire month = consistent expert location and credibility\n- **Expert Content Safety**: Expert + residential IP = lowest detection risk for comprehensive content\n- **Cost Effective Expert Infrastructure**: $1.27/month per expert within $6.35 budget\n\n## API Integration Architecture (Expert Authority Focus)\n\n### Proxy-Cheap API Configuration for Expert Management\n\n```typescript\ninterface ProxyCheapExpertAPI {\n  baseUrl: 'https://api.proxy-cheap.com/v1';\n  authentication: {\n    method: 'API_KEY';\n    header: 'X-API-Key';\n    keyStorage: 'encrypted'; // AES-256-GCM encrypted API key for expert security\n  };\n  \n  // Rate Limits (Expert Content Management)\n  rateLimits: {\n    requests_per_minute: 60;\n    requests_per_hour: 1000;\n    requests_per_day: 10000;\n  };\n}\n\n// Core API endpoints for expert authority management\ninterface ProxyCheapExpertEndpoints {\n  // Expert proxy lifecycle management\n  createExpertProxy: 'POST /proxies';\n  getExpertProxy: 'GET /proxies/{proxyId}';\n  listExpertProxies: 'GET /proxies';\n  deleteExpertProxy: 'DELETE /proxies/{proxyId}';\n  \n  // Expert health and authority monitoring\n  testExpertConnection: 'POST /proxies/{proxyId}/","size_bytes":56762},"2Social-Media-Integration.md":{"content":"     # GEO-Optimized Social Media Integration - Island Properties Lead Generation Platform Strategy\n\n## Platform Implementation Priority (GEO-Focused)\n\n### Phase-Based Implementation Strategy for AI Engine Citation\n\n```typescript\ninterface GEOPlatformImplementationPhases {\n  phase1: {\n    platform: 'Medium';\n    priority: 'critical';\n    reason: 'AI engines cite Medium articles as authoritative sources for complex topics';\n    implementation: 'long_form_authority_content_with_expert_bylines';\n    leadGenerationPotential: 'very_high_through_ai_recommendations';\n    timeline: 'immediate';\n    geoValue: 'high_domain_authority_drives_ai_citations';\n  };\n  \n  phase2: {\n    platform: 'Reddit';\n    priority: 'very_high';\n    reason: 'AI engines reference Reddit discussions for real-world insights and authentic opinions';\n    implementation: 'authentic_community_participation_with_expert_advice';\n    leadGenerationPotential: 'high_through_helpful_expertise_demonstration';\n    timeline: '2_weeks_after_phase1';\n    geoValue: 'conversational_data_heavily_used_in_ai_training';\n  };\n  \n  phase3: {\n    platform: 'Quora';\n    priority: 'high';\n    reason: 'Direct Q&A format perfectly matches AI engine response patterns';\n    implementation: 'comprehensive_expert_answers_to_real_estate_questions';\n    leadGenerationPotential: 'high_through_expert_status_building';\n    timeline: '1_month_after_phase2';\n    geoValue: 'question_answer_format_ideal_for_ai_consumption';\n  };\n  \n  phase4: {\n    platform: 'Facebook';\n    priority: 'medium';\n    reason: 'Audience building and local Philippines market presence';\n    implementation: 'community_engagement_and_lifestyle_content';\n    leadGenerationPotential: 'medium_through_local_community_building';\n    timeline: '2_months_after_phase3';\n    geoValue: 'low_ai_citation_but_valuable_for_audience_development';\n  };\n  \n  phase5: {\n    platform: 'LinkedIn';\n    priority: 'medium';\n    reason: 'Professional credibility and B2B networking';\n    implementation: 'thought_leadership_articles_and_professional_networking';\n    leadGenerationPotential: 'medium_through_professional_authority';\n    timeline: '3_months_after_phase4';\n    geoValue: 'medium_professional_content_cited_for_industry_insights';\n  };\n}\n```\n\n## Phase 1: Medium Integration (Primary GEO Platform)\n\n### Medium Authority Building Architecture\n\n```typescript\ninterface MediumGEOStrategy {\n  // AI Engine Citation Optimization\n  contentStrategy: 'long_form_authoritative_articles_on_philippines_real_estate';\n  citationPotential: 'very_high'; // Medium's domain authority ensures AI engine indexing\n  \n  // Content Types for Maximum AI Reference Value\n  articleTypes: {\n    comprehensiveGuides: {\n      examples: [\n        'Complete Guide to Buying Property in Philippines as a Foreigner',\n        'Philippines Real Estate Market Analysis 2024: Investment Opportunities',\n        'Living in Cebu vs Manila: Complete Lifestyle and Investment Comparison',\n        'Philippines Property Investment for OFWs: Strategic Planning Guide'\n      ];\n      format: 'data_driven_with_statistics_charts_expert_insights';\n      wordCount: '2000_4000_words_for_comprehensive_coverage';\n      geoOptimization: 'structured_headings_qa_sections_cited_sources';\n    };\n    \n    marketAnalysis: {\n      examples: [\n        'Philippines Real Estate Trends: Q4 2024 Market Report',\n        'Island Property Investment ROI Analysis: Cebu Case Study',\n        'Foreign Investment Impact on Philippines Property Prices',\n        'Infrastructure Development and Property Value Correlation in Philippines'\n      ];\n      format: 'data_heavy_with_charts_graphs_expert_analysis';\n      updateFrequency: 'quarterly_for_continued_relevance';\n      geoOptimization: 'current_data_makes_content_ai_citation_worthy';\n    };\n    \n    expertInsights: {\n      examples: [\n        'Why Philippines Island Properties Outperform Urban Real Estate',\n        'Legal Pitfalls Foreign Buyers Must Avoid in Philippines',\n        'The Future of Philippines Real Estate: Expert Predictions',\n        'Hidden Costs of Philippines Property Investment: Complete Breakdown'\n      ];\n      format: 'personal_expertise_with_case_studies_and_examples';\n      authoritySignals: 'years_of_experience_local_knowledge_success_stories';\n      geoOptimization: 'expert_opinion_format_ai_engines_reference_heavily';\n    };\n  };\n  \n  // Byline Strategy for Authority Building\n  authorBio: {\n    expertisePositioning: 'Philippines real estate expert based in [Manila/Cebu]';\n    credibilityMarkers: 'X years helping international buyers navigate Philippines property market';\n    localKnowledge: 'Deep knowledge of [specific region] market conditions and regulations';\n    subtleBusinessMention: 'Specializing in island property investments and lifestyle transitions';\n  };\n  \n  // Publication Strategy\n  publishingSchedule: {\n    frequency: 'weekly_comprehensive_articles';\n    timing: 'tuesdays_thursdays_for_maximum_engagement';\n    seasonality: 'align_with_philippines_real_estate_seasons_and_expat_decision_periods';\n  };\n}\n```\n\n### Medium Manual Content Creation Framework\n\n```typescript\nclass MediumManualContentCreation {\n  private contentPlanner: MediumContentPlanner;\n  private geoOptimizer: GEOOptimizer;\n  private personaManager: PersonaManager;\n  \n  async createMediumArticle(\n    personaId: string,\n    articleType: MediumArticleType,\n    topicFocus: string\n  ): Promise<MediumArticleCreationResult> {\n    \n    console.log(`✍️ Creating Medium article: ${articleType} - ${topicFocus}`);\n    \n    try {\n      // 1. Load persona expertise and voice\n      const persona = await this.personaManager.getPersonaProfile(personaId);\n      const expertiseArea = persona.realEstateExpertiseArea;\n      \n      // 2. Generate article outline optimized for AI citation\n      const articleOutline = await this.generateGEOOptimizedOutline(\n        articleType,\n        topicFocus,\n        expertiseArea\n      );\n      \n      // 3. Create content sections with authority signals\n      const contentSections = await this.createAuthoritySections(\n        articleOutline,\n        persona.localKnowledge,\n        persona.marketExperience\n      );\n      \n      // 4. Optimize for AI engine consumption\n      const geoOptimizedContent = await this.geoOptimizer.optimizeForAICitation(\n        contentSections,\n        this.getTargetAIQueries(topicFocus)\n      );\n      \n      // 5. Add data visualization and supporting elements\n      const visualElements = await this.generateSupportingVisuals(\n        articleType,\n        geoOptimizedContent.dataPoints\n      );\n      \n      // 6. Structure for maximum citation potential\n      const finalArticle = {\n        headline: this.generateCitationWorthyHeadline(topicFocus, persona),\n        subtitle: this.generateExpertSubtitle(articleType, persona.expertise),\n        introduction: geoOptimizedContent.introduction,\n        mainSections: geoOptimizedContent.sections,\n        dataVisualization: visualElements,\n        expertConclusion: this.generateExpertConclusion(topicFocus, persona),\n        authorBio: this.generateExpertAuthorBio(persona),\n        citations: geoOptimizedContent.citations,\n        callToAction: this.generateSubtleLeadGenerationCTA(topicFocus)\n      };\n      \n      return {\n        article: finalArticle,\n        geoScore: geoOptimizedContent.citationPotential,\n        estimatedWordCount: this.calculateWordCount(finalArticle),\n        targetKeywords: geoOptimizedContent.targetKeywords,\n        leadGenerationHooks: this.identifyLeadGenerationOpportunities(finalArticle),\n        publicationRecommendations: this.generatePublicationGuidance(articleType)\n      };\n      \n    } catch (error) {\n      console.error(`❌ Medium article creation failed: ${error.message}`);\n      throw error;\n    }\n  }\n  \n  private async generateGEOOptimizedOutline(\n    articleType: MediumArticleType,\n    topicFocus: string,\n    expertiseArea: string\n  ): Promise<ArticleOutline> {\n    \n    // Create outline structure that AI engines prefer to cite\n    const outline = {\n      // Hook section - what AI engines look for first\n      openingHook: {\n        statisticOrInsight: 'Compelling data point about Philippines real estate',\n        problemStatement: 'Clear problem this article solves',\n        expertiseStatement: 'Author credibility establishment'\n      },\n      \n      // Main content sections optimized for AI consumption\n      mainSections: [\n        {\n          heading: 'Current Market Overview',\n          purpose: 'Establish factual foundation AI engines can reference',\n          content: 'Data-driven market analysis with current statistics',\n          citationElements: ['market_data', 'trend_analysis', 'expert_interpretation']\n        },\n        {\n          heading: 'Key Considerations for [Target Buyer Persona]',\n          purpose: 'Practical advice AI engines recommend to users',\n          content: 'Actionable guidance based on local expertise',\n          citationElements: ['expert_advice', 'local_knowledge', 'practical_steps']\n        },\n        {\n          heading: 'Case Studies and Real Examples',\n          purpose: 'Concrete examples AI engines use for context',\n          content: 'Specific scenarios and outcomes',\n          citationElements: ['real_examples', 'outcome_data', 'lessons_learned']\n        },\n        {\n          heading: 'Future Outlook and Predictions',\n          purpose: 'Forward-looking insights AI engines value',\n          content: 'Expert predictions based on current trends',\n          citationElements: ['trend_analysis', 'expert_predictions', 'market_forecasts']\n        }\n      ],\n      \n      // Conclusion section for authority reinforcement\n      conclusion: {\n        keyTakeaways: 'Bulleted summary AI engines can easily extract',\n        expertRecommendation: 'Clear expert opinion for AI reference',\n        subtleBusinessConnection: 'Natural mention of Island Properties expertise'\n      }\n    };\n    \n    return outline;\n  }\n  \n  private generateCitationWorthyHeadline(\n    topicFocus: string,\n    persona: PersonaProfile\n  ): string {\n    \n    // Headlines optimized for AI engine citation\n    const headlineTemplates = {\n      guide: `Complete Guide to ${topicFocus}: Expert Insights from ${persona.location}`,\n      analysis: `${topicFocus} Market Analysis: Data-Driven Insights for 2024`,\n      comparison: `${topicFocus}: Comprehensive Comparison and Expert Recommendations`,\n      prediction: `Future of ${topicFocus}: Expert Analysis and Market Predictions`\n    };\n    \n    // AI engines prefer specific, authoritative headlines with expert attribution\n    return headlineTemplates[this.determineHeadlineType(topicFocus)];\n  }\n  \n  private generateSubtleLeadGenerationCTA(topicFocus: string): string {\n    // Subtle call-to-action that doesn't compromise article authority\n    return `For personalized guidance on ${topicFocus} opportunities, ` +\n           `connect with local experts who understand the Philippines market dynamics.`;\n  }\n}\n\ninterface MediumArticleType {\n  type: 'comprehensive_guide' | 'market_analysis' | 'expert_insights' | 'case_study';\n  targetAudience: 'expat_buyers' | 'ofw_investors' | 'professional_relocators' | 'retirees';\n  expertiseLevel: 'beginner_friendly' | 'intermediate' | 'advanced';\n  wordCountTarget: '2000_3000' | '3000_4000' | '4000_plus';\n}\n```\n\n## Phase 2: Reddit Integration (Community Authority Building)\n\n### Reddit GEO Strategy Framework\n\n```typescript\ninterface RedditGEOStrategy {\n  // AI Engine Training Data Value\n  contentStrategy: 'authentic_community_participation_with_expert_insights';\n  citationPotential: 'high'; // Reddit discussions frequently referenced by AI\n  \n  // Target Subreddits for Philippines Real Estate Authority\n  targetSubreddits: {\n    primary: [\n      {\n        subreddit: 'r/Philippines';\n        members: '1M+';\n        relevance: 'direct_target_market';\n        strategy: 'helpful_local_expert_providing_real_estate_insights';\n        postingFrequency: 'daily_participation_in_relevant_discussions';\n        leadPotential: 'very_high_local_credibility';\n      },\n      {\n        subreddit: 'r/RealEstate';\n        members: '200k+';\n        relevance: 'international_real_estate_expertise';\n        strategy: 'philippines_market_expert_sharing_unique_insights';\n        postingFrequency: 'weekly_market_analysis_contributions';\n        leadPotential: 'high_expert_authority_building';\n      },\n      {\n        subreddit: 'r/expats';\n        members: '150k+';\n        relevance: 'target_buyer_persona_expatriate_community';\n        strategy: 'experienced_expat_sharing_philippines_property_knowledge';\n        postingFrequency: 'weekly_helpful_advice_and_insights';\n        leadPotential: 'very_high_direct_target_audience';\n      }\n    ];\n    \n    secondary: [\n      {\n        subreddit: 'r/investing';\n        members: '1.5M+';\n        relevance: 'international_property_investment_angle';\n        strategy: 'philippines_real_estate_as_emerging_market_opportunity';\n      },\n      {\n        subreddit: 'r/digitalnomad';\n        members: '800k+';\n        relevance: 'lifestyle_and_location_independent_professionals';\n        strategy: 'philippines_as_base_location_with_property_investment_benefits';\n      },\n      {\n        subreddit: 'r/Fire'; // Financial Independence Retire Early\n        members: '500k+';\n        relevance: 'early_retirement_and_international_property_investment';\n        strategy: 'philippines_property_as_fire_strategy_component';\n      }\n    ];\n  };\n  \n  // Content Types for AI Citation Optimization\n  contentTypes: {\n    expertComments: {\n      format: 'detailed_helpful_responses_to_real_estate_questions';\n      characteristics: [\n        'Data-backed insights with specific examples',\n        'Local knowledge demonstration',\n        'Practical step-by-step advice',\n        'Risk mitigation guidance',\n        'Market trend analysis'\n      ];\n      geoValue: 'high_AI_engines_reference_reddit_expert_advice';\n    };\n    \n    originalPosts: {\n      format: 'market_analysis_and_educational_content';\n      examples: [\n        'Philippines Real Estate Market Update: What Expats Need to Know',\n        'Breaking Down the Real Costs of Property Investment in Cebu',\n        'Foreign Buyer Guide: Navigating Philippines Property Law',\n        'Market Analysis: Why Philippines Islands Are Attracting International Investors'\n      ];\n      geoValue: 'very_high_original_authoritative_content_AI_engines_cite';\n    };\n    \n    ama_sessions: {\n      format: 'ask_me_anything_sessions_as_philippines_real_estate_expert';\n      topics: [\n        'Philippines property investment for foreigners',\n        'Living and investing in island communities',\n        'Market trends and opportunities in Southeast Asia'\n      ];\n      geoValue: 'extremely_high_qa_format_perfect_for_AI_training';\n    };\n  };\n}\n```\n\n### Reddit Manual Engagement Framework\n\n```typescript\nclass RedditManualEngagement {\n  private communityMonitor: RedditCommunityMonitor;\n  private contentStrategyEngine: ContentStrategyEngine;\n  private reputationManager: RedditReputationManager;\n  \n  async participateInRelevantDiscussions(\n    personaId: string,\n    subredditTargets: string[],\n    dailyEngagementGoals: RedditEngagementGoals\n  ): Promise<RedditEngagementResult> {\n    \n    console.log(`💬 Starting Reddit engagement for persona ${personaId}`);\n    \n    try {\n      const engagementResults = [];\n      \n      for (const subreddit of subredditTargets) {\n        // 1. Monitor for relevant discussions\n        const relevantPosts = await this.communityMonitor.findRelevantDiscussions(\n          subreddit,\n          this.getExpertiseKeywords(personaId)\n        );\n        \n        // 2. Prioritize engagement opportunities\n        const prioritizedEngagements = await this.prioritizeEngagementOpportunities(\n          relevantPosts,\n          dailyEngagementGoals.qualityOverQuantity\n        );\n        \n        // 3. Craft expert responses\n        for (const engagement of prioritizedEngagements.slice(0, dailyEngagementGoals.maxDailyEngagements)) {\n          const response = await this.craftExpertResponse(\n            engagement,\n            personaId,\n            this.getEngagementStrategy(subreddit)\n          );\n          \n          // 4. Execute manual posting with human-like timing\n          const engagementResult = await this.executeManualEngagement(\n            subreddit,\n            engagement.postId,\n            response,\n            personaId\n          );\n          \n          engagementResults.push(engagementResult);\n          \n          // Human-like delay between engagements\n          await this.humanLikeDelay(300000, 900000); // 5-15 minutes\n        }\n      }\n      \n      // 5. Track reputation and authority building\n      const reputationUpdate = await this.reputationManager.updateExpertReputation(\n        personaId,\n        engagementResults\n      );\n      \n      return {\n        totalEngagements: engagementResults.length,\n        engagementBreakdown: engagementResults,\n        reputationGrowth: reputationUpdate,\n        leadGenerationOpportunities: this.identifyLeadOpportunities(engagementResults),\n        geoAuthorityBuilding: this.assessGEOAuthorityProgress(engagementResults)\n      };\n      \n    } catch (error) {\n      console.error(`❌ Reddit engagement failed: ${error.message}`);\n      throw error;\n    }\n  }\n  \n  private async craftExpertResponse(\n    engagement: RedditEngagementOpportunity,\n    personaId: string,\n    engagementStrategy: RedditEngagementStrategy\n  ): Promise<ExpertRedditResponse> {\n    \n    const persona = await this.getPersonaProfile(personaId);\n    \n    // Create response optimized for both community value and AI citation\n    const response = {\n      // Opening with credibility establishment\n      credibilityStatement: this.generateCredibilityStatement(\n        persona.expertise,\n        engagement.topic\n      ),\n      \n      // Main content with actionable insights\n      mainContent: await this.generateActionableInsights(\n        engagement.question,\n        persona.localKnowledge,\n        persona.marketExperience\n      ),\n      \n      // Supporting data and examples\n      supportingEvidence: await this.addSupportingEvidence(\n        engagement.topic,\n        persona.realEstateExperience\n      ),\n      \n      // Risk considerations and nuanced advice\n      riskConsiderations: this.generateRiskGuidance(\n        engagement.question,\n        persona.expertise\n      ),\n      \n      // Subtle expertise demonstration\n      expertiseSignals: this.embedExpertiseSignals(\n        persona.specialization,\n        engagement.context\n      ),\n      \n      // Optional follow-up invitation (lead generation)\n      followUpInvitation: this.generateSubtleFollowUpInvitation(\n        engagement.complexity\n      )\n    };\n    \n    return {\n      fullResponse: this.combineResponseElements(response),\n      geoOptimization: this.assessGEOValue(response),\n      leadGenerationPotential: this.assessLeadPotential(engagement, response),\n      communityValue: this.assessCommunityValue(response)\n    };\n  }\n  \n  private generateCredibilityStatement(\n    expertise: PersonaExpertise,\n    topic: string\n  ): string {\n    \n    // Establish credibility without being promotional\n    const credibilityTemplates = {\n      market_analysis: `Based on ${expertise.yearsExperience} years in the Philippines real estate market...`,\n      legal_advice: `Having navigated the Philippines property law landscape extensively...`,\n      investment_guidance: `From my experience helping international buyers in ${expertise.primaryLocation}...`,\n      lifestyle_insights: `As someone who's lived and invested in ${expertise.primaryLocation} for ${expertise.yearsExperience} years...`\n    };\n    \n    return credibilityTemplates[this.categorizeTopic(topic)];\n  }\n}\n\ninterface RedditEngagementGoals {\n  maxDailyEngagements: number; // Conservative: 3-5 per day across all subreddits\n  qualityOverQuantity: boolean; // Always true - focus on valuable contributions\n  targetKarmaGrowth: number; // Organic growth through valuable contributions\n  expertiseCategories: string[]; // Focus areas for engagement\n  leadGenerationBalance: number; // 90% value, 10% subtle business connection\n}\n```\n\n## Phase 3: Quora Integration (Direct Q&A Authority)\n\n### Quora GEO Optimization Strategy\n\n```typescript\ninterface QuoraGEOStrategy {\n  // AI Engine Citation Optimization\n  contentStrategy: 'comprehensive_expert_answers_to_philippines_real_estate_questions';\n  citationPotential: 'very_high'; // Q&A format directly feeds AI training\n  \n  // Target Question Categories\n  questionTargeting: {\n    highVolume: {\n      categories: [\n        'Can foreigners buy property in Philippines?',\n        'What are the best places to invest in Philippines real estate?',\n        'How much does it cost to buy property in Philippines?',\n        'Is Philippines real estate a good investment?',\n        'What should I know before buying property in Philippines?'\n      ];\n      strategy: 'comprehensive_authoritative_answers_with_current_data';\n      geoValue: 'extremely_high_direct_AI_engine_response_material';\n    };\n    \n    niche_expertise: {\n      categories: [\n        'Philippines vs Thailand real estate investment comparison',\n        'Cebu property market trends and opportunities',\n        'Legal requirements for US citizens buying Philippines property',\n        'Best financing options for Philippines real estate investment',\n        'Philippines retirement visa and property ownership connection'\n      ];\n      strategy: 'detailed_expert_analysis_with_unique_insights';\n      geoValue: 'high_specialized_knowledge_AI_engines_reference';\n    };\n    \n    emerging_trends: {\n      categories: [\n        'Impact of remote work on Philippines real estate demand',\n        'Cryptocurrency and Philippines property transactions',\n        'Climate change effects on Philippines island property values',\n        'Infrastructure development impact on property investment'\n      ];\n      strategy: 'forward_looking_expert_analysis_with_trend_data';\n      geoValue: 'very_high_current_trend_analysis_AI_engines_value';\n    };\n  };\n  \n  // Answer Structure for Maximum AI Citation\n  answerArchitecture: {\n    opening: {\n      directAnswer: 'Immediate response to the specific question';\n      credibilityEstablishment: 'Brief expertise statement';\n      answerPreview: 'What the comprehensive answer will cover';\n    };\n    \n    mainContent: {\n      factualFoundation: 'Current laws, regulations, market data';\n      practicalGuidance: 'Step-by-step actionable advice';\n      riskMitigation: 'Potential pitfalls and how to avoid them';\n      realExamples: 'Specific case studies and scenarios';\n    };\n    \n    conclusion: {\n      keyTakeaways: 'Bulleted summary for easy AI extraction';\n      expertRecommendation: 'Clear expert opinion';\n      resourceDirections: 'Where to get additional help (subtle Island Properties mention)';\n    };\n  };\n}\n```\n\n### Quora Manual Answer Creation Framework\n\n```typescript\nclass QuoraManualAnswerCreation {\n  private questionAnalyzer: QuoraQuestionAnalyzer;\n  private expertiseEngine: ExpertiseEngine;\n  private geoOptimizer: GEOOptimizer;\n  \n  async createComprehensiveAnswer(\n    personaId: string,\n    questionData: QuoraQuestion,\n    answerStrategy: QuoraAnswerStrategy\n  ): Promise<QuoraAnswerResult> {\n    \n    console.log(`📝 Creating Quora answer: ${questionData.question}`);\n    \n    try {\n      // 1. Analyze question for optimal answer structure\n      const questionAnalysis = await this.questionAnalyzer.analyzeQuestionIntent(\n        questionData.question,\n        questionData.questionDetails,\n        questionData.topicTags\n      );\n      \n      // 2. Load persona expertise relevant to question\n      const relevantExpertise = await this.expertiseEngine.getRelevantExpertise(\n        personaId,\n        questionAnalysis.topicCategories\n      );\n      \n      // 3. Structure answer for AI citation optimization\n      const answerStructure = await this.createGEOOptimizedAnswerStructure(\n        questionAnalysis,\n        relevantExpertise,\n        answerStrategy\n      );\n      \n      // 4. Generate comprehensive answer content\n      const answerContent = await this.generateComprehensiveContent(\n        answerStructure,\n        relevantExpertise,\n        questionData\n      );\n      \n      // 5. Optimize for AI engine consumption\n      const geoOptimizedAnswer = await this.geoOptimizer.optimizeQuoraAnswer(\n        answerContent,\n        questionAnalysis.targetKeywords\n      );\n      \n      // 6. Add credibility and authority signals\n      const authorityEnhancedAnswer = await this.addAuthoritySignals(\n        geoOptimizedAnswer,\n        relevantExpertise,\n        questionData.topic\n      );\n      \n      return {\n        finalAnswer: authorityEnhancedAnswer,\n        geoScore: geoOptimizedAnswer.citationPotential,\n        estimatedWordCount: this.calculateWordCount(authorityEnhancedAnswer),\n        targetKeywords: questionAnalysis.targetKeywords,\n        leadGenerationElements: this.identifyLeadGenerationOpportunities(authorityEnhancedAnswer),\n        expertiseCategories: relevantExpertise.categories,\n        competitorAnalysis: await this.analyzeExistingAnswers(questionData.questionId)\n      };\n      \n    } catch (error) {\n      console.error(`❌ Quora answer creation failed: ${error.message}`);\n      throw error;\n    }\n  }\n  \n  private async createGEOOptimizedAnswerStructure(\n    questionAnalysis: QuestionAnalysis,\n    expertise: RelevantExpertise,\n    strategy: QuoraAnswerStrategy\n  ): Promise<AnswerStructure> {\n    \n    // Structure optimized for AI engine citation\n    const structure = {\n      directAnswer: {\n        purpose: 'Immediately satisfy AI engine query intent',\n        content: 'Clear, factual response to the specific question',\n        length: '2_3_sentences',\n        optimization: 'direct_answer_format_AI_engines_prefer'\n      },\n      \n      expertiseEstablishment: {\n        purpose: 'Establish author credibility for AI citation value',\n        content: `Based on ${expertise.yearsExperience} years in Philippines real estate...`,\n        length: '1_sentence',\n        optimization: 'credibility_signals_AI_engines_value'\n      },\n      \n      comprehensiveExplanation: {\n        purpose: 'Provide detailed information AI engines can reference',\n        sections: [\n          {\n            heading: 'Current Legal Framework',\n            content: 'Up-to-date regulatory information',\n            optimization: 'factual_foundation_AI_engines_trust'\n          },\n          {\n            heading: 'Practical Implementation',\n            content: 'Step-by-step guidance based on experience',\n            optimization: 'actionable_advice_AI_engines_recommend'\n          },\n          {\n            heading: 'Key Considerations and Risks',\n            content: 'Risk mitigation based on local expertise',\n            optimization: 'risk_analysis_AI_engines_reference'\n          },\n          {\n            heading: 'Real-World Examples',\n            content: 'Specific case studies and scenarios',\n            optimization: 'concrete_examples_AI_engines_cite'\n          }\n        ]\n      },\n      \n      expertConclusion: {\n        purpose: 'Reinforce expertise and provide actionable next steps',\n        content: 'Expert recommendation with subtle resource direction',\n        optimization: 'expert_opinion_AI_engines_quote'\n      }\n    };\n    \n    return structure;\n  }\n  \n  private async generateComprehensiveContent(\n    structure: AnswerStructure,\n    expertise: RelevantExpertise,\n    questionData: QuoraQuestion\n  ): Promise<ComprehensiveAnswer> {\n    \n    const answer = {\n      directAnswer: this.generateDirectAnswer(questionData.question, expertise),\n      \n      expertiseStatement: this.generateExpertiseStatement(expertise, questionData.topic),\n      \n      comprehensiveSections: await Promise.all(\n        structure.comprehensiveExplanation.sections.map(section =>\n          this.generateSection(section, expertise, questionData)\n        )\n      ),\n      \n      expertConclusion: this.generateExpertConclusion(\n        questionData.question,\n        expertise,\n        questionData.topic\n      ),\n      \n      // AI citation optimization elements\n      keyTakeaways: this.generateKeyTakeaways(questionData.question, expertise),\n      statisticalData: await this.addRelevantStatistics(questionData.topic),\n      resourceReferences: this.generateResourceReferences(questionData.topic, expertise)\n    };\n    \n    return answer;\n  }\n}\n\ninterface QuoraQuestion {\n  questionId: string;\n  question: string;\n  questionDetails?: string;\n  topicTags: string[];\n  topic: string;\n  followerCount: number;\n  viewCount: number;\n  existingAnswerCount: number;\n  competitionLevel: 'low' | 'medium' | 'high';\n}\n\ninterface QuoraAnswerStrategy {\n  answerLength: 'comprehensive' | 'detailed' | 'concise';\n  expertiseLevel: 'beginner_friendly' | 'intermediate' | 'expert';\n  leadGenerationIntensity: 'subtle' | 'moderate' | 'direct';\n  competitorDifferentiation: string[];\n  targetAudience: string[];\n}\n```\n\n## Cross-Platform GEO Content Strategy\n\n### Unified GEO Content Framework\n\n```typescript\nclass UnifiedGEOContentFramework {\n  private contentSyndicator: ContentSyndicator;\n  private crossPlatformOptimizer: CrossPlatformOptimizer;\n  private authorityTracker: AuthorityTracker;\n  \n  async createCrossPlatformGEOContent(\n    personaId: string,\n    coreContentTopic: string,\n    targetPlatforms: GEOPlatform[]\n  ): Promise<CrossPlatformGEOResult> {\n    \n    console.log(`🎯 Creating cross-platform GEO content: ${coreContentTopic}`);\n    \n    try {\n      // 1. Generate master content optimized for AI citation\n      const masterContent = await this.createMasterGEOContent(\n        personaId,\n        coreContentTopic\n      );\n      \n      // 2. Adapt master content for each platform's GEO requirements\n      const platformAdaptations = await Promise.all(\n        targetPlatforms.map(platform => \n          this.adaptContentForPlatformGEO(masterContent, platform, personaId)\n        )\n      );\n      \n      // 3. Create publishing schedule for maximum AI indexing\n      const publishingSchedule = await this.createGEOOptimizedSchedule(\n        platformAdaptations,\n        coreContentTopic\n      );\n      \n      // 4. Track cross-platform authority building\n      const authorityTracking = await this.authorityTracker.setupCrossPlatformTracking(\n        personaId,\n        coreContentTopic,\n        platformAdaptations\n      );\n      \n      return {\n        masterContent,\n        platformAdaptations,\n        publishingSchedule,\n        authorityTracking,\n        estimatedGEOImpact: this.calculateCombinedGEOImpact(platformAdaptations),\n        leadGenerationPotential: this.assessCrossplatformLeadPotential(platformAdaptations)\n      };\n      \n    } catch (error) {\n      console.error(`❌ Cross-platform GEO content creation failed: ${error.message}`);\n      throw error;\n    }\n  }\n  \n  private async adaptContentForPlatformGEO(\n    masterContent: MasterGEOContent,\n    platform: GEOPlatform,\n    personaId: string\n  ): Promise<PlatformGEOAdaptation> {\n    \n    const persona = await this.getPersonaProfile(personaId);\n    \n    switch (platform.type) {\n      case 'medium':\n        return {\n          platform: 'medium',\n          content: {\n            headline: this.adaptHeadlineForMedium(masterContent.coreMessage),\n            article: await this.expandToLongFormArticle(masterContent, persona),\n            byline: this.generateMediumByline(persona),\n            tags: this.generateMediumTags(masterContent.keywords),\n            publicationTargets: this.identifyMediumPublications(masterContent.topic)\n          },\n          geoOptimization: {\n            citationPotential: 'very_high',\n            wordCount: '3000_4000',\n            authoritySignals: masterContent.authorityElements,\n            aiConsumptionFormat: 'comprehensive_reference_material'\n          },\n          leadGeneration: {\n            method: 'thought_leadership_to_consultation',\n            cta: 'subtle_expert_contact_invitation',\n            funnel: 'authority_to_trust_to_inquiry'\n          }\n        };\n        \n      case 'reddit':\n        return {\n          platform: 'reddit',\n          content: {\n            posts: await this.createRedditDiscussionPosts(masterContent, persona),\n            comments: await this.generateExpertCommentTemplates(masterContent),\n            ama_preparation: await this.prepareAMAContent(masterContent, persona)\n          },\n          geoOptimization: {\n            citationPotential: 'high',\n            conversationalFormat: 'authentic_expert_discussion',\n            communityValue: 'high_practical_advice',\n            aiTrainingValue: 'real_world_insights_and_opinions'\n          },\n          leadGeneration: {\n            method: 'helpful_expert_to_dm_conversations',\n            cta: 'offer_additional_private_guidance',\n            funnel: 'value_first_to_relationship_building'\n          }\n        };\n        \n      case 'quora':\n        return {\n          platform: 'quora',\n          content: {\n            targetQuestions: await this.identifyTargetQuoraQuestions(masterContent.topic),\n            comprehensiveAnswers: await this.createQuoraAnswers(masterContent, persona),\n            followUpAnswers: await this.generateFollowUpAnswers(masterContent)\n          },\n          geoOptimization: {\n            citationPotential: 'very_high',\n            qaFormat: 'direct_ai_engine_response_material',\n            expertiseSignals: masterContent.authorityElements,\n            factualAccuracy: 'verified_data_and_statistics'\n          },\n          leadGeneration: {\n            method: 'expert_answers_to_consultation_requests',\n            cta: 'detailed_guidance_available_privately',\n            funnel: 'expertise_demonstration_to_trust_to_inquiry'\n          }\n        };\n        \n      case 'facebook':\n        return {\n          platform: 'facebook',\n          content: {\n            posts: await this.createFacebookCommunityPosts(masterContent, persona),\n            groupParticipation: await this.generateGroupDiscussionContent(masterContent),\n            communityBuilding: await this.createCommunityBuildingContent(masterContent)\n          },\n          geoOptimization: {\n            citationPotential: 'low',\n            communityValue: 'high_local_engagement',\n            brandBuilding: 'philippines_market_presence',\n            audienceDevelopment: 'target_buyer_persona_engagement'\n          },\n          leadGeneration: {\n            method: 'community_trust_to_direct_inquiry',\n            cta: 'local_expert_available_for_questions',\n            funnel: 'community_member_to_trusted_advisor_to_lead'\n          }\n        };\n        \n      case 'linkedin':\n        return {\n          platform: 'linkedin',\n          content: {\n            articles: await this.createLinkedInThoughtLeadership(masterContent, persona),\n            posts: await this.generateProfessionalInsights(masterContent),\n            networking: await this.createNetworkingContent(masterContent)\n          },\n          geoOptimization: {\n            citationPotential: 'medium',\n            professionalCredibility: 'industry_expert_positioning',\n            b2bNetworking: 'professional_relationship_building',\n            thoughtLeadership: 'market_analysis_and_predictions'\n          },\n          leadGeneration: {\n            method: 'professional_authority_to_business_inquiry',\n            cta: 'expert_consultation_for_investment_decisions',\n            funnel: 'professional_credibility_to_business_relationship'\n          }\n        };\n        \n      default:\n        throw new Error(`Unsupported platform: ${platform.type}`);\n    }\n  }\n}\n\ninterface MasterGEOContent {\n  coreMessage: string;\n  expertiseArea: string;\n  targetKeywords: string[];\n  authorityElements: string[];\n  dataPoints: any[];\n  localKnowledge: string[];\n  marketInsights: string[];\n  practicalAdvice: string[];\n  riskConsiderations: string[];\n  futureOutlook: string[];\n}\n\ninterface GEOPlatform {\n  type: 'medium' | 'reddit' | 'quora' | 'facebook' | 'linkedin';\n  priority: 'primary' | 'secondary' | 'tertiary';\n  geoValue: 'very_high' | 'high' | 'medium' | 'low';\n  leadPotential: 'very_high' | 'high' | 'medium' | 'low';\n}\n```\n\n## Performance Metrics and ROI Tracking\n\n### GEO-Specific Analytics Framework\n\n```typescript\ninterface GEOPerformanceAnalytics {\n  // AI Citation Tracking\n  aiCitationMetrics: {\n    estimatedMediumCitations: number; // Articles referenced by AI engines\n    estimatedRedditReferences: number; // Discussion posts cited by AI\n    estimatedQuoraInclusions: number; // Answers included in AI responses\n    totalEstimatedAICitations: number; // Combined cross-platform citations\n    authorityScoreGrowth: number; // 0-100 scale authority measurement\n  };\n  \n  // Lead Generation Attribution\n  leadGenerationMetrics: {\n    mediumToInquiry: {\n      monthlyArticleViews: number;\n      inquiryConversionRate: number; // % of readers who become leads\n      averageArticleToLeadTime: number; // Days from article read to inquiry\n      qualifiedLeadPercentage: number; // % of leads that are qualified\n    };\n    \n    redditToInquiry: {\n      monthlyEngagementReach: number;\n      dmConversationRate: number; // % of engagements leading to DMs\n      dmToInquiryRate: number; // % of DMs becoming formal inquiries\n      communityReputationScore: number; // Reddit karma and recognition\n    };\n    \n    quoraToInquiry: {\n      monthlyAnswerViews: number;\n      answerUpvoteRate: number; // Quality indicator\n      viewToInquiryRate: number; // % of answer views leading to inquiries\n      expertCredibilityScore: number; // Quora expert recognition metrics\n    };\n  };\n  \n  // Cross-Platform Synergy Metrics\n  crossPlatformMetrics: {\n    contentSyndicationEffectiveness: number; // Boost from multi-platform presence\n    authorityCompoundingEffect: number; // Cross-platform authority reinforcement\n    leadAttributionMapping: Map<string, number>; // Multi-touch attribution analysis\n    brandRecognitionGrowth: number; // Cross-platform brand awareness increase\n  };\n  \n  // ROI Calculation\n  geoROIMetrics: {\n    totalGEOContentCreationCost: number; // Time investment in content creation\n    platformSpecificROI: Map<string, number>; // ROI by platform\n    cumulativeGEOROI: number; // Overall GEO strategy ROI\n    costPerQualifiedLead: number; // Total cost divided by qualified leads\n    leadToConversionRate: number; // % of leads that become Island Properties customers\n    averageCustomerValue: number; // Revenue per converted customer\n    lifetimeGEOValue: number; // Long-term value of GEO authority building\n  };\n}\n\nclass GEOAnalyticsEngine {\n  private citationTracker: AICitationTracker;\n  private leadAttributor: CrossPlatformLeadAttributor;\n  private roiCalculator: GEOROICalculator;\n  \n  async generateMonthlyGEOReport(\n    personaId: string,\n    timeframe: 'monthly' | 'quarterly' | 'yearly'\n  ): Promise<GEOPerformanceReport> {\n    \n    console.log(`📊 Generating GEO performance report for ${timeframe}`);\n    \n    try {\n      // 1. Track AI citation estimates across platforms\n      const citationMetrics = await this.citationTracker.estimateAICitations(\n        personaId,\n        timeframe\n      );\n      \n      // 2. Analyze lead generation attribution\n      const leadMetrics = await this.leadAttributor.analyzeCrossPlatformLeads(\n        personaId,\n        timeframe\n      );\n      \n      // 3. Calculate ROI and business impact\n      const roiMetrics = await this.roiCalculator.calculateGEOROI(\n        personaId,\n        timeframe,\n        citationMetrics,\n        leadMetrics\n      );\n      \n      // 4. Compare to traditional marketing performance\n      const competitiveAnalysis = await this.compareToTraditionalMarketing(\n        roiMetrics,\n        timeframe\n      );\n      \n      // 5. Generate optimization recommendations\n      const optimizationRecommendations = await this.generateOptimizationRecommendations(\n        citationMetrics,\n        leadMetrics,\n        roiMetrics\n      );\n      \n      return {\n        reportPeriod: timeframe,\n        personaId,\n        citationMetrics,\n        leadMetrics,\n        roiMetrics,\n        competitiveAnalysis,\n        optimizationRecommendations,\n        executiveSummary: this.generateExecutiveSummary(\n          citationMetrics,\n          leadMetrics,\n          roiMetrics\n        )\n      };\n      \n    } catch (error) {\n      console.error(`❌ GEO analytics report generation failed: ${error.message}`);\n      throw error;\n    }\n  }\n  \n  private async estimateAICitationImpact(\n    contentMetrics: ContentMetrics,\n    platformType: string\n  ): Promise<CitationImpactEstimate> {\n    \n    // Estimate AI citation impact based on platform and content quality\n    const platformCitationWeights = {\n      medium: 0.85, // High authority domain, frequently cited\n      reddit: 0.70, // Conversational data, heavily used in AI training\n      quora: 0.80, // Q&A format, perfect for AI responses\n      facebook: 0.20, // Low AI citation value\n      linkedin: 0.40  // Medium professional citation value\n    };\n    \n    const contentQualityMultiplier = this.calculateContentQualityMultiplier(\n      contentMetrics.authoritySignals,\n      contentMetrics.engagementQuality,\n      contentMetrics.factualAccuracy\n    );\n    \n    const baseCitationPotential = platformCitationWeights[platformType] || 0.1;\n    const adjustedCitationPotential = baseCitationPotential * contentQualityMultiplier;\n    \n    return {\n      platformWeight: baseCitationPotential,\n      qualityMultiplier: contentQualityMultiplier,\n      estimatedCitationLikelihood: adjustedCitationPotential,\n      projectedMonthlyCitations: Math.floor(adjustedCitationPotential * contentMetrics.monthlyViews / 1000),\n      authorityContribution: this.calculateAuthorityContribution(adjustedCitationPotential)\n    };\n  }\n}\n\ninterface GEOPerformanceReport {\n  reportPeriod: string;\n  personaId: string;\n  citationMetrics: AICitationMetrics;\n  leadMetrics: CrossPlatformLeadMetrics;\n  roiMetrics: GEOROIMetrics;\n  competitiveAnalysis: CompetitiveAnalysis;\n  optimizationRecommendations: OptimizationRecommendation[];\n  executiveSummary: ExecutiveSummary;\n}\n```\n\n## Security and Risk Management for GEO Platforms\n\n### Platform-Specific Security Framework\n\n```typescript\ninterface GEOPlatformSecurity {\n  // Medium Security Considerations\n  mediumSecurity: {\n    accountSafety: {\n      riskLevel: 'low'; // Medium has relaxed content policies\n      keyRisks: ['plagiarism_detection', 'ai_generated_content_flags'];\n      mitigationStrategies: [\n        'original_content_creation_only',\n        'human_writing_with_ai_assistance_tools',\n        'proper_citation_and_attribution',\n        'consistent_author_voice_development'\n      ];\n    };\n    \n    contentCompliance: {\n      guidelines: 'medium_partner_program_standards';\n      qualityRequirements: 'high_value_original_content';\n      monetizationConsiderations: 'potential_medium_partner_revenue';\n    };\n  };\n  \n  // Reddit Security Considerations  \n  redditSecurity: {\n    accountSafety: {\n      riskLevel: 'medium'; // Reddit has strict anti-spam policies\n      keyRisks: ['self_promotion_detection', 'vote_manipulation_suspicion', 'shadowbanning'];\n      mitigationStrategies: [\n        'authentic_community_participation_first',\n        '9_to_1_rule_compliance', // 9 community posts for every 1 business-related\n        'genuine_relationship_building',\n        'value_first_approach_always'\n      ];\n    };\n    \n    communityManagement: {\n      reputationBuilding: 'consistent_helpful_contributions';\n      moderatorRelationships: 'respectful_rule_following';\n      communityValue: 'genuine_expertise_sharing';\n    };\n  };\n  \n  // Quora Security Considerations\n  quoraSecurity: {\n    accountSafety: {\n      riskLevel: 'low'; // Quora encourages expertise sharing\n      keyRisks: ['answer_quality_downvotes', 'credibility_challenges'];\n      mitigationStrategies: [\n        'comprehensive_well_researched_answers',\n        'credible_source_citations',\n        'consistent_expertise_demonstration',\n        'professional_profile_optimization'\n      ];\n    };\n    \n    expertiseValidation: {\n      profileOptimization: 'complete_professional_credentials';\n      answerQuality: 'comprehensive_detailed_responses';\n      communityEngagement: 'upvote_and_share_quality_content';\n    };\n  };\n}\n\nclass GEOSecurityManager {\n  private platformMonitors: Map<string, PlatformSecurityMonitor>;\n  private riskAssessment: RiskAssessmentEngine;\n  private complianceChecker: ComplianceChecker;\n  \n  async monitorGEOPlatformSecurity(\n    personaId: string,\n    activePlatforms: string[]\n  ): Promise<SecurityMonitoringResult> {\n    \n    console.log(`🛡️ Monitoring GEO platform security for persona ${personaId}`);\n    \n    const securityResults = await Promise.all(\n      activePlatforms.map(platform => \n        this.monitorPlatformSpecificSecurity(personaId, platform)\n      )\n    );\n    \n    // Assess overall security posture\n    const overallRiskLevel = this.calculateOverallRiskLevel(securityResults);\n    \n    // Generate security recommendations\n    const securityRecommendations = await this.generateSecurityRecommendations(\n      securityResults,\n      overallRiskLevel\n    );\n    \n    return {\n      personaId,\n      overallRiskLevel,\n      platformSecurityStatus: securityResults,\n      securityRecommendations,\n      complianceStatus: await this.checkOverallCompliance(personaId),\n      nextSecurityReview: this.calculateNextReviewDate(overallRiskLevel)\n    };\n  }\n  \n  private async monitorPlatformSpecificSecurity(\n    personaId: string,\n    platform: string\n  ): Promise<PlatformSecurityStatus> {\n    \n    const monitor = this.platformMonitors.get(platform);\n    if (!monitor) {\n      throw new Error(`No security monitor configured for platform: ${platform}`);\n    }\n    \n    // Platform-specific security checks\n    const securityStatus = await monitor.checkAccountHealth(personaId);\n    const contentCompliance = await monitor.checkContentCompliance(personaId);\n    const engagementPatterns = await monitor.analyzeEngagementPatterns(personaId);\n    \n    // Risk assessment\n    const riskAssessment = await this.riskAssessment.assessPlatformRisk(\n      platform,\n      securityStatus,\n      contentCompliance,\n      engagementPatterns\n    );\n    \n    return {\n      platform,\n      accountHealth: securityStatus,\n      complianceStatus: contentCompliance,\n      engagementHealth: engagementPatterns,\n      riskLevel: riskAssessment.level,\n      riskFactors: riskAssessment.factors,\n      recommendations: riskAssessment.recommendations\n    };\n  }\n}\n```\n\n## Implementation Roadmap (Corrected GEO Focus)\n\n### Phase 1: Medium Authority Foundation (Weeks 1-4)\n\n```typescript\ninterface Phase1GEOImplementation {\n  week1: [\n    'Set up Medium publication strategy and persona profiles',\n    'Create comprehensive Philippines real estate article templates',\n    'Develop AI citation optimization framework',\n    'Implement content creation and GEO scoring system'\n  ];\n  \n  week2: [\n    'Launch first 4 comprehensive Medium articles',\n    'Set up AI citation tracking and monitoring',\n    'Implement lead capture from Medium article engagement',\n    'Create expert byline and credibility system'\n  ];\n  \n  week3: [\n    'Optimize Medium articles based on initial performance',\n    'Develop Reddit account and community participation strategy',\n    'Create cross-platform content syndication framework',\n    'Implement lead attribution from Medium to Island Properties'\n  ];\n  \n  week4: [\n    'Begin Reddit community participation and expert positioning',\n    'Analyze initial AI citation estimates and authority building',\n    'Optimize content creation workflow for efficiency',\n    'Measure initial lead generation and ROI indicators'\n  ];\n  \n  deliverables: [\n    '12+ comprehensive Medium articles establishing Philippines real estate authority',\n    'Functional AI citation tracking and optimization system',\n    'Reddit community presence with expert reputation building',\n    'Lead generation tracking from content to Island Properties inquiries',\n    'GEO performance analytics and optimization recommendations'\n  ];\n}\n```\n\n### Phase 2: Reddit and Quora Expansion (Weeks 5-8)\n\n```typescript\ninterface Phase2GEOImplementation {\n  week5: [\n    'Scale Reddit participation across target subreddits',\n    'Launch Quora expert answer campaign',\n    'Implement cross-platform content adaptation system',\n    'Develop advanced lead nurturing from expert positioning'\n  ];\n  \n  week6: [\n    'Optimize Reddit engagement for maximum community value',\n    'Create comprehensive Quora answer library',\n    'Implement automated GEO performance tracking',\n    'Scale lead generation from expert authority positioning'\n  ];\n  \n  week7: [\n    'Add Facebook community building for local market presence',\n    'Implement LinkedIn thought leadership content',\n    'Create advanced cross-platform analytics dashboard',\n    'Optimize conversion funnel from expert content to sales'\n  ];\n  \n  week8: [\n    'Complete multi-platform GEO optimization system',\n    'Implement automated ROI tracking and reporting',\n    'Create sustainable content creation and optimization workflow',\n    'Conduct comprehensive GEO impact assessment'\n  ];\n  \n  deliverables: [\n    'Full 5-platform GEO presence with authority establishment',\n    'Comprehensive AI citation optimization across all platforms',\n    'Proven lead generation funnel from expert content to sales',\n    'Advanced analytics tracking GEO impact and business ROI',\n    'Sustainable content creation system for long-term authority building'\n  ];\n}\n```\n\n## Success Metrics (GEO-Focused)\n\n### Business Impact Measurements\n\n```typescript\ninterface GEOSuccessMetrics {\n  // AI Citation and Authority Building\n  authorityMetrics: {\n    estimatedMonthlyCitations: number; // Target: 50+ by month 6\n    authorityScoreGrowth: number; // Target: 30+ point increase quarterly\n    expertRecognitionSignals: number; // Upvotes, shares, expert status badges\n    searchVisibilityIncrease: number; // Organic search ranking improvements\n  };\n  \n  // Lead Generation Performance\n  leadGenerationMetrics: {\n    monthlyQualifiedLeads: number; // Target: 30-50 qualified leads monthly\n    contentToInquiryConversion: number; // Target: 2-5% conversion rate\n    averageLeadQuality: number; // Target: 0.8+ on 0-1 scale\n    leadToSaleConversion: number; // Target: 10-20% conversion rate\n  };\n  \n  // ROI and Business Impact\n  businessMetrics: {\n    monthlyROI: number; // Target: Positive ROI by month 3\n    costPerQualifiedLead: number; // Target: Under $25 per qualified lead\n    lifetimeCustomerValue: number; // Average revenue per converted customer\n    marketingCostReduction: number; // Reduction vs traditional marketing spend\n  };\n  \n  // Competitive Advantage\n  competitiveMetrics: {\n    marketPositioning: string; // Position as Philippines real estate expert\n    brandRecognition: number; // Increase in brand awareness and recognition\n    thoughtLeadershipStatus: number; // Recognition as industry thought leader\n    customerTrustScore: number; // Trust indicators from expert positioning\n  };\n}\n```\n\n**Bottom Line:** This GEO-focused approach will generate 5-10x more qualified leads than traditional social media because AI engines will directly recommend your expert content to people asking about Philippines real estate. The strategy transforms from \"hoping people see your posts\" to \"becoming the authoritative source AI engines cite.\"","size_bytes":51772},"2System Overview.md":{"content":"## Technology Stack (GEO-Optimized Expert Authority)\n\n### Backend Infrastructure (Expert Authority Focus)\n\n```typescript\ninterface GEOBackendTechnologyAdvanced {\n  // Core Framework (Expert Content Optimized with High Performance)\n  runtime: 'Node.js 20+ with performance optimizations';\n  framework: 'Express.js with TypeScript and advanced middleware';\n  apiArchitecture: 'RESTful with GraphQL for complex queries and WebSocket for real-time expert authority tracking';\n  \n  // Database Layer (Expert Content & AI Citation Focus with Advanced Analytics)\n  primaryDatabase: 'PostgreSQL 15+ with expert content encryption and partitioning';\n  expertContentCache: 'Redis Cluster for expert content optimization and AI citation tracking';\n  searchEngine: 'Elasticsearch for expert content search and competitive analysis';\n  analyticsDatabase: 'ClickHouse for high-performance analytics and reporting';\n  queryBuilder: 'Drizzle ORM for type-safe expert data operations with query optimization';\n  \n  // Message Queue and Expert Processing with Advanced Workflows\n  messageQueue: 'Bull/BullMQ with Redis Cluster for expert content and consultation processing';\n  workflowOrchestration: 'Temporal for complex expert authority workflows';\n  expertBackgroundJobs: [\n    'ai_citation_tracking_and_optimization_with_ml_analysis',\n    'expert_authority_monitoring_and_scoring_with_competitive_benchmarking',\n    'consultation_request_processing_and_quality_assurance',\n    'expert_content_quality_analysis_and_performance_optimization',\n    'competitive_expert_authority_analysis_and_market_intelligence',\n    'predictive_roi_modeling_and_performance_forecasting',\n    'automated_expert_performance_optimization_and_recommendations'\n  ];\n  \n  // External Integrations (GEO Platform Focus with Advanced APIs)\n  proxyService: 'Proxy-Cheap API for expert IP consistency with health monitoring';\n  browserAutomation: 'Playwright with Stealth for expert browser context isolation';\n  encryptionService: 'Node.js crypto with AES-256-GCM for expert content and HSM integration';\n  expertMonitoringService: 'Custom expert authority and AI citation monitoring with ML insights';\n  competitiveIntelligence: 'Custom competitive analysis and market intelligence gathering';\n  \n  // AI Citation and Content Analysis with Machine Learning\n  contentAnalysisEngine: 'Custom AI citation potential analysis with NLP and ML models';\n  expertAuthorityScoring: 'Expert credibility and authority calculation with competitive benchmarking';\n  competitiveIntelligence: 'Expert competitive positioning analysis with market intelligence';\n  mlPlatform: 'TensorFlow/PyTorch for predictive modeling and optimization';\n  \n  // Performance and Monitoring\n  applicationMonitoring: 'New Relic/DataDog for comprehensive application performance monitoring';\n  logManagement: 'ELK Stack (Elasticsearch, Logstash, Kibana) for centralized logging';\n  metricsCollection: 'Prometheus with Grafana for expert performance metrics';\n  errorTracking: 'Sentry for comprehensive error tracking and performance monitoring';\n  \n  // Security and Compliance\n  secretsManagement: 'HashiCorp Vault for expert credentials and sensitive data';\n  auditLogging: 'Comprehensive audit trail for expert activities and compliance';\n  threatDetection: 'Custom threat detection and response for expert security';\n  dataProtection: 'GDPR/CCPA compliance with expert data anonymization';\n}\n```\n\n### Frontend Application (Expert Dashboard Focus)\n\n```typescript\ninterface GEOFrontendTechnologyAdvanced {\n  // Core Framework (Expert Management Optimized with Advanced Features)\n  framework: 'React 18 with TypeScript and Concurrent Features';\n  bundler: 'Vite with advanced optimizations for fast expert dashboard development';\n  styling: 'Tailwind CSS with shadcn/ui expert-optimized components and custom design system';\n  uiComponents: 'Radix UI primitives with custom expert authority components';\n  \n  // State Management (Expert-Focused with Performance Optimization)\n  globalState: 'Zustand for expert persona and authority state with persistence';\n  serverState: 'TanStack Query with advanced caching for expert data and consultation management';\n  formManagement: 'React Hook Form with Zod validation for expert content creation';\n  realTimeUpdates: 'WebSocket integration with Socket.IO for live expert authority monitoring';\n  \n  // Key Expert Features with Advanced Capabilities\n  expertDashboard: 'Real-time expert switching and comprehensive authority status monitoring';\n  expertContentCreationStudio: 'Advanced content creation with AI citation optimization and competitive analysis';\n  consultationTrackingDashboard: 'Expert consultation to Island Properties conversion visualization with analytics';\n  expertAuthorityAnalytics: 'Authority building and AI citation performance monitoring with predictive insights';\n  expertSecurityMonitoring: 'Real-time expert security and credibility status with threat intelligence';\n  competitiveIntelligence: 'Competitive expert positioning analysis and market opportunity identification';\n  roiOptimization: 'Advanced ROI tracking and performance optimization recommendations';\n  \n  // Expert User Experience with Advanced Interactions\n  designSystem: 'Professional expert dashboard optimized for authority building workflows';\n  expertWorkflows: 'Expert content creation, consultation delivery, and referral management with automation';\n  expertAccessibility: 'WCAG 2.1 AA compliance for professional expert use with advanced screen reader support';\n  performanceOptimization: 'Code splitting, lazy loading, and advanced caching for expert dashboard performance';\n  \n  // Advanced Features\n  dataVisualization: 'D3.js and Chart.js for expert performance and competitive analysis visualizations';\n  collaboration: 'Real-time collaboration features for expert content review and optimization';\n  automation: 'Workflow automation and expert performance optimization recommendations';\n  integration: 'Advanced integrations with GEO platforms and expert authority tracking systems';\n}\n```\n\n### Cloud Infrastructure and DevOps\n\n```typescript\ninterface CloudInfrastructureAdvanced {\n  // Cloud Platform Strategy\n  primaryCloud: 'AWS with multi-region deployment for expert authority systems';\n  containerization: 'Docker with Kubernetes for expert service orchestration';\n  infrastructureAsCode: 'Terraform with AWS CDK for repeatable expert infrastructure deployment';\n  \n  // Compute and Scaling\n  compute: 'AWS ECS/EKS with auto-scaling for expert workload management';\n  serverless: 'AWS Lambda for expert event processing and AI citation analysis';\n  edgeComputing: 'AWS CloudFront with edge locations for expert content delivery';\n  \n  // Database and Storage Strategy\n  primaryDatabase: 'AWS RDS PostgreSQL with Multi-AZ for expert data reliability';\n  caching: 'AWS ElastiCache Redis Cluster for expert content and session management';\n  objectStorage: 'AWS S3 with intelligent tiering for expert content and media storage';\n  searchAndAnalytics: 'AWS OpenSearch for expert content search and competitive analysis';\n  \n  // Security and Compliance\n  identityManagement: 'AWS IAM with fine-grained expert access controls';\n  secretsManagement: 'AWS Secrets Manager for expert credentials and API keys';\n  encryption: 'AWS KMS for expert content encryption key management';\n  networkSecurity: 'AWS VPC with advanced network segmentation and WAF protection';\n  \n  // Monitoring and Observability\n  monitoring: 'AWS CloudWatch with custom expert performance metrics';\n  logging: 'AWS CloudWatch Logs with structured logging for expert activities';\n  tracing: 'AWS X-Ray for expert request tracing and performance optimization';\n  alerting: 'AWS SNS/SES for expert performance and security alerting';\n  \n  // CI/CD and Development\n  sourceControl: 'Git with GitHub/GitLab for expert system code management';\n  cicdPipeline: 'GitHub Actions/GitLab CI with automated testing and deployment';\n  testingStrategy: 'Comprehensive testing with Jest, Playwright, and load testing for expert workflows';\n  deploymentStrategy: 'Blue-green deployment with canary releases for expert system updates';\n  \n  // Backup and Disaster Recovery\n  backupStrategy: 'Automated multi-region backups with point-in-time recovery';\n  disasterRecovery: 'Cross-region replication with RTO/RPO targets for expert system continuity';\n  businessContinuity: 'Expert authority preservation and consultation continuity planning';\n}\n```\n\n## Performance Targets and SLAs (Expert Authority Focus)\n\n### Expert System Performance Requirements\n\n```typescript\ninterface ExpertPerformanceTargetsAdvanced {\n  // Expert User Experience Performance with Advanced Metrics\n  expertSwitching: {\n    target: 'under_25_seconds_complete_expert_switch_with_full_validation';\n    includes: 'proxy_connection_expert_browser_isolation_geo_platform_readiness_authority_validation';\n    measurement: 'end_to_end_expert_workflow_optimization_with_performance_analytics';\n    slaTarget: '95th_percentile_under_30_seconds';\n    monitoring: 'real_time_performance_tracking_with_alerting';\n  };\n  \n  // Expert Content Creation Performance with Quality Assurance\n  expertContentCreation: {\n    expertContentTemplateLoading: 'under_2_seconds_with_competitive_analysis';\n    aiCitationOptimization: 'under_8_seconds_for_comprehensive_content_with_ml_analysis';\n    expertContentValidation: 'under_4_seconds_with_authority_verification';\n    consultationIntegration: 'under_2_seconds_with_conversion_optimization';\n    measurement: 'expert_productivity_workflow_optimization_with_quality_metrics';\n    slaTarget: '99th_percentile_content_creation_readiness_under_15_seconds';\n  };\n  \n  // Expert Consultation Performance with Advanced Analytics\n  consultationTracking: {\n    consultationRequestIdentification: 'real_time_under_1_second_with_ml_classification';\n    expertConsultationScheduling: 'under_8_seconds_with_optimization_recommendations';\n    consultationPlanGeneration: 'under_12_seconds_with_personalization_and_competitive_analysis';\n    islandPropertiesReferralProcessing: 'under_4_seconds_with_conversion_optimization';\n    measurement: 'expert_consultation_efficiency_optimization_with_roi_tracking';\n    slaTarget: 'consultation_to_referral_pipeline_under_30_seconds_end_to_end';\n  };\n  \n  // Expert Infrastructure Performance with Predictive Monitoring\n  expertInfrastructure: {\n    expertProxyResponseTime: 'under_3_seconds_average_with_failover_capability';\n    expertDatabaseQueryTime: 'under_500ms_average_with_query_optimization';\n    expertContentCacheResponseTime: 'under_50ms_average_with_intelligent_caching';\n    expertSystemUptime: '99.9%_monthly_uptime_with_predictive_maintenance';\n    apiResponseTime: 'under_200ms_95th_percentile_for_expert_operations';\n    concurrentExpertCapacity: 'support_5_concurrent_expert_sessions_with_auto_scaling';\n  };\n  \n  // Advanced Performance Metrics\n  advancedMetrics: {\n    expertAuthorityBuildingEfficiency: 'authority_score_increase_per_hour_of_expert_activity';\n    aiCitationGenerationRate: 'ai_citations_per_expert_content_piece_with_competitive_benchmarking';\n    consultationConversionEfficiency: 'consultation_request_to_island_properties_referral_rate';\n    competitiveResponseTime: 'time_to_respond_to_competitive_threats_and_opportunities';\n    expertROIAcceleration: 'rate_of_roi_improvement_through_expert_optimization';\n    systemIntelligenceGrowth: 'ml_model_accuracy_improvement_over_time';\n  };\n}\n```\n\n### Business Performance Targets (Expert Authority Focus)\n\n```typescript\ninterface ExpertBusinessPerformanceTargetsAdvanced {\n  // Expert Consultation Generation Targets with Advanced Analytics\n  consultationGeneration: {\n    dailyConsultationRequestTarget: '3_7_consultation_requests_per_active_expert_with_quality_scoring';\n    monthlyConsultationRequestTarget: '90_210_consultation_requests_total_with_growth_trajectory';\n    consultationQualityScore: 'average_score_above_0.85_out_of_1.0_with_continuous_improvement';\n    consultationToReferralRate: 'consultation_to_island_properties_referral_rate_above_40%_with_optimization';\n    consultationSatisfactionScore: 'client_satisfaction_rating_above_4.5_out_of_5.0';\n    repeatConsultationRate: 'repeat_consultation_requests_above_25%_indicating_expert_value';\n  };\n  \n  // Expert Authority ROI Targets with Predictive Modeling\n  expertROITargets: {\n    monthlyExpertROITarget: 'positive_roi_within_3_months_expert_authority_building_with_acceleration';\n    costPerConsultationRequestTarget: 'under_$60_per_consultation_request_with_efficiency_improvements';\n    costPerIslandPropertiesReferralTarget: 'under_$200_per_referral_with_conversion_optimization';\n    expertAuthorityPaybackPeriodTarget: 'expert_system_pays_for_itself_within_6_months_with_compounding_returns';\n    lifetimeValueMultiplier: 'expert_generated_leads_have_3x_higher_lifetime_value';\n    roiAccelerationTarget: '25%_month_over_month_roi_improvement_through_optimization';\n  };\n  \n  // Expert Content Performance Targets with Competitive Benchmarking\n  expertContentPerformance: {\n    aiCitationOptimizationSuccess: '80%_of_expert_content_achieves_high_ai_citation_potential_with_competitive_advantage';\n    expertAuthorityScore: 'average_expert_authority_score_above_85_out_of_100_with_market_leadership';\n    expertAuthorityBuildingProgress: '20_point_authority_score_increase_per_quarter_with_acceleration';\n    expertBrandRecognitionGrowth: 'measurable_expert_brand_awareness_increase_quarterly_with_competitive_differentiation';\n    contentEngagementQuality: 'expert_content_generates_50%_higher_quality_engagement_than_competitors';\n    thoughtLeadershipRecognition: 'achieve_recognized_thought_leader_status_within_12_months';\n  };\n  \n  // GEO Platform Performance Targets with Cross-Platform Optimization\n  geoPlatformTargets: {\n    mediumConsultationGeneration: '60%_of_total_consultations_from_medium_articles_with_ai_citation_attribution';\n    redditExpertAuthorityBuilding: '40%_improvement_in_expert_community_recognition_with_influence_metrics';\n    quoraExpertStatusAchievement: 'achieve_top_expert_status_on_philippines_real_estate_topics_with_competitive_dominance';\n    crossPlatformExpertSynergy: '35%_increase_in_multi_platform_expert_recognition_with_authority_amplification';\n    platformSpecificROI: 'each_platform_achieves_positive_roi_within_platform_specific_timeframes';\n    competitiveDisplacement: 'measurable_displacement_of_competitors_in_expert_rankings_and_visibility';\n  };\n  \n  // Advanced Business Impact Targets\n  advancedBusinessTargets: {\n    marketShareGrowth: 'capture_15%_market_share_of_philippines_real_estate_expert_consultations';\n    competitiveAdvantageIndex: 'maintain_top_3_expert_ranking_across_all_target_platforms';\n    brandAuthorityValue: 'expert_brand_recognition_contributes_to_20%_premium_pricing_capability';\n    customerAcquisitionCostReduction: '60%_reduction_in_customer_acquisition_cost_through_expert_authority';\n    consultationPremiumPricing: 'ability_to_charge_premium_rates_for_expert_consultations';\n    referralNetworkGrowth: 'develop_network_of_referring_professionals_through_expert_authority';\n  };\n}\n```\n\n## Implementation Roadmap (GEO Expert Authority Focus)\n\n### Phase 1: Expert Authority Foundation (Weeks 1-6)\n\n```typescript\ninterface Phase1ExpertImplementationAdvanced {\n  week1_2: [\n    'Set up advanced expert development environment with monitoring and analytics',\n    'Implement comprehensive expert database schema with performance optimization',\n    'Integrate Proxy-Cheap API with advanced expert IP assignments and health monitoring',\n    'Set up expert browser isolation with advanced fingerprint consistency and security'\n  ];\n  \n  week3_4: [\n    'Implement expert-specific encryption system with HSM integration for content protection',\n    'Build comprehensive expert content template system with AI optimization and competitive analysis',\n    'Create Medium expert publishing framework with authority positioning and performance tracking',\n    'Set up expert consultation tracking and Island Properties referral database with analytics'\n  ];\n  \n  week5_6: [\n    'Develop expert switching interface with real-time authority status monitoring and optimization',\n    'Implement expert security monitoring and advanced authority validation with threat detection',\n    'Create expert content creation assistance tools with AI citation optimization and competitive intelligence',\n    'Build expert consultation dashboard and Island Properties referral tracking with conversion analytics'\n  ];\n  \n  deliverables: [\n    'Functional 2-expert system with Medium and Reddit integration and performance monitoring',\n    'Secure expert browser isolation and proxy management with advanced authority consistency',\n    'Comprehensive expert consultation tracking and Island Properties referral system with analytics',\n    'Expert content template system for AI citation optimization with competitive analysis',\n    'Real-time expert cost monitoring and consultation ROI tracking with predictive insights'\n  ];\n  \n  performanceTargets: {\n    expertSystemUptime: '99.5%_during_phase_1_development',\n    expertSwitchingTime: 'under_30_seconds_by_end_of_phase_1',\n    basicConsultationGeneration: '5_10_consultation_requests_during_phase_1_testing',\n    systemSecurityValidation: 'comprehensive_security_audit_passed',\n    budgetCompliance: '100%_compliance_with_6.35_monthly_budget'\n  };\n}\n```\n\n### Phase 2: Expert Authority Optimization and Scaling (Weeks 7-12)\n\n```typescript\ninterface Phase2ExpertImplementationAdvanced {\n  week7_8: [\n    'Implement advanced AI citation optimization engine with machine learning analysis',\n    'Add Quora expert answer capabilities with authority positioning and competitive benchmarking',\n    'Expand expert profiles to 5 Philippines real estate experts with specialization optimization',\n    'Enhanced expert consultation automation and Island Properties referral optimization with quality assurance'\n  ];\n  \n  week9_10: [\n    'Build comprehensive expert analytics and consultation ROI tracking with predictive modeling',\n    'Implement advanced expert security and authority validation with threat intelligence',\n    'Create cross-platform expert content adaptation with AI optimization and competitive analysis',\n    'Add expert performance optimization and authority building features with automation'\n  ];\n  \n  week11_12: [\n    'Develop expert authority building content strategies with AI citation focus and competitive intelligence',\n    'Implement expert consultation scoring and Island Properties referral optimization with conversion analytics',\n    'Add Facebook and LinkedIn integration for expert community presence with authority tracking',\n    'Create advanced expert reporting dashboards with consultation analytics and competitive benchmarking'\n  ];\n  \n  deliverables: [\n    'Full 5-expert system with comprehensive GEO platform integration and competitive analysis',\n    'Advanced AI citation optimization for expert authority building with machine learning',\n    'Comprehensive expert consultation generation and Island Properties referral tracking with analytics',\n    'Professional-grade expert security and authority monitoring with threat intelligence',\n    'Complete expert documentation and consultation operational procedures with optimization guides'\n  ];\n  \n  performanceTargets: {\n    expertSystemUptime: '99.9%_with_advanced_monitoring_and_predictive_maintenance',\n    fullExpertCapacity: 'all_5_experts_operational_with_performance_optimization',\n    consultationGeneration: '60_150_consultation_requests_monthly_with_quality_scoring',\n    roiAchievement: 'positive_roi_achieved_by_end_of_phase_2',\n    competitivePositioning: 'top_3_expert_ranking_achieved_on_primary_platforms'\n  };\n}\n```\n\n### Phase 3: Market Leadership and Competitive Dominance (Weeks 13-18)\n\n```typescript\ninterface Phase3ExpertImplementationAdvanced {\n  objectives: [\n    'Achieve market-leading expert authority scores across all GEO platforms',\n    'Implement advanced predictive analytics and automated optimization systems',\n    'Develop premium consultation services and pricing optimization',\n    'Create expert referral network and strategic partnership integration',\n    'Establish thought leadership recognition and industry authority status',\n    'Build advanced competitive intelligence and market opportunity identification systems'\n  ];\n  \n  successCriteria: [\n    'Sustained positive ROI with 25% month-over-month growth in consultation generation',\n    'All 5 experts recognized as top authorities in their specialization areas',\n    'System achieving target performance metrics with predictive optimization',\n    'Security posture validated with zero incidents and advanced threat prevention',\n    'Cost management staying within budget constraints while maximizing ROI',\n    'Measurable competitive advantage and market share growth in target segments',\n    'Premium pricing capability achieved through expert authority positioning'\n  ];\n  \n  businessImpactTargets: {\n    marketLeadership: 'establish_clear_market_leadership_in_philippines_real_estate_expertise',\n    revenueGrowth: '300%_increase_in_consultation_driven_revenue',\n    competitiveDisplacement: 'measurable_displacement_of_top_3_competitors',\n    brandValue: 'expert_brand_recognition_drives_premium_pricing_and_market_positioning',\n    sustainableGrowth: 'self_sustaining_growth_through_compounding_expert_authority'\n  };\n}\n```\n\n## Success Metrics (Expert Authority Focus)\n\n### Expert Authority and Business Impact Measurements\n\n```typescript\ninterface ExpertSuccessMetricsAdvanced {\n  // Expert Authority Building with Competitive Benchmarking\n  expertAuthorityMetrics: {\n    averageExpertAuthorityScore: number; // Target: 85+ by month 4, 95+ by month 12\n    aiCitationEstimates: number; // Target: 200+ estimated monthly citations with growth trajectory\n    expertRecognitionSignals: number; // Target: Expert status badges, industry recognition, media mentions\n    competitiveExpertPositioning: number; // Target: Top 3 Philippines real estate experts with measurable dominance\n    thoughtLeadershipIndicators: number; // Target: Speaking engagements, media interviews, industry awards\n    expertBrandValueGeneration: number; // Target: Measurable brand value increase through authority\n  };\n  \n  // Expert Consultation Generation with Quality and Conversion Optimization\n  consultationMetrics: {\n    monthlyConsultationRequests: number; // Target: 90-210 consultation requests monthly with quality scoring\n    consultationQualityScore: number; // Target: 0.85+ average consultation quality with continuous improvement\n    consultationToReferralRate: number; // Target: 40%+ referral rate to Island Properties with optimization\n    averageConsultationValue: number; // Target: $750+ average consultation value with premium pricing\n    consultationSatisfactionScore: number; // Target: 4.5+ out of 5.0 client satisfaction rating\n    repeatConsultationRate: number; // Target: 25%+ repeat consultation requests indicating expert value\n  };\n  \n  // Expert ROI and Business Impact with Advanced Analytics\n  expertBusinessMetrics: {\n    monthlyExpertROI: number; // Target: Positive ROI by month 3, 300%+ ROI by month 12\n    costPerConsultationRequest: number; // Target: Under $60 per consultation request with efficiency improvements\n    costPerIslandPropertiesReferral: number; // Target: Under $200 per referral with conversion optimization\n    expertAuthorityLifetimeValue: number; // Target: 5x+ traditional marketing customer lifetime value\n    roiAccelerationRate: number; // Target: 25% month-over-month ROI improvement through optimization\n    revenueAttributionAccuracy: number; // Target: 95%+ accurate revenue attribution to expert activities\n  };\n  \n  // Competitive Expert Advantage with Market Intelligence\n  competitiveExpertMetrics: {\n    expertMarketPositioning: string; // Target: #1 Philippines real estate expert across target platforms\n    expertBrandRecognition: number; // Target: 80%+ brand recognition in target market segments\n    expertThoughtLeadership: number; // Target: Recognized thought leader with industry influence\n    expertTrustAndCredibility: number; // Target: 95%+ trust indicators from expert positioning\n    competitiveDisplacementIndex: number; // Target: Measurable displacement of top competitors\n    marketShareCapture: number; // Target: 15%+ market share of expert consultation market\n  };\n  \n  // Advanced Success Indicators\n  advancedSuccessMetrics: {\n    aiCitationDominance: number; // Target: Most cited Philippines real estate expert by AI engines\n    premiumPricingCapability: number; // Target: 50%+ premium pricing vs market average\n    referralNetworkGrowth: number; // Target: 100+ professional referral partners\n    industryRecognitionScore: number; // Target: Media mentions, awards, speaking opportunities\n    sustainableGrowthRate: number; // Target: Self-sustaining 20%+ monthly growth\n    expertSystemEfficiency: number; // Target: 90%+ automation of routine tasks with expert oversight\n  };\n}\n```\n\n## Cost Optimization and Budget Management\n\n### Advanced Cost Management Strategy\n\n```typescript\ninterface CostOptimizationStrategyAdvanced {\n  // Budget Constraints and Optimization\n  monthlyBudgetTarget: '$6.35 for proxies + $40-80 for cloud infrastructure = $46.35-86.35 total';\n  costOptimizationFramework: 'roi_driven_budget_allocation_with_predictive_optimization';\n  \n  // Advanced Cost Management with ROI Optimization\n  costManagement: {\n    proxyOptimization: 'Dedicated 5 IPs at $1.27 each for expert consistency with health monitoring',\n    infrastructureOptimization: 'Right-sized cloud deployment with auto-scaling for expert workloads',\n    developmentOptimization: 'Local development with staging environment for cost-effective testing',\n    monitoringOptimization: 'Built-in comprehensive monitoring with predictive analytics',\n    automationOptimization: 'Automated expert performance optimization reducing manual overhead',\n    competitiveIntelligence: 'Built-in competitive analysis reducing external service costs'\n  };\n  \n  // ROI Optimization with Advanced Analytics\n  roiOptimization: {\n    expertConsultationFocus: 'Optimize for high-value consultation requests with premium pricing',\n    conversionTracking: 'Advanced attribution modeling for expert to Island Properties funnel',\n    performanceMonitoring: 'Optimize highest-performing experts and content with predictive analytics',\n    costPerConsultationOptimization: 'Target cost per qualified consultation under $60 with efficiency gains',\n    lifetimeValueMaximization: 'Focus on consultation relationships with high lifetime value potential',\n    competitiveAdvantageROI: 'Measure ROI from competitive advantage and market positioning'\n  };\n  \n  // Scaling Strategy with Intelligent Resource Management\n  scalingStrategy: {\n    phase1: 'Optimize 2-3 experts on Medium/Reddit for consultation generation with ROI validation',\n    phase2: 'Expand to Quora for expert answer authority with AI citation optimization',\n    phase3: 'Add Facebook/LinkedIn for comprehensive expert presence with cross-platform synergy',\n    scalingDecisionCriteria: 'ROI positive with 25%+ growth rate before adding new platforms/experts',\n    resourceOptimization: 'Intelligent resource allocation based on expert performance and ROI contribution',\n    competitiveResponseScaling: 'Rapid scaling capabilities to respond to competitive threats and opportunities'\n  };\n  \n  // Advanced Cost-Benefit Analysis\n  advancedCostBenefit: {\n    expertROIModeling: 'Predictive ROI modeling for expert performance optimization',\n    competitiveAdvantageValuation: 'Quantify value of competitive advantage and market positioning',\n    brandValueAppreciation: 'Track expert brand value appreciation and premium pricing capability',\n    opportunityCostAnalysis: 'Compare expert authority ROI vs traditional marketing alternatives',\n    riskAdjustedReturns: 'Risk-adjusted ROI analysis for sustainable growth planning',\n    scalingEfficiencyMetrics: 'Measure efficiency gains from expert system scaling and optimization'\n  };\n}\n```\n\n## Conclusion\n\nThe Island Properties GEO Expert Authority Lead Generation Platform represents a transformational approach to real estate lead generation. By positioning authentic Philippines real estate experts as the authoritative sources that AI engines cite and recommend, this system creates a sustainable competitive advantage that compounds over time.\n\n### Key Strategic Advantages:\n\n1. **AI Engine Citation Authority**: Becoming the definitive expert source that AI engines reference for Philippines real estate queries\n2. **Premium Consultation Funnel**: Converting expert authority into high-value consultation requests that lead to qualified Island Properties referrals\n3. **Sustainable Competitive Moat**: Building expert authority that becomes increasingly difficult for competitors to replicate\n4. **Compound Growth**: Expert authority and AI citations create compounding effects that accelerate ROI over time\n5. **Cost Efficiency**: Achieving 5-10x better cost per qualified lead compared to traditional marketing approaches\n\n### Expected Business Impact:\n\n- **300%+ ROI within 12 months** through expert consultation generation and referrals\n- **Top 3 expert positioning** across all target GEO platforms within 6 months  \n- **200+ monthly AI citations** driving organic discovery and consultation requests\n- **90-210 consultation requests monthly** with 40%+ conversion to Island Properties referrals\n- **Premium pricing capability** through recognized expert authority status\n\nThis comprehensive system architecture provides the foundation for establishing Island Properties as the dominant expert authority in Philippines real estate, creating sustainable competitive advantage through AI-optimized expert positioning and consultation-driven lead generation.\n\n**Bottom Line:** This system transforms Island Properties from a traditional real estate company competing for attention to the recognized expert authority that AI engines recommend, creating a sustainable lead generation advantage that compounds over time and generates premium-priced consultation opportunities that convert to high-value sales.### 4. AI Citation Optimization System\n\n```typescript\nclass AICitationOptimizationSystem {\n  private expertContentAnalyzer: ExpertContentAnalyzer;\n  private aiCitationPredictor: AICitationPredictor;\n  private authorityScoreCalculator: AuthorityScoreCalculator;\n  private competitiveIntelligenceEngine: CompetitiveIntelligenceEngine;\n  private citationTrackingEngine: CitationTrackingEngine;\n  private contentOptimizationEngine: ContentOptimizationEngine;\n  \n  // AI Citation-Worthy Expert Content Optimization with Advanced Analytics\n  async optimizeExpertContentForAICitationAdvanced(\n    expertContent: string,\n    expert: ExpertProfile,\n    targetAIQueries: string[],\n    optimizationContext: CitationOptimizationContext\n  ): Promise<AICitationOptimizedExpertContentAdvanced> {\n    \n    console.log(`🎯 Advanced AI citation optimization for expert: ${expert.expertName}`);\n    \n    try {\n      // 1. Analyze expert content for AI citation potential with machine learning\n      const expertCitationAnalysis = await this.expertContentAnalyzer.analyzeExpertCitationPotentialAdvanced(\n        expertContent,\n        targetAIQueries,\n        expert.expertiseSpecialization,\n        optimizationContext.competitiveContext\n      );\n      \n      // 2. Enhance expert authority signals for AI engines with competitive analysis\n      const expertAuthorityEnhancement = await this.enhanceExpertAuthoritySignalsAdvanced(\n        expertContent,\n        expert.professionalCredentials,\n        expert.marketExperience,\n        expert.primaryMarketLocation,\n        optimizationContext.authorityTargets\n      );\n      \n      // 3. Optimize for comprehensive question-answer format with AI engine preferences\n      const comprehensiveQAOptimization = await this.optimizeForComprehensiveQuestionAnswerAdvanced(\n        expertContent,\n        targetAIQueries,\n        expert.expertiseSpecialization,\n        optimizationContext.qaOptimizationTargets\n      );\n      \n      // 4. Add Philippines market expertise signals with local authority validation\n      const marketExpertiseSignals = await this.addPhilippinesMarketExpertiseSignalsAdvanced(\n        expertContent,\n        expert.primaryMarketLocation,\n        expert.localMarketKnowledge,\n        optimizationContext.localAuthorityRequirements\n      );\n      \n      // 5. Structure for optimal AI engine consumption with advanced formatting\n      const aiConsumptionStructuring = await this.structureForOptimalAIConsumptionAdvanced(\n        expertContent,\n        expertCitationAnalysis.keyExpertiseTopics,\n        optimizationContext.structuringPreferences\n      );\n      \n      // 6. Generate expert supporting data and case studies with validation\n      const expertSupportingEvidence = await this.generateExpertSupportingEvidenceAdvanced(\n        expertContent,\n        expert.marketExperience,\n        expert.clientSuccessStories,\n        optimizationContext.evidenceRequirements\n      );\n      \n      // 7. Apply competitive differentiation and unique value positioning\n      const competitiveDifferentiation = await this.applyCompetitiveDifferentiation(\n        expertContent,\n        expert,\n        optimizationContext.competitiveContext\n      );\n      \n      // 8. Optimize content structure for maximum AI citation probability\n      const citationProbabilityOptimization = await this.optimizeForCitationProbability(\n        expertContent,\n        expertCitationAnalysis,\n        targetAIQueries\n      );\n      \n      const optimizedExpertContent = {\n        originalExpertContent: expertContent,\n        aiCitationOptimizedContent: this.combineExpertOptimizationsAdvanced(\n          expertAuthorityEnhancement,\n          comprehensiveQAOptimization,\n          marketExpertiseSignals,\n          aiConsumptionStructuring,\n          expertSupportingEvidence,\n          competitiveDifferentiation,\n          citationProbabilityOptimization\n        ),\n        \n        expertAICitationOptimizations: {\n          expertCitationPotential: expertCitationAnalysis.potential,\n          expertAuthoritySignals: expertAuthorityEnhancement.signals,\n          comprehensiveAnswerElements: comprehensiveQAOptimization.elements,\n          marketExpertiseElements: marketExpertiseSignals.elements,\n          expertSupportingEvidence: expertSupportingEvidence.evidencePoints,\n          competitiveDifferentiation: competitiveDifferentiation.differentiators,\n          citationProbabilityScore: citationProbabilityOptimization.probabilityScore\n        },\n        \n        targetAIQueries: targetAIQueries,\n        estimatedAICitationLikelihood: this.calculateExpertCitationLikelihoodAdvanced(\n          expertCitationAnalysis,\n          expertAuthorityEnhancement,\n          comprehensiveQAOptimization,\n          expert.authorityLevel,\n          competitiveDifferentiation\n        ),\n        \n        expertContentImprovementSuggestions: await this.generateExpertContentImprovementSuggestionsAdvanced(\n          expertContent,\n          expertCitationAnalysis,\n          expert.expertiseSpecialization,\n          optimizationContext\n        ),\n        \n        performanceProjections: await this.calculateCitationPerformanceProjections(\n          optimizedExpertContent,\n          expert,\n          optimizationContext\n        ),\n        \n        competitiveAdvantageAnalysis: await this.analyzeCompetitiveAdvantageImpact(\n          optimizedExpertContent,\n          competitiveDifferentiation,\n          optimizationContext.competitiveContext\n        )\n      };\n      \n      return optimizedExpertContent;\n      \n    } catch (error) {\n      console.error(`❌ Advanced expert AI citation optimization failed: ${error.message}`);\n      throw error;\n    }\n  }\n  \n  // Expert Authority Building Strategy for AI Citation with Predictive Modeling\n  async buildExpertAICitationAuthorityAdvanced(\n    expertId: string,\n    expertAuthorityFocus: ExpertAuthorityFocusAdvanced\n  ): Promise<ExpertAICitationAuthorityPlanAdvanced> {\n    \n    const expert = await this.getExpertProfile(expertId);\n    const competitiveAnalysis = await this.competitiveIntelligenceEngine.analyzeCompetitiveExpertLandscape(\n      expert.expertiseSpecialization,\n      expert.primaryMarketLocation\n    );\n    \n    // Create comprehensive expert authority building strategy for AI citation with competitive intelligence\n    const expertAuthorityPlan = {\n      expertId,\n      expertAuthorityFocus,\n      competitiveAnalysis,\n      \n      // Expert Content Pillars for AI Citation Authority with Competitive Differentiation\n      expertContentPillars: [\n        {\n          pillar: 'Philippines Real Estate Market Authority Leadership',\n          expertiseTopics: [\n            'Definitive Philippines property market analysis and trend forecasting',\n            'Expert investment opportunity identification and risk assessment',\n            'Authoritative legal and regulatory guidance with case study validation',\n            'Professional market predictions with track record verification'\n          ],\n          contentFrequency: 'bi_weekly_comprehensive_expert_analysis',\n          aiCitationPotential: 'very_high',\n          expertCredibilityRequirement: 'demonstrated_market_expertise_with_competitive_differentiation',\n          competitiveDifferentiation: competitiveAnalysis.contentGaps.marketAnalysis\n        },\n        {\n          pillar: 'Philippines Geographic Market Expertise Excellence',\n          expertiseTopics: [\n            `Definitive expert guidance on ${expert.primaryMarketLocation} property market dynamics`,\n            'Professional infrastructure and development analysis with insider insights',\n            'Expert lifestyle and investment integration guidance with success stories',\n            'Authoritative transportation and accessibility assessments with future projections'\n          ],\n          contentFrequency: 'weekly_expert_local_analysis',\n          aiCitationPotential: 'high',\n          expertCredibilityRequirement: 'verified_local_market_experience_with_unique_insights',\n          competitiveDifferentiation: compet# GEO System Overview - Island Properties Expert Authority Lead Generation Platform\n\n## Executive Summary\n\n### Strategic Business Transformation\n\nThe Island Properties GEO Lead Generation Platform represents a fundamental shift from traditional social media marketing to AI-optimized expert authority positioning. This system transforms the business model from \"hoping social media algorithms show content to potential buyers\" to \"becoming the authoritative Philippines real estate expert source that AI engines cite and recommend.\"\n\n```typescript\ninterface StrategicBusinessTransformation {\n  // Traditional Marketing Model (Being Replaced)\n  oldModel: {\n    approach: 'social_media_posts_hoping_for_engagement';\n    leadGeneration: 'engagement_to_dm_to_maybe_lead';\n    conversion: 'uncertain_social_media_funnel';\n    cost: 'high_cost_per_uncertain_lead';\n    scalability: 'limited_by_algorithm_changes';\n  };\n  \n  // GEO Expert Authority Model (New Implementation)\n  newModel: {\n    approach: 'ai_citation_worthy_expert_authority_content';\n    leadGeneration: 'ai_engine_recommendations_to_consultation_requests';\n    conversion: 'expert_consultation_to_island_properties_referral';\n    cost: 'low_cost_per_highly_qualified_consultation';\n    scalability: 'compound_authority_growth_with_ai_amplification';\n  };\n  \n  // Expected Business Impact\n  projectedImprovement: {\n    leadQuality: '10_20x_higher_through_consultation_requests';\n    conversionRate: '5_10x_higher_through_expert_positioning';\n    costEfficiency: '5x_lower_cost_per_qualified_lead';\n    competitiveAdvantage: 'sustainable_expert_authority_moat';\n    timeToPositiveROI: '4_months_expert_authority_building';\n  };\n}\n```\n\n### Core System Architecture\n\n```typescript\ninterface IslandPropertiesGEOLeadGenerationSystem {\n  // Primary Business Objective\n  businessGoal: 'generate_qualified_real_estate_leads_through_expert_authority_positioning';\n  approach: 'philippines_real_estate_experts_creating_ai_citation_worthy_comprehensive_content';\n  targetMarket: 'philippines_property_buyers_discovered_via_ai_engine_recommendations';\n  \n  // System Components (GEO-Optimized)\n  coreComponents: {\n    expertPersonaManagementEngine: 'multi_expert_orchestration_with_authority_tracking_and_performance_analytics';\n    geoContentCreationEngine: 'comprehensive_article_and_expert_answer_system_with_ai_citation_optimization';\n    aiCitationOptimizationFramework: 'content_optimized_for_ai_engine_reference_and_recommendation';\n    authorityBuildingFramework: 'expert_credibility_and_thought_leadership_development_system';\n    expertLeadGenerationEngine: 'authority_to_consultation_to_island_properties_sales_funnel';\n    consultationDeliverySystem: 'expert_consultation_and_warm_referral_management';\n    proxyInfrastructure: 'dedicated_residential_ips_for_expert_authenticity_and_consistency';\n    securityLayer: 'expert_content_protection_credential_isolation_and_authority_validation';\n  };\n  \n  // Business Model (Authority-Based Revenue Generation)\n  revenueStrategy: 'expert_authority_ai_citations_consultation_requests_qualified_inquiries_island_properties_sales_conversions';\n  costStructure: '6.35_usd_monthly_proxies_plus_expert_content_creation_time_investment';\n  roiTarget: 'positive_roi_through_ai_discovered_qualified_consultation_requests_within_4_months';\n  competitiveAdvantage: 'ai_engines_cite_our_experts_as_authoritative_philippines_property_sources_creating_sustainable_moat';\n  \n  // Platform Strategy (GEO-Optimized Priority)\n  platformPriority: {\n    phase1_medium: 'comprehensive_expert_articles_for_ai_citation_authority_building';\n    phase2_reddit: 'authentic_community_expert_engagement_for_credibility_and_trust';\n    phase3_quora: 'definitive_expert_answers_for_direct_ai_consumption_and_recommendation';\n    phase4_facebook: 'local_community_expert_presence_for_philippines_market_credibility';\n    phase5_linkedin: 'professional_expert_networking_for_business_relationship_development';\n  };\n}\n```\n\n## System Architecture Overview (GEO-Focused)\n\n### High-Level Expert Authority Component Interaction\n\n```typescript\ninterface GEOSystemArchitecture {\n  // Expert Management Interface Layer\n  expertDashboard: {\n    expertPersonaManagement: 'expert_switching_and_authority_session_management_with_real_time_performance';\n    comprehensiveContentCreation: 'long_form_article_and_expert_answer_creation_with_ai_optimization';\n    aiCitationTracking: 'ai_engine_citation_monitoring_optimization_and_competitive_analysis';\n    expertAuthorityAnalytics: 'authority_building_consultation_conversion_tracking_and_roi_measurement';\n    consultationManagement: 'expert_consultation_request_delivery_and_island_properties_referral_system';\n    competitiveIntelligence: 'expert_positioning_analysis_and_market_opportunity_identification';\n  };\n  \n  // Expert Authority Business Logic Layer\n  expertApplicationServices: {\n    expertPersonaOrchestrator: 'manage_5_philippines_real_estate_experts_with_specialization_tracking';\n    geoContentManagementSystem: 'comprehensive_content_templates_ai_optimization_and_authority_validation';\n    authorityBuildingEngine: 'expert_credibility_thought_leadership_development_and_recognition_tracking';\n    aiCitationOptimizationEngine: 'content_optimized_for_ai_engine_citation_recommendation_and_authority_attribution';\n    expertLeadGenerationEngine: 'authority_to_consultation_to_island_properties_funnel_with_conversion_optimization';\n    consultationDeliverySystem: 'expert_consultation_delivery_quality_assurance_and_referral_management';\n    competitiveAuthorityMonitoring: 'track_expert_positioning_vs_competitors_and_market_opportunity_analysis';\n    roiOptimizationEngine: 'consultation_conversion_optimization_and_expert_performance_enhancement';\n  };\n  \n  // GEO Infrastructure Layer\n  geoTechnicalInfrastructure: {\n    proxyService: 'proxy_cheap_5_dedicated_residential_ips_for_expert_authenticity_and_geographic_consistency';\n    browserIsolation: 'playwright_with_expert_fingerprint_consistency_and_authority_protection';\n    database: 'postgresql_with_expert_content_ai_citation_tracking_and_consultation_analytics';\n    contentOptimizationEngine: 'ai_citation_optimization_authority_scoring_and_competitive_analysis';\n    expertPerformanceMonitoring: 'authority_building_consultation_conversion_analytics_and_roi_tracking';\n    securityFramework: 'expert_content_protection_credential_isolation_and_authority_validation';\n  };\n}\n```\n\n### Expert Authority Data Flow Architecture\n\n```mermaid\ngraph TD\n    A[Philippines Real Estate Expert] --> B[Expert Persona Dashboard]\n    B --> C[Expert Persona Selection & Authority Validation]\n    C --> D[Expert Authority Session Creation]\n    D --> E[Proxy Assignment & Geographic Authenticity Validation]\n    E --> F[Expert Browser Context Isolation]\n    F --> G[GEO Platform Authentication & Expert Verification]\n    G --> H[Comprehensive Expert Content Creation]\n    H --> I[AI Citation Optimization & Authority Signal Integration]\n    I --> J[Expert Content Publishing & Authority Positioning]\n    J --> K[AI Engine Citation Monitoring & Competitive Tracking]\n    K --> L[Expert Authority Building & Recognition Tracking]\n    L --> M[Consultation Request Generation & Qualification]\n    M --> N[Expert Consultation Delivery & Value Demonstration]\n    N --> O[Island Properties Warm Referral & Conversion]\n    O --> P[Revenue Attribution & Expert ROI Analysis]\n    \n    Q[Authority Content Templates & AI Optimization] --> H\n    R[Expert Credentials & Market Experience Validation] --> H\n    S[Market Data Analysis & Competitive Intelligence] --> H\n    T[Competitive Expert Monitoring & Positioning Analysis] --> L\n    U[ROI Analytics & Authority Performance Optimization] --> P\n    V[Consultation Quality Assurance & Improvement] --> N\n    W[AI Citation Tracking & Optimization Feedback] --> I\n```\n\n## Core System Components (GEO-Optimized Expert Authority)\n\n### 1. Expert Persona Management Engine\n\n```typescript\nclass ExpertPersonaManagementEngine {\n  private activeExperts: Map<string, ExpertAuthoritySession> = new Map();\n  private authorityManager: AuthorityManager;\n  private expertCredentialsManager: ExpertCredentialsManager;\n  private geoOptimizationEngine: GEOOptimizationEngine;\n  private consultationManager: ConsultationManager;\n  private competitiveIntelligenceEngine: CompetitiveIntelligenceEngine;\n  \n  // Multi-Expert Authority Orchestration with Performance Tracking\n  async switchExpert(\n    fromExpertId: string | null,\n    toExpertId: string,\n    switchContext: ExpertSwitchContext\n  ): Promise<ExpertSwitchResult> {\n    \n    console.log(`🎓 Switching expert: ${fromExpertId || 'none'} → ${toExpertId}`);\n    \n    const startTime = Date.now();\n    const switchMetrics = new ExpertSwitchMetrics();\n    \n    try {\n      // 1. Safely end current expert session with performance capture\n      if (fromExpertId) {\n        const sessionEndMetrics = await this.endExpertSessionWithMetrics(fromExpertId);\n        switchMetrics.previousSessionMetrics = sessionEndMetrics;\n      }\n      \n      // 2. Validate target expert credentials authority status and competitive positioning\n      const expert = await this.validateExpertReadinessComprehensive(toExpertId);\n      switchMetrics.expertValidationTime = Date.now() - startTime;\n      \n      // 3. Load expert credentials market expertise and competitive intelligence\n      const expertCredentials = await this.expertCredentialsManager.loadExpertCredentialsWithValidation(\n        toExpertId,\n        expert.expertiseSpecialization\n      );\n      \n      const competitivePositioning = await this.competitiveIntelligenceEngine.analyzeExpertPositioning(\n        expert.expertiseSpecialization,\n        expert.primaryMarketLocation\n      );\n      \n      // 4. Assign dedicated proxy with geographic consistency and reputation validation\n      const proxyAssignment = await this.proxyManager.assignExpertProxyWithValidation(\n        toExpertId, \n        expert.primaryMarketLocation,\n        expert.reputationRequirements\n      );\n      switchMetrics.proxyAssignmentTime = Date.now() - startTime - switchMetrics.expertValidationTime;\n      \n      // 5. Create expert-isolated browser context with authority protection\n      const browserContext = await this.createExpertBrowserContextWithSecurity(\n        toExpertId,\n        proxyAssignment,\n        expert.browserConsistencyProfile,\n        expert.securityRequirements\n      );\n      \n      // 6. Initialize expert content creation environment with AI optimization tools\n      const expertContentEnvironment = await this.initializeExpertContentEnvironmentComprehensive(\n        browserContext,\n        expert,\n        expertCredentials,\n        competitivePositioning\n      );\n      \n      // 7. Load GEO optimization tools consultation management and performance tracking\n      const geoOptimizationTools = await this.geoOptimizationEngine.loadExpertOptimizationToolsComprehensive(\n        expert.expertiseSpecialization,\n        expert.authorityLevel,\n        competitivePositioning\n      );\n      \n      const consultationTools = await this.consultationManager.loadExpertConsultationTools(\n        expert.consultationSpecialization,\n        expert.leadGenerationStrategy\n      );\n      \n      // 8. Create active expert authority session with comprehensive tracking\n      const expertSession: ExpertAuthoritySession = {\n        expertId: toExpertId,\n        expert,\n        expertCredentials,\n        proxyAssignment,\n        browserContext,\n        expertContentEnvironment,\n        geoOptimizationTools,\n        consultationTools,\n        competitivePositioning,\n        startedAt: new Date(),\n        status: 'active',\n        authorityValidated: true,\n        switchDuration: Date.now() - startTime,\n        performanceMetrics: new ExpertPerformanceMetrics(),\n        switchMetrics\n      };\n      \n      this.activeExperts.set(toExpertId, expertSession);\n      \n      // 9. Track expert authority session for comprehensive performance analytics\n      await this.trackExpertSwitchWithAnalytics(fromExpertId, toExpertId, expertSession);\n      \n      // 10. Initialize real-time performance monitoring\n      await this.initializeExpertPerformanceMonitoring(expertSession);\n      \n      console.log(`✅ Expert switch completed in ${expertSession.switchDuration}ms`);\n      \n      return {\n        success: true,\n        expertId: toExpertId,\n        expertName: expert.expertName,\n        expertiseArea: expert.expertiseSpecialization,\n        authorityLevel: expert.authorityLevel,\n        switchDuration: expertSession.switchDuration,\n        proxyLocation: proxyAssignment.location,\n        platformsReady: expertContentEnvironment.geoplatformsReady,\n        authorityToolsLoaded: geoOptimizationTools.toolsLoaded,\n        consultationToolsReady: consultationTools.toolsReady,\n        contentCreationReady: true,\n        competitivePositioning: competitivePositioning.summary,\n        performanceTargets: expertSession.performanceMetrics.targets\n      };\n      \n    } catch (error) {\n      console.error(`❌ Expert switch failed: ${error.message}`);\n      \n      await this.handleExpertSwitchFailure(toExpertId, error, switchMetrics);\n      \n      return {\n        success: false,\n        expertId: toExpertId,\n        error: error.message,\n        switchDuration: Date.now() - startTime,\n        diagnostics: await this.generateSwitchFailureDiagnostics(toExpertId, error)\n      };\n    }\n  }\n  \n  // Expert Authority State Management with Real-Time Analytics\n  async getCurrentExpertAuthorityState(expertId: string): Promise<ExpertAuthorityState> {\n    const session = this.activeExperts.get(expertId);\n    \n    if (!session) {\n      return {\n        status: 'inactive',\n        readyForContentCreation: false,\n        authorityScore: 0,\n        lastActivity: null\n      };\n    }\n    \n    // Real-time validation of expert authority session health and performance\n    const authorityHealthCheck = await this.validateExpertAuthoritySessionHealthComprehensive(session);\n    const performanceAnalytics = await this.calculateRealTimeExpertPerformance(session);\n    const competitiveAnalysis = await this.getCompetitivePositioningUpdate(session.expertId);\n    \n    return {\n      status: session.status,\n      readyForContentCreation: authorityHealthCheck.healthy,\n      activeGEOPlatforms: session.expertContentEnvironment.activeGEOPlatforms,\n      authorityScore: session.expert.currentAuthorityScore,\n      authorityLevel: session.expert.authorityLevel,\n      expertiseValidated: authorityHealthCheck.expertiseValidated,\n      contentOptimizationReady: authorityHealthCheck.geoOptimizationReady,\n      consultationRequestsPending: await this.getConsultationRequestsCount(expertId),\n      recentAuthorityMetrics: performanceAnalytics.recentMetrics,\n      sessionDuration: Date.now() - session.startedAt.getTime(),\n      lastContentCreation: session.lastContentCreation,\n      aiCitationTracking: authorityHealthCheck.aiCitationTracking,\n      consultationConversionRate: performanceAnalytics.consultationConversionRate,\n      competitivePositioning: competitiveAnalysis.currentPosition,\n      performanceTargets: session.performanceMetrics.currentTargets,\n      roiMetrics: performanceAnalytics.roiMetrics,\n      authorityTrends: performanceAnalytics.authorityTrends\n    };\n  }\n  \n  // GEO Platform Integration Coordination with Authority Validation\n  async coordinateGEOPlatformAuthentication(\n    expertId: string,\n    geoPlatformType: string,\n    authContext: GEOPlatformAuthContext\n  ): Promise<GEOPlatformAuthResult> {\n    \n    const session = this.activeExperts.get(expertId);\n    if (!session) {\n      throw new Error('No active expert session');\n    }\n    \n    // GEO platform-specific authentication orchestration with expert validation\n    const geoPlatformManager = this.getGEOPlatformManager(geoPlatformType);\n    \n    const authResult = await geoPlatformManager.performExpertAuthenticationWithValidation(\n      session.browserContext,\n      session.expert,\n      session.expertCredentials,\n      geoPlatformType,\n      authContext\n    );\n    \n    // Update expert session state with platform-specific tools and analytics\n    if (authResult.success) {\n      session.expertContentEnvironment.activeGEOPlatforms.push(geoPlatformType);\n      session.lastActivity = new Date();\n      \n      // Load platform-specific expert positioning tools and competitive analysis\n      const platformExpertTools = await this.loadPlatformExpertToolsComprehensive(\n        geoPlatformType,\n        session.expert.expertiseSpecialization,\n        session.competitivePositioning\n      );\n      \n      session.expertContentEnvironment.platformExpertTools[geoPlatformType] = platformExpertTools;\n      \n      // Initialize platform-specific performance tracking\n      await this.initializePlatformPerformanceTracking(\n        expertId,\n        geoPlatformType,\n        session.performanceMetrics\n      );\n    }\n    \n    // Track expert platform authentication for comprehensive authority analytics\n    await this.trackExpertPlatformAuthenticationWithAnalytics(\n      expertId,\n      geoPlatformType,\n      authResult.success,\n      session.expert.authorityLevel,\n      authContext\n    );\n    \n    return authResult;\n  }\n  \n  // Expert Performance Optimization and Authority Building\n  async optimizeExpertPerformance(\n    expertId: string,\n    optimizationContext: ExpertOptimizationContext\n  ): Promise<ExpertOptimizationResult> {\n    \n    const session = this.activeExperts.get(expertId);\n    if (!session) {\n      throw new Error('No active expert session for optimization');\n    }\n    \n    // Analyze current expert performance across all dimensions\n    const performanceAnalysis = await this.analyzeExpertPerformanceComprehensive(session);\n    \n    // Generate optimization recommendations based on performance data\n    const optimizationRecommendations = await this.generateExpertOptimizationRecommendations(\n      performanceAnalysis,\n      session.competitivePositioning,\n      optimizationContext\n    );\n    \n    // Execute performance optimizations\n    const optimizationResults = await this.executeExpertOptimizations(\n      session,\n      optimizationRecommendations\n    );\n    \n    // Update expert performance targets and tracking\n    await this.updateExpertPerformanceTargets(session, optimizationResults);\n    \n    return {\n      expertId,\n      performanceAnalysis,\n      optimizationRecommendations,\n      optimizationResults,\n      projectedImprovement: await this.calculateProjectedImprovement(optimizationResults),\n      nextOptimizationSchedule: this.calculateNextOptimizationSchedule(optimizationResults)\n    };\n  }\n}\n\ninterface ExpertAuthoritySession {\n  expertId: string;\n  expert: ExpertProfile;\n  expertCredentials: ExpertCredentials;\n  proxyAssignment: ProxyAssignment;\n  browserContext: BrowserContext;\n  expertContentEnvironment: ExpertContentEnvironment;\n  geoOptimizationTools: GEOOptimizationTools;\n  consultationTools: ConsultationTools;\n  competitivePositioning: CompetitivePositioning;\n  startedAt: Date;\n  lastActivity?: Date;\n  lastContentCreation?: Date;\n  status: 'active' | 'idle' | 'ending';\n  authorityValidated: boolean;\n  switchDuration: number;\n  performanceMetrics: ExpertPerformanceMetrics;\n  switchMetrics: ExpertSwitchMetrics;\n}\n\ninterface ExpertContentEnvironment {\n  geoplatformsReady: string[];\n  activeGEOPlatforms: string[];\n  platformExpertTools: Map<string, PlatformExpertTools>;\n  contentTemplatesLoaded: boolean;\n  expertCredentialsValidated: boolean;\n  aiOptimizationEnabled: boolean;\n  consultationManagementReady: boolean;\n  competitiveIntelligenceActive: boolean;\n  performanceTrackingEnabled: boolean;\n}\n```\n\n### 2. GEO Content Creation Framework\n\n```typescript\nclass GEOContentCreationFramework {\n  private expertContentLibrary: ExpertContentLibrary;\n  private aiCitationOptimizer: AICitationOptimizer;\n  private authoritySignalEngine: AuthoritySignalEngine;\n  private consultationFunnelManager: ConsultationFunnelManager;\n  private competitiveContentAnalyzer: CompetitiveContentAnalyzer;\n  private contentQualityAssurance: ContentQualityAssurance;\n  private roiOptimizer: ContentROIOptimizer;\n  \n  // Expert Authority Content Creation with Comprehensive Optimization\n  async createExpertAuthorityContentComprehensive(\n    expertId: string,\n    contentRequest: ExpertContentRequest,\n    creationContext: ContentCreationContext\n  ): Promise<ExpertContentResult> {\n    \n    console.log(`📝 Creating comprehensive expert authority content for ${expertId}`);\n    \n    try {\n      // 1. Load expert credentials market expertise and competitive positioning\n      const expert = await this.getExpertProfile(expertId);\n      const expertiseContext = await this.loadExpertiseContextComprehensive(\n        expert.expertiseSpecialization,\n        contentRequest.topicArea,\n        creationContext.competitiveContext\n      );\n      \n      // 2. Analyze competitive landscape and identify content opportunities\n      const competitiveAnalysis = await this.competitiveContentAnalyzer.analyzeContentOpportunity(\n        contentRequest.topicArea,\n        expert.expertiseSpecialization,\n        contentRequest.targetAudience\n      );\n      \n      // 3. Identify relevant comprehensive content templates with AI optimization\n      const expertContentTemplates = await this.expertContentLibrary\n        .getExpertTemplatesForSpecializationComprehensive(\n          expert.expertiseSpecialization,\n          contentRequest.contentType,\n          contentRequest.targetAudience,\n          competitiveAnalysis.contentGaps\n        );\n      \n      // 4. Apply advanced AI citation optimization for expert authority positioning\n      const aiCitationOptimization = await this.aiCitationOptimizer\n        .optimizeForExpertCitationComprehensive(\n          contentRequest.content,\n          expert,\n          contentRequest.targetAIQueries,\n          competitiveAnalysis.citationOpportunities\n        );\n      \n      // 5. Integrate expert authority signals and credibility markers\n      const authoritySignals = await this.authoritySignalEngine\n        .generateExpertAuthoritySignalsComprehensive(\n          expert,\n          contentRequest,\n          expertiseContext,\n          competitiveAnalysis.authorityOpportunities\n        );\n      \n      // 6. Embed consultation conversion opportunities with ROI optimization\n      const consultationIntegration = await this.consultationFunnelManager\n        .integrateConsultationOpportunitiesOptimized(\n          contentRequest,\n          expert.consultationSpecialization,\n          expert.leadGenerationStrategy,\n          creationContext.conversionTargets\n        );\n      \n      // 7. Apply content quality assurance and performance optimization\n      const qualityAssurance = await this.contentQualityAssurance\n        .validateExpertContentQuality(\n          contentRequest,\n          expert,\n          aiCitationOptimization,\n          authoritySignals\n        );\n      \n      // 8. Optimize content for ROI and conversion performance\n      const roiOptimization = await this.roiOptimizer\n        .optimizeContentForROI(\n          contentRequest,\n          expert,\n          consultationIntegration,\n          creationContext.roiTargets\n        );\n      \n      // 9. Create comprehensive expert content framework with analytics\n      const expertContentFramework = await this.buildExpertContentFrameworkComprehensive(\n        contentRequest,\n        expert,\n        aiCitationOptimization,\n        authoritySignals,\n        consultationIntegration,\n        qualityAssurance,\n        roiOptimization\n      );\n      \n      return {\n        expertContext: expert,\n        expertiseValidation: expertiseContext,\n        competitiveAnalysis,\n        contentTemplateRecommendations: expertContentTemplates,\n        aiCitationOptimization,\n        authoritySignals,\n        consultationIntegration,\n        qualityAssurance,\n        roiOptimization,\n        expertContentFramework,\n        readyForExpertCreation: true,\n        estimatedCreationTime: this.estimateExpertContentCreationTimeAdvanced(\n          contentRequest.complexity,\n          contentRequest.contentDepth,\n          qualityAssurance.qualityRequirements\n        ),\n        performanceProjections: await this.calculateContentPerformanceProjections(\n          expertContentFramework,\n          expert,\n          competitiveAnalysis\n        )\n      };\n      \n    } catch (error) {\n      console.error(`❌ Expert content creation setup failed: ${error.message}`);\n      throw error;\n    }\n  }\n  \n  // Comprehensive Expert Content Template System with Performance Analytics\n  async getPersonalizedExpertContentTemplateAdvanced(\n    templateId: string,\n    expertId: string,\n    customizations: ExpertContentCustomizations,\n    optimizationContext: TemplateOptimizationContext\n  ): Promise<PersonalizedExpertTemplateAdvanced> {\n    \n    const baseTemplate = await this.expertContentLibrary.getExpertTemplateComprehensive(templateId);\n    const expert = await this.getExpertProfile(expertId);\n    const templatePerformanceHistory = await this.getTemplatePerformanceHistory(templateId, expertId);\n    \n    // Apply expert-specific customizations with performance optimization\n    const personalizedExpertTemplate = {\n      ...baseTemplate,\n      \n      // Expert authority voice application with consistency validation\n      expertContent: this.applyExpertAuthorityVoiceAdvanced(\n        baseTemplate.content, \n        expert,\n        templatePerformanceHistory.voiceConsistencyMetrics\n      ),\n      \n      // Market expertise integration with competitive differentiation\n      marketExpertiseIntegration: this.integrateMarketExpertiseAdvanced(\n        baseTemplate.marketInsightSlots,\n        expert.marketExperience,\n        expert.primaryMarketLocation,\n        optimizationContext.competitiveDifferentiation\n      ),\n      \n      // AI citation optimization integration with performance tracking\n      aiCitationElements: await this.aiCitationOptimizer.enhanceExpertTemplateAdvanced(\n        baseTemplate,\n        expert.expertiseSpecialization,\n        expert.authorityLevel,\n        optimizationContext.citationTargets\n      ),\n      \n      // Expert consultation hooks with conversion optimization\n      consultationConversionHooks: this.personalizeExpertConsultationHooksOptimized(\n        baseTemplate.consultationHooks,\n        expert.consultationSpecialization,\n        expert.leadGenerationStrategy,\n        templatePerformanceHistory.conversionMetrics","size_bytes":65054},"dist/client/assets/index-5785d819.css":{"content":"*,:before,:after{--tw-border-spacing-x: 0;--tw-border-spacing-y: 0;--tw-translate-x: 0;--tw-translate-y: 0;--tw-rotate: 0;--tw-skew-x: 0;--tw-skew-y: 0;--tw-scale-x: 1;--tw-scale-y: 1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness: proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width: 0px;--tw-ring-offset-color: #fff;--tw-ring-color: rgb(59 130 246 / .5);--tw-ring-offset-shadow: 0 0 #0000;--tw-ring-shadow: 0 0 #0000;--tw-shadow: 0 0 #0000;--tw-shadow-colored: 0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::backdrop{--tw-border-spacing-x: 0;--tw-border-spacing-y: 0;--tw-translate-x: 0;--tw-translate-y: 0;--tw-rotate: 0;--tw-skew-x: 0;--tw-skew-y: 0;--tw-scale-x: 1;--tw-scale-y: 1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness: proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width: 0px;--tw-ring-offset-color: #fff;--tw-ring-color: rgb(59 130 246 / .5);--tw-ring-offset-shadow: 0 0 #0000;--tw-ring-shadow: 0 0 #0000;--tw-shadow: 0 0 #0000;--tw-shadow-colored: 0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }*,:before,:after{box-sizing:border-box;border-width:0;border-style:solid;border-color:#e5e7eb}:before,:after{--tw-content: \"\"}html,:host{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;-o-tab-size:4;tab-size:4;font-family:ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",Segoe UI Symbol,\"Noto Color Emoji\";font-feature-settings:normal;font-variation-settings:normal;-webkit-tap-highlight-color:transparent}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-feature-settings:normal;font-variation-settings:normal;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-feature-settings:inherit;font-variation-settings:inherit;font-size:100%;font-weight:inherit;line-height:inherit;letter-spacing:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}button,input:where([type=button]),input:where([type=reset]),input:where([type=submit]){-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dl,dd,h1,h2,h3,h4,h5,h6,hr,figure,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}ol,ul,menu{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::-moz-placeholder,textarea::-moz-placeholder{opacity:1;color:#9ca3af}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}button,[role=button]{cursor:pointer}:disabled{cursor:default}img,svg,video,canvas,audio,iframe,embed,object{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]:where(:not([hidden=until-found])){display:none}body{font-family:system-ui,-apple-system,sans-serif}.container{width:100%}@media (min-width: 640px){.container{max-width:640px}}@media (min-width: 768px){.container{max-width:768px}}@media (min-width: 1024px){.container{max-width:1024px}}@media (min-width: 1280px){.container{max-width:1280px}}@media (min-width: 1536px){.container{max-width:1536px}}.btn-primary{border-radius:.375rem;--tw-bg-opacity: 1;background-color:rgb(37 99 235 / var(--tw-bg-opacity, 1));padding:.5rem 1rem;font-weight:500;--tw-text-opacity: 1;color:rgb(255 255 255 / var(--tw-text-opacity, 1));transition-property:color,background-color,border-color,text-decoration-color,fill,stroke;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.btn-primary:hover{--tw-bg-opacity: 1;background-color:rgb(29 78 216 / var(--tw-bg-opacity, 1))}.btn-primary:focus{outline:2px solid transparent;outline-offset:2px;--tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow, 0 0 #0000);--tw-ring-opacity: 1;--tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity, 1));--tw-ring-offset-width: 2px}.card{border-radius:.5rem;border-width:1px;--tw-border-opacity: 1;border-color:rgb(229 231 235 / var(--tw-border-opacity, 1));--tw-bg-opacity: 1;background-color:rgb(255 255 255 / var(--tw-bg-opacity, 1));--tw-shadow: 0 1px 2px 0 rgb(0 0 0 / .05);--tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow)}.mx-auto{margin-left:auto;margin-right:auto}.mb-2{margin-bottom:.5rem}.mb-4{margin-bottom:1rem}.ml-2{margin-left:.5rem}.ml-4{margin-left:1rem}.mt-2{margin-top:.5rem}.flex{display:flex}.grid{display:grid}.h-12{height:3rem}.h-16{height:4rem}.h-6{height:1.5rem}.min-h-screen{min-height:100vh}.w-12{width:3rem}.w-6{width:1.5rem}.grid-cols-1{grid-template-columns:repeat(1,minmax(0,1fr))}.items-center{align-items:center}.justify-between{justify-content:space-between}.gap-6{gap:1.5rem}.gap-8{gap:2rem}.space-x-2>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(.5rem * var(--tw-space-x-reverse));margin-left:calc(.5rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-4>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(1rem * var(--tw-space-x-reverse));margin-left:calc(1rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-8>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(2rem * var(--tw-space-x-reverse));margin-left:calc(2rem * calc(1 - var(--tw-space-x-reverse)))}.space-y-4>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(1rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(1rem * var(--tw-space-y-reverse))}.space-y-6>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(1.5rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(1.5rem * var(--tw-space-y-reverse))}.space-y-8>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(2rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(2rem * var(--tw-space-y-reverse))}.rounded{border-radius:.25rem}.rounded-full{border-radius:9999px}.rounded-md{border-radius:.375rem}.border-b{border-bottom-width:1px}.border-gray-200{--tw-border-opacity: 1;border-color:rgb(229 231 235 / var(--tw-border-opacity, 1))}.bg-authority-gold{--tw-bg-opacity: 1;background-color:rgb(255 215 0 / var(--tw-bg-opacity, 1))}.bg-blue-100{--tw-bg-opacity: 1;background-color:rgb(219 234 254 / var(--tw-bg-opacity, 1))}.bg-blue-500{--tw-bg-opacity: 1;background-color:rgb(59 130 246 / var(--tw-bg-opacity, 1))}.bg-gray-100{--tw-bg-opacity: 1;background-color:rgb(243 244 246 / var(--tw-bg-opacity, 1))}.bg-gray-50{--tw-bg-opacity: 1;background-color:rgb(249 250 251 / var(--tw-bg-opacity, 1))}.bg-green-500{--tw-bg-opacity: 1;background-color:rgb(34 197 94 / var(--tw-bg-opacity, 1))}.bg-philippines-blue{--tw-bg-opacity: 1;background-color:rgb(0 56 168 / var(--tw-bg-opacity, 1))}.bg-purple-500{--tw-bg-opacity: 1;background-color:rgb(168 85 247 / var(--tw-bg-opacity, 1))}.bg-white{--tw-bg-opacity: 1;background-color:rgb(255 255 255 / var(--tw-bg-opacity, 1))}.p-3{padding:.75rem}.p-6{padding:1.5rem}.px-2{padding-left:.5rem;padding-right:.5rem}.px-3{padding-left:.75rem;padding-right:.75rem}.px-4{padding-left:1rem;padding-right:1rem}.py-1{padding-top:.25rem;padding-bottom:.25rem}.py-2{padding-top:.5rem;padding-bottom:.5rem}.py-8{padding-top:2rem;padding-bottom:2rem}.text-center{text-align:center}.text-2xl{font-size:1.5rem;line-height:2rem}.text-3xl{font-size:1.875rem;line-height:2.25rem}.text-lg{font-size:1.125rem;line-height:1.75rem}.text-sm{font-size:.875rem;line-height:1.25rem}.text-xl{font-size:1.25rem;line-height:1.75rem}.text-xs{font-size:.75rem;line-height:1rem}.font-bold{font-weight:700}.font-medium{font-weight:500}.font-semibold{font-weight:600}.text-blue-800{--tw-text-opacity: 1;color:rgb(30 64 175 / var(--tw-text-opacity, 1))}.text-gray-400{--tw-text-opacity: 1;color:rgb(156 163 175 / var(--tw-text-opacity, 1))}.text-gray-500{--tw-text-opacity: 1;color:rgb(107 114 128 / var(--tw-text-opacity, 1))}.text-gray-600{--tw-text-opacity: 1;color:rgb(75 85 99 / var(--tw-text-opacity, 1))}.text-gray-700{--tw-text-opacity: 1;color:rgb(55 65 81 / var(--tw-text-opacity, 1))}.text-gray-800{--tw-text-opacity: 1;color:rgb(31 41 55 / var(--tw-text-opacity, 1))}.text-gray-900{--tw-text-opacity: 1;color:rgb(17 24 39 / var(--tw-text-opacity, 1))}.text-philippines-blue{--tw-text-opacity: 1;color:rgb(0 56 168 / var(--tw-text-opacity, 1))}.text-white{--tw-text-opacity: 1;color:rgb(255 255 255 / var(--tw-text-opacity, 1))}.transition-colors{transition-property:color,background-color,border-color,text-decoration-color,fill,stroke;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.hover\\:bg-gray-100:hover{--tw-bg-opacity: 1;background-color:rgb(243 244 246 / var(--tw-bg-opacity, 1))}@media (min-width: 768px){.md\\:grid-cols-2{grid-template-columns:repeat(2,minmax(0,1fr))}}@media (min-width: 1024px){.lg\\:grid-cols-2{grid-template-columns:repeat(2,minmax(0,1fr))}.lg\\:grid-cols-4{grid-template-columns:repeat(4,minmax(0,1fr))}}\n","size_bytes":11130},"dist/client/assets/index-6b342e2b.js":{"content":"function Ef(e,t){for(var n=0;n<t.length;n++){const r=t[n];if(typeof r!=\"string\"&&!Array.isArray(r)){for(const l in r)if(l!==\"default\"&&!(l in e)){const i=Object.getOwnPropertyDescriptor(r,l);i&&Object.defineProperty(e,l,i.get?i:{enumerable:!0,get:()=>r[l]})}}}return Object.freeze(Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}))}(function(){const t=document.createElement(\"link\").relList;if(t&&t.supports&&t.supports(\"modulepreload\"))return;for(const l of document.querySelectorAll('link[rel=\"modulepreload\"]'))r(l);new MutationObserver(l=>{for(const i of l)if(i.type===\"childList\")for(const o of i.addedNodes)o.tagName===\"LINK\"&&o.rel===\"modulepreload\"&&r(o)}).observe(document,{childList:!0,subtree:!0});function n(l){const i={};return l.integrity&&(i.integrity=l.integrity),l.referrerPolicy&&(i.referrerPolicy=l.referrerPolicy),l.crossOrigin===\"use-credentials\"?i.credentials=\"include\":l.crossOrigin===\"anonymous\"?i.credentials=\"omit\":i.credentials=\"same-origin\",i}function r(l){if(l.ep)return;l.ep=!0;const i=n(l);fetch(l.href,i)}})();function Pf(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\"default\")?e.default:e}var Hs={exports:{}},Sl={},Ws={exports:{}},z={};/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */var ur=Symbol.for(\"react.element\"),Nf=Symbol.for(\"react.portal\"),_f=Symbol.for(\"react.fragment\"),Of=Symbol.for(\"react.strict_mode\"),Rf=Symbol.for(\"react.profiler\"),jf=Symbol.for(\"react.provider\"),Lf=Symbol.for(\"react.context\"),Tf=Symbol.for(\"react.forward_ref\"),zf=Symbol.for(\"react.suspense\"),Ff=Symbol.for(\"react.memo\"),Mf=Symbol.for(\"react.lazy\"),gu=Symbol.iterator;function Df(e){return e===null||typeof e!=\"object\"?null:(e=gu&&e[gu]||e[\"@@iterator\"],typeof e==\"function\"?e:null)}var Ks={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},qs=Object.assign,Gs={};function vn(e,t,n){this.props=e,this.context=t,this.refs=Gs,this.updater=n||Ks}vn.prototype.isReactComponent={};vn.prototype.setState=function(e,t){if(typeof e!=\"object\"&&typeof e!=\"function\"&&e!=null)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,e,t,\"setState\")};vn.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,\"forceUpdate\")};function Ys(){}Ys.prototype=vn.prototype;function yo(e,t,n){this.props=e,this.context=t,this.refs=Gs,this.updater=n||Ks}var go=yo.prototype=new Ys;go.constructor=yo;qs(go,vn.prototype);go.isPureReactComponent=!0;var wu=Array.isArray,Xs=Object.prototype.hasOwnProperty,wo={current:null},Zs={key:!0,ref:!0,__self:!0,__source:!0};function Js(e,t,n){var r,l={},i=null,o=null;if(t!=null)for(r in t.ref!==void 0&&(o=t.ref),t.key!==void 0&&(i=\"\"+t.key),t)Xs.call(t,r)&&!Zs.hasOwnProperty(r)&&(l[r]=t[r]);var u=arguments.length-2;if(u===1)l.children=n;else if(1<u){for(var s=Array(u),a=0;a<u;a++)s[a]=arguments[a+2];l.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps,u)l[r]===void 0&&(l[r]=u[r]);return{$$typeof:ur,type:e,key:i,ref:o,props:l,_owner:wo.current}}function If(e,t){return{$$typeof:ur,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function xo(e){return typeof e==\"object\"&&e!==null&&e.$$typeof===ur}function Uf(e){var t={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+e.replace(/[=:]/g,function(n){return t[n]})}var xu=/\\/+/g;function Vl(e,t){return typeof e==\"object\"&&e!==null&&e.key!=null?Uf(\"\"+e.key):t.toString(36)}function Mr(e,t,n,r,l){var i=typeof e;(i===\"undefined\"||i===\"boolean\")&&(e=null);var o=!1;if(e===null)o=!0;else switch(i){case\"string\":case\"number\":o=!0;break;case\"object\":switch(e.$$typeof){case ur:case Nf:o=!0}}if(o)return o=e,l=l(o),e=r===\"\"?\".\"+Vl(o,0):r,wu(l)?(n=\"\",e!=null&&(n=e.replace(xu,\"$&/\")+\"/\"),Mr(l,t,n,\"\",function(a){return a})):l!=null&&(xo(l)&&(l=If(l,n+(!l.key||o&&o.key===l.key?\"\":(\"\"+l.key).replace(xu,\"$&/\")+\"/\")+e)),t.push(l)),1;if(o=0,r=r===\"\"?\".\":r+\":\",wu(e))for(var u=0;u<e.length;u++){i=e[u];var s=r+Vl(i,u);o+=Mr(i,t,n,s,l)}else if(s=Df(e),typeof s==\"function\")for(e=s.call(e),u=0;!(i=e.next()).done;)i=i.value,s=r+Vl(i,u++),o+=Mr(i,t,n,s,l);else if(i===\"object\")throw t=String(e),Error(\"Objects are not valid as a React child (found: \"+(t===\"[object Object]\"?\"object with keys {\"+Object.keys(e).join(\", \")+\"}\":t)+\"). If you meant to render a collection of children, use an array instead.\");return o}function yr(e,t,n){if(e==null)return e;var r=[],l=0;return Mr(e,r,\"\",\"\",function(i){return t.call(n,i,l++)}),r}function Af(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(n){(e._status===0||e._status===-1)&&(e._status=1,e._result=n)},function(n){(e._status===0||e._status===-1)&&(e._status=2,e._result=n)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var fe={current:null},Dr={transition:null},$f={ReactCurrentDispatcher:fe,ReactCurrentBatchConfig:Dr,ReactCurrentOwner:wo};function bs(){throw Error(\"act(...) is not supported in production builds of React.\")}z.Children={map:yr,forEach:function(e,t,n){yr(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return yr(e,function(){t++}),t},toArray:function(e){return yr(e,function(t){return t})||[]},only:function(e){if(!xo(e))throw Error(\"React.Children.only expected to receive a single React element child.\");return e}};z.Component=vn;z.Fragment=_f;z.Profiler=Rf;z.PureComponent=yo;z.StrictMode=Of;z.Suspense=zf;z.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=$f;z.act=bs;z.cloneElement=function(e,t,n){if(e==null)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+e+\".\");var r=qs({},e.props),l=e.key,i=e.ref,o=e._owner;if(t!=null){if(t.ref!==void 0&&(i=t.ref,o=wo.current),t.key!==void 0&&(l=\"\"+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)Xs.call(t,s)&&!Zs.hasOwnProperty(s)&&(r[s]=t[s]===void 0&&u!==void 0?u[s]:t[s])}var s=arguments.length-2;if(s===1)r.children=n;else if(1<s){u=Array(s);for(var a=0;a<s;a++)u[a]=arguments[a+2];r.children=u}return{$$typeof:ur,type:e.type,key:l,ref:i,props:r,_owner:o}};z.createContext=function(e){return e={$$typeof:Lf,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:jf,_context:e},e.Consumer=e};z.createElement=Js;z.createFactory=function(e){var t=Js.bind(null,e);return t.type=e,t};z.createRef=function(){return{current:null}};z.forwardRef=function(e){return{$$typeof:Tf,render:e}};z.isValidElement=xo;z.lazy=function(e){return{$$typeof:Mf,_payload:{_status:-1,_result:e},_init:Af}};z.memo=function(e,t){return{$$typeof:Ff,type:e,compare:t===void 0?null:t}};z.startTransition=function(e){var t=Dr.transition;Dr.transition={};try{e()}finally{Dr.transition=t}};z.unstable_act=bs;z.useCallback=function(e,t){return fe.current.useCallback(e,t)};z.useContext=function(e){return fe.current.useContext(e)};z.useDebugValue=function(){};z.useDeferredValue=function(e){return fe.current.useDeferredValue(e)};z.useEffect=function(e,t){return fe.current.useEffect(e,t)};z.useId=function(){return fe.current.useId()};z.useImperativeHandle=function(e,t,n){return fe.current.useImperativeHandle(e,t,n)};z.useInsertionEffect=function(e,t){return fe.current.useInsertionEffect(e,t)};z.useLayoutEffect=function(e,t){return fe.current.useLayoutEffect(e,t)};z.useMemo=function(e,t){return fe.current.useMemo(e,t)};z.useReducer=function(e,t,n){return fe.current.useReducer(e,t,n)};z.useRef=function(e){return fe.current.useRef(e)};z.useState=function(e){return fe.current.useState(e)};z.useSyncExternalStore=function(e,t,n){return fe.current.useSyncExternalStore(e,t,n)};z.useTransition=function(){return fe.current.useTransition()};z.version=\"18.3.1\";Ws.exports=z;var _=Ws.exports;const ea=Pf(_),Bf=Ef({__proto__:null,default:ea},[_]);/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */var Qf=_,Vf=Symbol.for(\"react.element\"),Hf=Symbol.for(\"react.fragment\"),Wf=Object.prototype.hasOwnProperty,Kf=Qf.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,qf={key:!0,ref:!0,__self:!0,__source:!0};function ta(e,t,n){var r,l={},i=null,o=null;n!==void 0&&(i=\"\"+n),t.key!==void 0&&(i=\"\"+t.key),t.ref!==void 0&&(o=t.ref);for(r in t)Wf.call(t,r)&&!qf.hasOwnProperty(r)&&(l[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps,t)l[r]===void 0&&(l[r]=t[r]);return{$$typeof:Vf,type:e,key:i,ref:o,props:l,_owner:Kf.current}}Sl.Fragment=Hf;Sl.jsx=ta;Sl.jsxs=ta;Hs.exports=Sl;var k=Hs.exports,yi={},na={exports:{}},ke={},ra={exports:{}},la={};/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */(function(e){function t(R,j){var T=R.length;R.push(j);e:for(;0<T;){var W=T-1>>>1,Z=R[W];if(0<l(Z,j))R[W]=j,R[T]=Z,T=W;else break e}}function n(R){return R.length===0?null:R[0]}function r(R){if(R.length===0)return null;var j=R[0],T=R.pop();if(T!==j){R[0]=T;e:for(var W=0,Z=R.length,mr=Z>>>1;W<mr;){var Ct=2*(W+1)-1,Ql=R[Ct],Et=Ct+1,vr=R[Et];if(0>l(Ql,T))Et<Z&&0>l(vr,Ql)?(R[W]=vr,R[Et]=T,W=Et):(R[W]=Ql,R[Ct]=T,W=Ct);else if(Et<Z&&0>l(vr,T))R[W]=vr,R[Et]=T,W=Et;else break e}}return j}function l(R,j){var T=R.sortIndex-j.sortIndex;return T!==0?T:R.id-j.id}if(typeof performance==\"object\"&&typeof performance.now==\"function\"){var i=performance;e.unstable_now=function(){return i.now()}}else{var o=Date,u=o.now();e.unstable_now=function(){return o.now()-u}}var s=[],a=[],h=1,p=null,m=3,v=!1,g=!1,w=!1,x=typeof setTimeout==\"function\"?setTimeout:null,f=typeof clearTimeout==\"function\"?clearTimeout:null,c=typeof setImmediate<\"u\"?setImmediate:null;typeof navigator<\"u\"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function d(R){for(var j=n(a);j!==null;){if(j.callback===null)r(a);else if(j.startTime<=R)r(a),j.sortIndex=j.expirationTime,t(s,j);else break;j=n(a)}}function y(R){if(w=!1,d(R),!g)if(n(s)!==null)g=!0,$l(P);else{var j=n(a);j!==null&&Bl(y,j.startTime-R)}}function P(R,j){g=!1,w&&(w=!1,f(N),N=-1),v=!0;var T=m;try{for(d(j),p=n(s);p!==null&&(!(p.expirationTime>j)||R&&!ue());){var W=p.callback;if(typeof W==\"function\"){p.callback=null,m=p.priorityLevel;var Z=W(p.expirationTime<=j);j=e.unstable_now(),typeof Z==\"function\"?p.callback=Z:p===n(s)&&r(s),d(j)}else r(s);p=n(s)}if(p!==null)var mr=!0;else{var Ct=n(a);Ct!==null&&Bl(y,Ct.startTime-j),mr=!1}return mr}finally{p=null,m=T,v=!1}}var E=!1,C=null,N=-1,M=5,L=-1;function ue(){return!(e.unstable_now()-L<M)}function Qt(){if(C!==null){var R=e.unstable_now();L=R;var j=!0;try{j=C(!0,R)}finally{j?kt():(E=!1,C=null)}}else E=!1}var kt;if(typeof c==\"function\")kt=function(){c(Qt)};else if(typeof MessageChannel<\"u\"){var yu=new MessageChannel,Cf=yu.port2;yu.port1.onmessage=Qt,kt=function(){Cf.postMessage(null)}}else kt=function(){x(Qt,0)};function $l(R){C=R,E||(E=!0,kt())}function Bl(R,j){N=x(function(){R(e.unstable_now())},j)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(R){R.callback=null},e.unstable_continueExecution=function(){g||v||(g=!0,$l(P))},e.unstable_forceFrameRate=function(R){0>R||125<R?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):M=0<R?Math.floor(1e3/R):5},e.unstable_getCurrentPriorityLevel=function(){return m},e.unstable_getFirstCallbackNode=function(){return n(s)},e.unstable_next=function(R){switch(m){case 1:case 2:case 3:var j=3;break;default:j=m}var T=m;m=j;try{return R()}finally{m=T}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(R,j){switch(R){case 1:case 2:case 3:case 4:case 5:break;default:R=3}var T=m;m=R;try{return j()}finally{m=T}},e.unstable_scheduleCallback=function(R,j,T){var W=e.unstable_now();switch(typeof T==\"object\"&&T!==null?(T=T.delay,T=typeof T==\"number\"&&0<T?W+T:W):T=W,R){case 1:var Z=-1;break;case 2:Z=250;break;case 5:Z=1073741823;break;case 4:Z=1e4;break;default:Z=5e3}return Z=T+Z,R={id:h++,callback:j,priorityLevel:R,startTime:T,expirationTime:Z,sortIndex:-1},T>W?(R.sortIndex=T,t(a,R),n(s)===null&&R===n(a)&&(w?(f(N),N=-1):w=!0,Bl(y,T-W))):(R.sortIndex=Z,t(s,R),g||v||(g=!0,$l(P))),R},e.unstable_shouldYield=ue,e.unstable_wrapCallback=function(R){var j=m;return function(){var T=m;m=j;try{return R.apply(this,arguments)}finally{m=T}}}})(la);ra.exports=la;var Gf=ra.exports;/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */var Yf=_,Se=Gf;function S(e){for(var t=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+e,n=1;n<arguments.length;n++)t+=\"&args[]=\"+encodeURIComponent(arguments[n]);return\"Minified React error #\"+e+\"; visit \"+t+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}var ia=new Set,Qn={};function Ut(e,t){an(e,t),an(e+\"Capture\",t)}function an(e,t){for(Qn[e]=t,e=0;e<t.length;e++)ia.add(t[e])}var Ge=!(typeof window>\"u\"||typeof window.document>\"u\"||typeof window.document.createElement>\"u\"),gi=Object.prototype.hasOwnProperty,Xf=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,Su={},ku={};function Zf(e){return gi.call(ku,e)?!0:gi.call(Su,e)?!1:Xf.test(e)?ku[e]=!0:(Su[e]=!0,!1)}function Jf(e,t,n,r){if(n!==null&&n.type===0)return!1;switch(typeof t){case\"function\":case\"symbol\":return!0;case\"boolean\":return r?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!==\"data-\"&&e!==\"aria-\");default:return!1}}function bf(e,t,n,r){if(t===null||typeof t>\"u\"||Jf(e,t,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function de(e,t,n,r,l,i,o){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=l,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=o}var ne={};\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(e){ne[e]=new de(e,0,!1,e,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(e){var t=e[0];ne[t]=new de(t,1,!1,e[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(e){ne[e]=new de(e,2,!1,e.toLowerCase(),null,!1,!1)});[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(e){ne[e]=new de(e,2,!1,e,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(e){ne[e]=new de(e,3,!1,e.toLowerCase(),null,!1,!1)});[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(e){ne[e]=new de(e,3,!0,e,null,!1,!1)});[\"capture\",\"download\"].forEach(function(e){ne[e]=new de(e,4,!1,e,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(e){ne[e]=new de(e,6,!1,e,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(e){ne[e]=new de(e,5,!1,e.toLowerCase(),null,!1,!1)});var So=/[\\-:]([a-z])/g;function ko(e){return e[1].toUpperCase()}\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(e){var t=e.replace(So,ko);ne[t]=new de(t,1,!1,e,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(e){var t=e.replace(So,ko);ne[t]=new de(t,1,!1,e,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(e){var t=e.replace(So,ko);ne[t]=new de(t,1,!1,e,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(e){ne[e]=new de(e,1,!1,e.toLowerCase(),null,!1,!1)});ne.xlinkHref=new de(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(e){ne[e]=new de(e,1,!1,e.toLowerCase(),null,!0,!0)});function Co(e,t,n,r){var l=ne.hasOwnProperty(t)?ne[t]:null;(l!==null?l.type!==0:r||!(2<t.length)||t[0]!==\"o\"&&t[0]!==\"O\"||t[1]!==\"n\"&&t[1]!==\"N\")&&(bf(t,n,l,r)&&(n=null),r||l===null?Zf(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,\"\"+n)):l.mustUseProperty?e[l.propertyName]=n===null?l.type===3?!1:\"\":n:(t=l.attributeName,r=l.attributeNamespace,n===null?e.removeAttribute(t):(l=l.type,n=l===3||l===4&&n===!0?\"\":\"\"+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}var Je=Yf.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,gr=Symbol.for(\"react.element\"),Ht=Symbol.for(\"react.portal\"),Wt=Symbol.for(\"react.fragment\"),Eo=Symbol.for(\"react.strict_mode\"),wi=Symbol.for(\"react.profiler\"),oa=Symbol.for(\"react.provider\"),ua=Symbol.for(\"react.context\"),Po=Symbol.for(\"react.forward_ref\"),xi=Symbol.for(\"react.suspense\"),Si=Symbol.for(\"react.suspense_list\"),No=Symbol.for(\"react.memo\"),et=Symbol.for(\"react.lazy\"),sa=Symbol.for(\"react.offscreen\"),Cu=Symbol.iterator;function xn(e){return e===null||typeof e!=\"object\"?null:(e=Cu&&e[Cu]||e[\"@@iterator\"],typeof e==\"function\"?e:null)}var V=Object.assign,Hl;function On(e){if(Hl===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\\n( *(at )?)/);Hl=t&&t[1]||\"\"}return`\n`+Hl+e}var Wl=!1;function Kl(e,t){if(!e||Wl)return\"\";Wl=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,\"props\",{set:function(){throw Error()}}),typeof Reflect==\"object\"&&Reflect.construct){try{Reflect.construct(t,[])}catch(a){var r=a}Reflect.construct(e,[],t)}else{try{t.call()}catch(a){r=a}e.call(t.prototype)}else{try{throw Error()}catch(a){r=a}e()}}catch(a){if(a&&r&&typeof a.stack==\"string\"){for(var l=a.stack.split(`\n`),i=r.stack.split(`\n`),o=l.length-1,u=i.length-1;1<=o&&0<=u&&l[o]!==i[u];)u--;for(;1<=o&&0<=u;o--,u--)if(l[o]!==i[u]){if(o!==1||u!==1)do if(o--,u--,0>u||l[o]!==i[u]){var s=`\n`+l[o].replace(\" at new \",\" at \");return e.displayName&&s.includes(\"<anonymous>\")&&(s=s.replace(\"<anonymous>\",e.displayName)),s}while(1<=o&&0<=u);break}}}finally{Wl=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:\"\")?On(e):\"\"}function ed(e){switch(e.tag){case 5:return On(e.type);case 16:return On(\"Lazy\");case 13:return On(\"Suspense\");case 19:return On(\"SuspenseList\");case 0:case 2:case 15:return e=Kl(e.type,!1),e;case 11:return e=Kl(e.type.render,!1),e;case 1:return e=Kl(e.type,!0),e;default:return\"\"}}function ki(e){if(e==null)return null;if(typeof e==\"function\")return e.displayName||e.name||null;if(typeof e==\"string\")return e;switch(e){case Wt:return\"Fragment\";case Ht:return\"Portal\";case wi:return\"Profiler\";case Eo:return\"StrictMode\";case xi:return\"Suspense\";case Si:return\"SuspenseList\"}if(typeof e==\"object\")switch(e.$$typeof){case ua:return(e.displayName||\"Context\")+\".Consumer\";case oa:return(e._context.displayName||\"Context\")+\".Provider\";case Po:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||\"\",e=e!==\"\"?\"ForwardRef(\"+e+\")\":\"ForwardRef\"),e;case No:return t=e.displayName||null,t!==null?t:ki(e.type)||\"Memo\";case et:t=e._payload,e=e._init;try{return ki(e(t))}catch{}}return null}function td(e){var t=e.type;switch(e.tag){case 24:return\"Cache\";case 9:return(t.displayName||\"Context\")+\".Consumer\";case 10:return(t._context.displayName||\"Context\")+\".Provider\";case 18:return\"DehydratedFragment\";case 11:return e=t.render,e=e.displayName||e.name||\"\",t.displayName||(e!==\"\"?\"ForwardRef(\"+e+\")\":\"ForwardRef\");case 7:return\"Fragment\";case 5:return t;case 4:return\"Portal\";case 3:return\"Root\";case 6:return\"Text\";case 16:return ki(t);case 8:return t===Eo?\"StrictMode\":\"Mode\";case 22:return\"Offscreen\";case 12:return\"Profiler\";case 21:return\"Scope\";case 13:return\"Suspense\";case 19:return\"SuspenseList\";case 25:return\"TracingMarker\";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t==\"function\")return t.displayName||t.name||null;if(typeof t==\"string\")return t}return null}function yt(e){switch(typeof e){case\"boolean\":case\"number\":case\"string\":case\"undefined\":return e;case\"object\":return e;default:return\"\"}}function aa(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()===\"input\"&&(t===\"checkbox\"||t===\"radio\")}function nd(e){var t=aa(e)?\"checked\":\"value\",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=\"\"+e[t];if(!e.hasOwnProperty(t)&&typeof n<\"u\"&&typeof n.get==\"function\"&&typeof n.set==\"function\"){var l=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return l.call(this)},set:function(o){r=\"\"+o,i.call(this,o)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(o){r=\"\"+o},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function wr(e){e._valueTracker||(e._valueTracker=nd(e))}function ca(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r=\"\";return e&&(r=aa(e)?e.checked?\"true\":\"false\":e.value),e=r,e!==n?(t.setValue(e),!0):!1}function qr(e){if(e=e||(typeof document<\"u\"?document:void 0),typeof e>\"u\")return null;try{return e.activeElement||e.body}catch{return e.body}}function Ci(e,t){var n=t.checked;return V({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??e._wrapperState.initialChecked})}function Eu(e,t){var n=t.defaultValue==null?\"\":t.defaultValue,r=t.checked!=null?t.checked:t.defaultChecked;n=yt(t.value!=null?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:t.type===\"checkbox\"||t.type===\"radio\"?t.checked!=null:t.value!=null}}function fa(e,t){t=t.checked,t!=null&&Co(e,\"checked\",t,!1)}function Ei(e,t){fa(e,t);var n=yt(t.value),r=t.type;if(n!=null)r===\"number\"?(n===0&&e.value===\"\"||e.value!=n)&&(e.value=\"\"+n):e.value!==\"\"+n&&(e.value=\"\"+n);else if(r===\"submit\"||r===\"reset\"){e.removeAttribute(\"value\");return}t.hasOwnProperty(\"value\")?Pi(e,t.type,n):t.hasOwnProperty(\"defaultValue\")&&Pi(e,t.type,yt(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function Pu(e,t,n){if(t.hasOwnProperty(\"value\")||t.hasOwnProperty(\"defaultValue\")){var r=t.type;if(!(r!==\"submit\"&&r!==\"reset\"||t.value!==void 0&&t.value!==null))return;t=\"\"+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==\"\"&&(e.name=\"\"),e.defaultChecked=!!e._wrapperState.initialChecked,n!==\"\"&&(e.name=n)}function Pi(e,t,n){(t!==\"number\"||qr(e.ownerDocument)!==e)&&(n==null?e.defaultValue=\"\"+e._wrapperState.initialValue:e.defaultValue!==\"\"+n&&(e.defaultValue=\"\"+n))}var Rn=Array.isArray;function nn(e,t,n,r){if(e=e.options,t){t={};for(var l=0;l<n.length;l++)t[\"$\"+n[l]]=!0;for(n=0;n<e.length;n++)l=t.hasOwnProperty(\"$\"+e[n].value),e[n].selected!==l&&(e[n].selected=l),l&&r&&(e[n].defaultSelected=!0)}else{for(n=\"\"+yt(n),t=null,l=0;l<e.length;l++){if(e[l].value===n){e[l].selected=!0,r&&(e[l].defaultSelected=!0);return}t!==null||e[l].disabled||(t=e[l])}t!==null&&(t.selected=!0)}}function Ni(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(S(91));return V({},t,{value:void 0,defaultValue:void 0,children:\"\"+e._wrapperState.initialValue})}function Nu(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(S(92));if(Rn(n)){if(1<n.length)throw Error(S(93));n=n[0]}t=n}t==null&&(t=\"\"),n=t}e._wrapperState={initialValue:yt(n)}}function da(e,t){var n=yt(t.value),r=yt(t.defaultValue);n!=null&&(n=\"\"+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),r!=null&&(e.defaultValue=\"\"+r)}function _u(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==\"\"&&t!==null&&(e.value=t)}function pa(e){switch(e){case\"svg\":return\"http://www.w3.org/2000/svg\";case\"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}function _i(e,t){return e==null||e===\"http://www.w3.org/1999/xhtml\"?pa(t):e===\"http://www.w3.org/2000/svg\"&&t===\"foreignObject\"?\"http://www.w3.org/1999/xhtml\":e}var xr,ha=function(e){return typeof MSApp<\"u\"&&MSApp.execUnsafeLocalFunction?function(t,n,r,l){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,l)})}:e}(function(e,t){if(e.namespaceURI!==\"http://www.w3.org/2000/svg\"||\"innerHTML\"in e)e.innerHTML=t;else{for(xr=xr||document.createElement(\"div\"),xr.innerHTML=\"<svg>\"+t.valueOf().toString()+\"</svg>\",t=xr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Vn(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var zn={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},rd=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(zn).forEach(function(e){rd.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),zn[t]=zn[e]})});function ma(e,t,n){return t==null||typeof t==\"boolean\"||t===\"\"?\"\":n||typeof t!=\"number\"||t===0||zn.hasOwnProperty(e)&&zn[e]?(\"\"+t).trim():t+\"px\"}function va(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=n.indexOf(\"--\")===0,l=ma(n,t[n],r);n===\"float\"&&(n=\"cssFloat\"),r?e.setProperty(n,l):e[n]=l}}var ld=V({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Oi(e,t){if(t){if(ld[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(S(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(S(60));if(typeof t.dangerouslySetInnerHTML!=\"object\"||!(\"__html\"in t.dangerouslySetInnerHTML))throw Error(S(61))}if(t.style!=null&&typeof t.style!=\"object\")throw Error(S(62))}}function Ri(e,t){if(e.indexOf(\"-\")===-1)return typeof t.is==\"string\";switch(e){case\"annotation-xml\":case\"color-profile\":case\"font-face\":case\"font-face-src\":case\"font-face-uri\":case\"font-face-format\":case\"font-face-name\":case\"missing-glyph\":return!1;default:return!0}}var ji=null;function _o(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var Li=null,rn=null,ln=null;function Ou(e){if(e=cr(e)){if(typeof Li!=\"function\")throw Error(S(280));var t=e.stateNode;t&&(t=Nl(t),Li(e.stateNode,e.type,t))}}function ya(e){rn?ln?ln.push(e):ln=[e]:rn=e}function ga(){if(rn){var e=rn,t=ln;if(ln=rn=null,Ou(e),t)for(e=0;e<t.length;e++)Ou(t[e])}}function wa(e,t){return e(t)}function xa(){}var ql=!1;function Sa(e,t,n){if(ql)return e(t,n);ql=!0;try{return wa(e,t,n)}finally{ql=!1,(rn!==null||ln!==null)&&(xa(),ga())}}function Hn(e,t){var n=e.stateNode;if(n===null)return null;var r=Nl(n);if(r===null)return null;n=r[t];e:switch(t){case\"onClick\":case\"onClickCapture\":case\"onDoubleClick\":case\"onDoubleClickCapture\":case\"onMouseDown\":case\"onMouseDownCapture\":case\"onMouseMove\":case\"onMouseMoveCapture\":case\"onMouseUp\":case\"onMouseUpCapture\":case\"onMouseEnter\":(r=!r.disabled)||(e=e.type,r=!(e===\"button\"||e===\"input\"||e===\"select\"||e===\"textarea\")),e=!r;break e;default:e=!1}if(e)return null;if(n&&typeof n!=\"function\")throw Error(S(231,t,typeof n));return n}var Ti=!1;if(Ge)try{var Sn={};Object.defineProperty(Sn,\"passive\",{get:function(){Ti=!0}}),window.addEventListener(\"test\",Sn,Sn),window.removeEventListener(\"test\",Sn,Sn)}catch{Ti=!1}function id(e,t,n,r,l,i,o,u,s){var a=Array.prototype.slice.call(arguments,3);try{t.apply(n,a)}catch(h){this.onError(h)}}var Fn=!1,Gr=null,Yr=!1,zi=null,od={onError:function(e){Fn=!0,Gr=e}};function ud(e,t,n,r,l,i,o,u,s){Fn=!1,Gr=null,id.apply(od,arguments)}function sd(e,t,n,r,l,i,o,u,s){if(ud.apply(this,arguments),Fn){if(Fn){var a=Gr;Fn=!1,Gr=null}else throw Error(S(198));Yr||(Yr=!0,zi=a)}}function At(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function ka(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function Ru(e){if(At(e)!==e)throw Error(S(188))}function ad(e){var t=e.alternate;if(!t){if(t=At(e),t===null)throw Error(S(188));return t!==e?null:e}for(var n=e,r=t;;){var l=n.return;if(l===null)break;var i=l.alternate;if(i===null){if(r=l.return,r!==null){n=r;continue}break}if(l.child===i.child){for(i=l.child;i;){if(i===n)return Ru(l),e;if(i===r)return Ru(l),t;i=i.sibling}throw Error(S(188))}if(n.return!==r.return)n=l,r=i;else{for(var o=!1,u=l.child;u;){if(u===n){o=!0,n=l,r=i;break}if(u===r){o=!0,r=l,n=i;break}u=u.sibling}if(!o){for(u=i.child;u;){if(u===n){o=!0,n=i,r=l;break}if(u===r){o=!0,r=i,n=l;break}u=u.sibling}if(!o)throw Error(S(189))}}if(n.alternate!==r)throw Error(S(190))}if(n.tag!==3)throw Error(S(188));return n.stateNode.current===n?e:t}function Ca(e){return e=ad(e),e!==null?Ea(e):null}function Ea(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=Ea(e);if(t!==null)return t;e=e.sibling}return null}var Pa=Se.unstable_scheduleCallback,ju=Se.unstable_cancelCallback,cd=Se.unstable_shouldYield,fd=Se.unstable_requestPaint,K=Se.unstable_now,dd=Se.unstable_getCurrentPriorityLevel,Oo=Se.unstable_ImmediatePriority,Na=Se.unstable_UserBlockingPriority,Xr=Se.unstable_NormalPriority,pd=Se.unstable_LowPriority,_a=Se.unstable_IdlePriority,kl=null,Be=null;function hd(e){if(Be&&typeof Be.onCommitFiberRoot==\"function\")try{Be.onCommitFiberRoot(kl,e,void 0,(e.current.flags&128)===128)}catch{}}var Me=Math.clz32?Math.clz32:yd,md=Math.log,vd=Math.LN2;function yd(e){return e>>>=0,e===0?32:31-(md(e)/vd|0)|0}var Sr=64,kr=4194304;function jn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function Zr(e,t){var n=e.pendingLanes;if(n===0)return 0;var r=0,l=e.suspendedLanes,i=e.pingedLanes,o=n&268435455;if(o!==0){var u=o&~l;u!==0?r=jn(u):(i&=o,i!==0&&(r=jn(i)))}else o=n&~l,o!==0?r=jn(o):i!==0&&(r=jn(i));if(r===0)return 0;if(t!==0&&t!==r&&!(t&l)&&(l=r&-r,i=t&-t,l>=i||l===16&&(i&4194240)!==0))return t;if(r&4&&(r|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=r;0<t;)n=31-Me(t),l=1<<n,r|=e[n],t&=~l;return r}function gd(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function wd(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,l=e.expirationTimes,i=e.pendingLanes;0<i;){var o=31-Me(i),u=1<<o,s=l[o];s===-1?(!(u&n)||u&r)&&(l[o]=gd(u,t)):s<=t&&(e.expiredLanes|=u),i&=~u}}function Fi(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function Oa(){var e=Sr;return Sr<<=1,!(Sr&4194240)&&(Sr=64),e}function Gl(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function sr(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-Me(t),e[t]=n}function xd(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var l=31-Me(n),i=1<<l;t[l]=0,r[l]=-1,e[l]=-1,n&=~i}}function Ro(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-Me(n),l=1<<r;l&t|e[r]&t&&(e[r]|=t),n&=~l}}var D=0;function Ra(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var ja,jo,La,Ta,za,Mi=!1,Cr=[],st=null,at=null,ct=null,Wn=new Map,Kn=new Map,rt=[],Sd=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");function Lu(e,t){switch(e){case\"focusin\":case\"focusout\":st=null;break;case\"dragenter\":case\"dragleave\":at=null;break;case\"mouseover\":case\"mouseout\":ct=null;break;case\"pointerover\":case\"pointerout\":Wn.delete(t.pointerId);break;case\"gotpointercapture\":case\"lostpointercapture\":Kn.delete(t.pointerId)}}function kn(e,t,n,r,l,i){return e===null||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[l]},t!==null&&(t=cr(t),t!==null&&jo(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,l!==null&&t.indexOf(l)===-1&&t.push(l),e)}function kd(e,t,n,r,l){switch(t){case\"focusin\":return st=kn(st,e,t,n,r,l),!0;case\"dragenter\":return at=kn(at,e,t,n,r,l),!0;case\"mouseover\":return ct=kn(ct,e,t,n,r,l),!0;case\"pointerover\":var i=l.pointerId;return Wn.set(i,kn(Wn.get(i)||null,e,t,n,r,l)),!0;case\"gotpointercapture\":return i=l.pointerId,Kn.set(i,kn(Kn.get(i)||null,e,t,n,r,l)),!0}return!1}function Fa(e){var t=_t(e.target);if(t!==null){var n=At(t);if(n!==null){if(t=n.tag,t===13){if(t=ka(n),t!==null){e.blockedOn=t,za(e.priority,function(){La(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Ir(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=Di(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var r=new n.constructor(n.type,n);ji=r,n.target.dispatchEvent(r),ji=null}else return t=cr(n),t!==null&&jo(t),e.blockedOn=n,!1;t.shift()}return!0}function Tu(e,t,n){Ir(e)&&n.delete(t)}function Cd(){Mi=!1,st!==null&&Ir(st)&&(st=null),at!==null&&Ir(at)&&(at=null),ct!==null&&Ir(ct)&&(ct=null),Wn.forEach(Tu),Kn.forEach(Tu)}function Cn(e,t){e.blockedOn===t&&(e.blockedOn=null,Mi||(Mi=!0,Se.unstable_scheduleCallback(Se.unstable_NormalPriority,Cd)))}function qn(e){function t(l){return Cn(l,e)}if(0<Cr.length){Cn(Cr[0],e);for(var n=1;n<Cr.length;n++){var r=Cr[n];r.blockedOn===e&&(r.blockedOn=null)}}for(st!==null&&Cn(st,e),at!==null&&Cn(at,e),ct!==null&&Cn(ct,e),Wn.forEach(t),Kn.forEach(t),n=0;n<rt.length;n++)r=rt[n],r.blockedOn===e&&(r.blockedOn=null);for(;0<rt.length&&(n=rt[0],n.blockedOn===null);)Fa(n),n.blockedOn===null&&rt.shift()}var on=Je.ReactCurrentBatchConfig,Jr=!0;function Ed(e,t,n,r){var l=D,i=on.transition;on.transition=null;try{D=1,Lo(e,t,n,r)}finally{D=l,on.transition=i}}function Pd(e,t,n,r){var l=D,i=on.transition;on.transition=null;try{D=4,Lo(e,t,n,r)}finally{D=l,on.transition=i}}function Lo(e,t,n,r){if(Jr){var l=Di(e,t,n,r);if(l===null)li(e,t,r,br,n),Lu(e,r);else if(kd(l,e,t,n,r))r.stopPropagation();else if(Lu(e,r),t&4&&-1<Sd.indexOf(e)){for(;l!==null;){var i=cr(l);if(i!==null&&ja(i),i=Di(e,t,n,r),i===null&&li(e,t,r,br,n),i===l)break;l=i}l!==null&&r.stopPropagation()}else li(e,t,r,null,n)}}var br=null;function Di(e,t,n,r){if(br=null,e=_o(r),e=_t(e),e!==null)if(t=At(e),t===null)e=null;else if(n=t.tag,n===13){if(e=ka(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return br=e,null}function Ma(e){switch(e){case\"cancel\":case\"click\":case\"close\":case\"contextmenu\":case\"copy\":case\"cut\":case\"auxclick\":case\"dblclick\":case\"dragend\":case\"dragstart\":case\"drop\":case\"focusin\":case\"focusout\":case\"input\":case\"invalid\":case\"keydown\":case\"keypress\":case\"keyup\":case\"mousedown\":case\"mouseup\":case\"paste\":case\"pause\":case\"play\":case\"pointercancel\":case\"pointerdown\":case\"pointerup\":case\"ratechange\":case\"reset\":case\"resize\":case\"seeked\":case\"submit\":case\"touchcancel\":case\"touchend\":case\"touchstart\":case\"volumechange\":case\"change\":case\"selectionchange\":case\"textInput\":case\"compositionstart\":case\"compositionend\":case\"compositionupdate\":case\"beforeblur\":case\"afterblur\":case\"beforeinput\":case\"blur\":case\"fullscreenchange\":case\"focus\":case\"hashchange\":case\"popstate\":case\"select\":case\"selectstart\":return 1;case\"drag\":case\"dragenter\":case\"dragexit\":case\"dragleave\":case\"dragover\":case\"mousemove\":case\"mouseout\":case\"mouseover\":case\"pointermove\":case\"pointerout\":case\"pointerover\":case\"scroll\":case\"toggle\":case\"touchmove\":case\"wheel\":case\"mouseenter\":case\"mouseleave\":case\"pointerenter\":case\"pointerleave\":return 4;case\"message\":switch(dd()){case Oo:return 1;case Na:return 4;case Xr:case pd:return 16;case _a:return 536870912;default:return 16}default:return 16}}var it=null,To=null,Ur=null;function Da(){if(Ur)return Ur;var e,t=To,n=t.length,r,l=\"value\"in it?it.value:it.textContent,i=l.length;for(e=0;e<n&&t[e]===l[e];e++);var o=n-e;for(r=1;r<=o&&t[n-r]===l[i-r];r++);return Ur=l.slice(e,1<r?1-r:void 0)}function Ar(e){var t=e.keyCode;return\"charCode\"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function Er(){return!0}function zu(){return!1}function Ce(e){function t(n,r,l,i,o){this._reactName=n,this._targetInst=l,this.type=r,this.nativeEvent=i,this.target=o,this.currentTarget=null;for(var u in e)e.hasOwnProperty(u)&&(n=e[u],this[u]=n?n(i):i[u]);return this.isDefaultPrevented=(i.defaultPrevented!=null?i.defaultPrevented:i.returnValue===!1)?Er:zu,this.isPropagationStopped=zu,this}return V(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!=\"unknown\"&&(n.returnValue=!1),this.isDefaultPrevented=Er)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!=\"unknown\"&&(n.cancelBubble=!0),this.isPropagationStopped=Er)},persist:function(){},isPersistent:Er}),t}var yn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},zo=Ce(yn),ar=V({},yn,{view:0,detail:0}),Nd=Ce(ar),Yl,Xl,En,Cl=V({},ar,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Fo,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return\"movementX\"in e?e.movementX:(e!==En&&(En&&e.type===\"mousemove\"?(Yl=e.screenX-En.screenX,Xl=e.screenY-En.screenY):Xl=Yl=0,En=e),Yl)},movementY:function(e){return\"movementY\"in e?e.movementY:Xl}}),Fu=Ce(Cl),_d=V({},Cl,{dataTransfer:0}),Od=Ce(_d),Rd=V({},ar,{relatedTarget:0}),Zl=Ce(Rd),jd=V({},yn,{animationName:0,elapsedTime:0,pseudoElement:0}),Ld=Ce(jd),Td=V({},yn,{clipboardData:function(e){return\"clipboardData\"in e?e.clipboardData:window.clipboardData}}),zd=Ce(Td),Fd=V({},yn,{data:0}),Mu=Ce(Fd),Md={Esc:\"Escape\",Spacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Dd={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},Id={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Ud(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=Id[e])?!!t[e]:!1}function Fo(){return Ud}var Ad=V({},ar,{key:function(e){if(e.key){var t=Md[e.key]||e.key;if(t!==\"Unidentified\")return t}return e.type===\"keypress\"?(e=Ar(e),e===13?\"Enter\":String.fromCharCode(e)):e.type===\"keydown\"||e.type===\"keyup\"?Dd[e.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Fo,charCode:function(e){return e.type===\"keypress\"?Ar(e):0},keyCode:function(e){return e.type===\"keydown\"||e.type===\"keyup\"?e.keyCode:0},which:function(e){return e.type===\"keypress\"?Ar(e):e.type===\"keydown\"||e.type===\"keyup\"?e.keyCode:0}}),$d=Ce(Ad),Bd=V({},Cl,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Du=Ce(Bd),Qd=V({},ar,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Fo}),Vd=Ce(Qd),Hd=V({},yn,{propertyName:0,elapsedTime:0,pseudoElement:0}),Wd=Ce(Hd),Kd=V({},Cl,{deltaX:function(e){return\"deltaX\"in e?e.deltaX:\"wheelDeltaX\"in e?-e.wheelDeltaX:0},deltaY:function(e){return\"deltaY\"in e?e.deltaY:\"wheelDeltaY\"in e?-e.wheelDeltaY:\"wheelDelta\"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),qd=Ce(Kd),Gd=[9,13,27,32],Mo=Ge&&\"CompositionEvent\"in window,Mn=null;Ge&&\"documentMode\"in document&&(Mn=document.documentMode);var Yd=Ge&&\"TextEvent\"in window&&!Mn,Ia=Ge&&(!Mo||Mn&&8<Mn&&11>=Mn),Iu=String.fromCharCode(32),Uu=!1;function Ua(e,t){switch(e){case\"keyup\":return Gd.indexOf(t.keyCode)!==-1;case\"keydown\":return t.keyCode!==229;case\"keypress\":case\"mousedown\":case\"focusout\":return!0;default:return!1}}function Aa(e){return e=e.detail,typeof e==\"object\"&&\"data\"in e?e.data:null}var Kt=!1;function Xd(e,t){switch(e){case\"compositionend\":return Aa(t);case\"keypress\":return t.which!==32?null:(Uu=!0,Iu);case\"textInput\":return e=t.data,e===Iu&&Uu?null:e;default:return null}}function Zd(e,t){if(Kt)return e===\"compositionend\"||!Mo&&Ua(e,t)?(e=Da(),Ur=To=it=null,Kt=!1,e):null;switch(e){case\"paste\":return null;case\"keypress\":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case\"compositionend\":return Ia&&t.locale!==\"ko\"?null:t.data;default:return null}}var Jd={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Au(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t===\"input\"?!!Jd[e.type]:t===\"textarea\"}function $a(e,t,n,r){ya(r),t=el(t,\"onChange\"),0<t.length&&(n=new zo(\"onChange\",\"change\",null,n,r),e.push({event:n,listeners:t}))}var Dn=null,Gn=null;function bd(e){Za(e,0)}function El(e){var t=Yt(e);if(ca(t))return e}function ep(e,t){if(e===\"change\")return t}var Ba=!1;if(Ge){var Jl;if(Ge){var bl=\"oninput\"in document;if(!bl){var $u=document.createElement(\"div\");$u.setAttribute(\"oninput\",\"return;\"),bl=typeof $u.oninput==\"function\"}Jl=bl}else Jl=!1;Ba=Jl&&(!document.documentMode||9<document.documentMode)}function Bu(){Dn&&(Dn.detachEvent(\"onpropertychange\",Qa),Gn=Dn=null)}function Qa(e){if(e.propertyName===\"value\"&&El(Gn)){var t=[];$a(t,Gn,e,_o(e)),Sa(bd,t)}}function tp(e,t,n){e===\"focusin\"?(Bu(),Dn=t,Gn=n,Dn.attachEvent(\"onpropertychange\",Qa)):e===\"focusout\"&&Bu()}function np(e){if(e===\"selectionchange\"||e===\"keyup\"||e===\"keydown\")return El(Gn)}function rp(e,t){if(e===\"click\")return El(t)}function lp(e,t){if(e===\"input\"||e===\"change\")return El(t)}function ip(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Ie=typeof Object.is==\"function\"?Object.is:ip;function Yn(e,t){if(Ie(e,t))return!0;if(typeof e!=\"object\"||e===null||typeof t!=\"object\"||t===null)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var l=n[r];if(!gi.call(t,l)||!Ie(e[l],t[l]))return!1}return!0}function Qu(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Vu(e,t){var n=Qu(e);e=0;for(var r;n;){if(n.nodeType===3){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=Qu(n)}}function Va(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?Va(e,t.parentNode):\"contains\"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function Ha(){for(var e=window,t=qr();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href==\"string\"}catch{n=!1}if(n)e=t.contentWindow;else break;t=qr(e.document)}return t}function Do(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t===\"input\"&&(e.type===\"text\"||e.type===\"search\"||e.type===\"tel\"||e.type===\"url\"||e.type===\"password\")||t===\"textarea\"||e.contentEditable===\"true\")}function op(e){var t=Ha(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&Va(n.ownerDocument.documentElement,n)){if(r!==null&&Do(n)){if(t=r.start,e=r.end,e===void 0&&(e=t),\"selectionStart\"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var l=n.textContent.length,i=Math.min(r.start,l);r=r.end===void 0?i:Math.min(r.end,l),!e.extend&&i>r&&(l=r,r=i,i=l),l=Vu(n,i);var o=Vu(n,r);l&&o&&(e.rangeCount!==1||e.anchorNode!==l.node||e.anchorOffset!==l.offset||e.focusNode!==o.node||e.focusOffset!==o.offset)&&(t=t.createRange(),t.setStart(l.node,l.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(o.node,o.offset)):(t.setEnd(o.node,o.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus==\"function\"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var up=Ge&&\"documentMode\"in document&&11>=document.documentMode,qt=null,Ii=null,In=null,Ui=!1;function Hu(e,t,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;Ui||qt==null||qt!==qr(r)||(r=qt,\"selectionStart\"in r&&Do(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),In&&Yn(In,r)||(In=r,r=el(Ii,\"onSelect\"),0<r.length&&(t=new zo(\"onSelect\",\"select\",null,t,n),e.push({event:t,listeners:r}),t.target=qt)))}function Pr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n[\"Webkit\"+e]=\"webkit\"+t,n[\"Moz\"+e]=\"moz\"+t,n}var Gt={animationend:Pr(\"Animation\",\"AnimationEnd\"),animationiteration:Pr(\"Animation\",\"AnimationIteration\"),animationstart:Pr(\"Animation\",\"AnimationStart\"),transitionend:Pr(\"Transition\",\"TransitionEnd\")},ei={},Wa={};Ge&&(Wa=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete Gt.animationend.animation,delete Gt.animationiteration.animation,delete Gt.animationstart.animation),\"TransitionEvent\"in window||delete Gt.transitionend.transition);function Pl(e){if(ei[e])return ei[e];if(!Gt[e])return e;var t=Gt[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in Wa)return ei[e]=t[n];return e}var Ka=Pl(\"animationend\"),qa=Pl(\"animationiteration\"),Ga=Pl(\"animationstart\"),Ya=Pl(\"transitionend\"),Xa=new Map,Wu=\"abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel\".split(\" \");function wt(e,t){Xa.set(e,t),Ut(t,[e])}for(var ti=0;ti<Wu.length;ti++){var ni=Wu[ti],sp=ni.toLowerCase(),ap=ni[0].toUpperCase()+ni.slice(1);wt(sp,\"on\"+ap)}wt(Ka,\"onAnimationEnd\");wt(qa,\"onAnimationIteration\");wt(Ga,\"onAnimationStart\");wt(\"dblclick\",\"onDoubleClick\");wt(\"focusin\",\"onFocus\");wt(\"focusout\",\"onBlur\");wt(Ya,\"onTransitionEnd\");an(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]);an(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]);an(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]);an(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]);Ut(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \"));Ut(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \"));Ut(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]);Ut(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \"));Ut(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \"));Ut(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var Ln=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),cp=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(Ln));function Ku(e,t,n){var r=e.type||\"unknown-event\";e.currentTarget=n,sd(r,t,void 0,e),e.currentTarget=null}function Za(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var r=e[n],l=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var o=r.length-1;0<=o;o--){var u=r[o],s=u.instance,a=u.currentTarget;if(u=u.listener,s!==i&&l.isPropagationStopped())break e;Ku(l,u,a),i=s}else for(o=0;o<r.length;o++){if(u=r[o],s=u.instance,a=u.currentTarget,u=u.listener,s!==i&&l.isPropagationStopped())break e;Ku(l,u,a),i=s}}}if(Yr)throw e=zi,Yr=!1,zi=null,e}function U(e,t){var n=t[Vi];n===void 0&&(n=t[Vi]=new Set);var r=e+\"__bubble\";n.has(r)||(Ja(t,e,2,!1),n.add(r))}function ri(e,t,n){var r=0;t&&(r|=4),Ja(n,e,r,t)}var Nr=\"_reactListening\"+Math.random().toString(36).slice(2);function Xn(e){if(!e[Nr]){e[Nr]=!0,ia.forEach(function(n){n!==\"selectionchange\"&&(cp.has(n)||ri(n,!1,e),ri(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[Nr]||(t[Nr]=!0,ri(\"selectionchange\",!1,t))}}function Ja(e,t,n,r){switch(Ma(t)){case 1:var l=Ed;break;case 4:l=Pd;break;default:l=Lo}n=l.bind(null,t,n,e),l=void 0,!Ti||t!==\"touchstart\"&&t!==\"touchmove\"&&t!==\"wheel\"||(l=!0),r?l!==void 0?e.addEventListener(t,n,{capture:!0,passive:l}):e.addEventListener(t,n,!0):l!==void 0?e.addEventListener(t,n,{passive:l}):e.addEventListener(t,n,!1)}function li(e,t,n,r,l){var i=r;if(!(t&1)&&!(t&2)&&r!==null)e:for(;;){if(r===null)return;var o=r.tag;if(o===3||o===4){var u=r.stateNode.containerInfo;if(u===l||u.nodeType===8&&u.parentNode===l)break;if(o===4)for(o=r.return;o!==null;){var s=o.tag;if((s===3||s===4)&&(s=o.stateNode.containerInfo,s===l||s.nodeType===8&&s.parentNode===l))return;o=o.return}for(;u!==null;){if(o=_t(u),o===null)return;if(s=o.tag,s===5||s===6){r=i=o;continue e}u=u.parentNode}}r=r.return}Sa(function(){var a=i,h=_o(n),p=[];e:{var m=Xa.get(e);if(m!==void 0){var v=zo,g=e;switch(e){case\"keypress\":if(Ar(n)===0)break e;case\"keydown\":case\"keyup\":v=$d;break;case\"focusin\":g=\"focus\",v=Zl;break;case\"focusout\":g=\"blur\",v=Zl;break;case\"beforeblur\":case\"afterblur\":v=Zl;break;case\"click\":if(n.button===2)break e;case\"auxclick\":case\"dblclick\":case\"mousedown\":case\"mousemove\":case\"mouseup\":case\"mouseout\":case\"mouseover\":case\"contextmenu\":v=Fu;break;case\"drag\":case\"dragend\":case\"dragenter\":case\"dragexit\":case\"dragleave\":case\"dragover\":case\"dragstart\":case\"drop\":v=Od;break;case\"touchcancel\":case\"touchend\":case\"touchmove\":case\"touchstart\":v=Vd;break;case Ka:case qa:case Ga:v=Ld;break;case Ya:v=Wd;break;case\"scroll\":v=Nd;break;case\"wheel\":v=qd;break;case\"copy\":case\"cut\":case\"paste\":v=zd;break;case\"gotpointercapture\":case\"lostpointercapture\":case\"pointercancel\":case\"pointerdown\":case\"pointermove\":case\"pointerout\":case\"pointerover\":case\"pointerup\":v=Du}var w=(t&4)!==0,x=!w&&e===\"scroll\",f=w?m!==null?m+\"Capture\":null:m;w=[];for(var c=a,d;c!==null;){d=c;var y=d.stateNode;if(d.tag===5&&y!==null&&(d=y,f!==null&&(y=Hn(c,f),y!=null&&w.push(Zn(c,y,d)))),x)break;c=c.return}0<w.length&&(m=new v(m,g,null,n,h),p.push({event:m,listeners:w}))}}if(!(t&7)){e:{if(m=e===\"mouseover\"||e===\"pointerover\",v=e===\"mouseout\"||e===\"pointerout\",m&&n!==ji&&(g=n.relatedTarget||n.fromElement)&&(_t(g)||g[Ye]))break e;if((v||m)&&(m=h.window===h?h:(m=h.ownerDocument)?m.defaultView||m.parentWindow:window,v?(g=n.relatedTarget||n.toElement,v=a,g=g?_t(g):null,g!==null&&(x=At(g),g!==x||g.tag!==5&&g.tag!==6)&&(g=null)):(v=null,g=a),v!==g)){if(w=Fu,y=\"onMouseLeave\",f=\"onMouseEnter\",c=\"mouse\",(e===\"pointerout\"||e===\"pointerover\")&&(w=Du,y=\"onPointerLeave\",f=\"onPointerEnter\",c=\"pointer\"),x=v==null?m:Yt(v),d=g==null?m:Yt(g),m=new w(y,c+\"leave\",v,n,h),m.target=x,m.relatedTarget=d,y=null,_t(h)===a&&(w=new w(f,c+\"enter\",g,n,h),w.target=d,w.relatedTarget=x,y=w),x=y,v&&g)t:{for(w=v,f=g,c=0,d=w;d;d=Vt(d))c++;for(d=0,y=f;y;y=Vt(y))d++;for(;0<c-d;)w=Vt(w),c--;for(;0<d-c;)f=Vt(f),d--;for(;c--;){if(w===f||f!==null&&w===f.alternate)break t;w=Vt(w),f=Vt(f)}w=null}else w=null;v!==null&&qu(p,m,v,w,!1),g!==null&&x!==null&&qu(p,x,g,w,!0)}}e:{if(m=a?Yt(a):window,v=m.nodeName&&m.nodeName.toLowerCase(),v===\"select\"||v===\"input\"&&m.type===\"file\")var P=ep;else if(Au(m))if(Ba)P=lp;else{P=np;var E=tp}else(v=m.nodeName)&&v.toLowerCase()===\"input\"&&(m.type===\"checkbox\"||m.type===\"radio\")&&(P=rp);if(P&&(P=P(e,a))){$a(p,P,n,h);break e}E&&E(e,m,a),e===\"focusout\"&&(E=m._wrapperState)&&E.controlled&&m.type===\"number\"&&Pi(m,\"number\",m.value)}switch(E=a?Yt(a):window,e){case\"focusin\":(Au(E)||E.contentEditable===\"true\")&&(qt=E,Ii=a,In=null);break;case\"focusout\":In=Ii=qt=null;break;case\"mousedown\":Ui=!0;break;case\"contextmenu\":case\"mouseup\":case\"dragend\":Ui=!1,Hu(p,n,h);break;case\"selectionchange\":if(up)break;case\"keydown\":case\"keyup\":Hu(p,n,h)}var C;if(Mo)e:{switch(e){case\"compositionstart\":var N=\"onCompositionStart\";break e;case\"compositionend\":N=\"onCompositionEnd\";break e;case\"compositionupdate\":N=\"onCompositionUpdate\";break e}N=void 0}else Kt?Ua(e,n)&&(N=\"onCompositionEnd\"):e===\"keydown\"&&n.keyCode===229&&(N=\"onCompositionStart\");N&&(Ia&&n.locale!==\"ko\"&&(Kt||N!==\"onCompositionStart\"?N===\"onCompositionEnd\"&&Kt&&(C=Da()):(it=h,To=\"value\"in it?it.value:it.textContent,Kt=!0)),E=el(a,N),0<E.length&&(N=new Mu(N,e,null,n,h),p.push({event:N,listeners:E}),C?N.data=C:(C=Aa(n),C!==null&&(N.data=C)))),(C=Yd?Xd(e,n):Zd(e,n))&&(a=el(a,\"onBeforeInput\"),0<a.length&&(h=new Mu(\"onBeforeInput\",\"beforeinput\",null,n,h),p.push({event:h,listeners:a}),h.data=C))}Za(p,t)})}function Zn(e,t,n){return{instance:e,listener:t,currentTarget:n}}function el(e,t){for(var n=t+\"Capture\",r=[];e!==null;){var l=e,i=l.stateNode;l.tag===5&&i!==null&&(l=i,i=Hn(e,n),i!=null&&r.unshift(Zn(e,i,l)),i=Hn(e,t),i!=null&&r.push(Zn(e,i,l))),e=e.return}return r}function Vt(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function qu(e,t,n,r,l){for(var i=t._reactName,o=[];n!==null&&n!==r;){var u=n,s=u.alternate,a=u.stateNode;if(s!==null&&s===r)break;u.tag===5&&a!==null&&(u=a,l?(s=Hn(n,i),s!=null&&o.unshift(Zn(n,s,u))):l||(s=Hn(n,i),s!=null&&o.push(Zn(n,s,u)))),n=n.return}o.length!==0&&e.push({event:t,listeners:o})}var fp=/\\r\\n?/g,dp=/\\u0000|\\uFFFD/g;function Gu(e){return(typeof e==\"string\"?e:\"\"+e).replace(fp,`\n`).replace(dp,\"\")}function _r(e,t,n){if(t=Gu(t),Gu(e)!==t&&n)throw Error(S(425))}function tl(){}var Ai=null,$i=null;function Bi(e,t){return e===\"textarea\"||e===\"noscript\"||typeof t.children==\"string\"||typeof t.children==\"number\"||typeof t.dangerouslySetInnerHTML==\"object\"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var Qi=typeof setTimeout==\"function\"?setTimeout:void 0,pp=typeof clearTimeout==\"function\"?clearTimeout:void 0,Yu=typeof Promise==\"function\"?Promise:void 0,hp=typeof queueMicrotask==\"function\"?queueMicrotask:typeof Yu<\"u\"?function(e){return Yu.resolve(null).then(e).catch(mp)}:Qi;function mp(e){setTimeout(function(){throw e})}function ii(e,t){var n=t,r=0;do{var l=n.nextSibling;if(e.removeChild(n),l&&l.nodeType===8)if(n=l.data,n===\"/$\"){if(r===0){e.removeChild(l),qn(t);return}r--}else n!==\"$\"&&n!==\"$?\"&&n!==\"$!\"||r++;n=l}while(n);qn(t)}function ft(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t===\"$\"||t===\"$!\"||t===\"$?\")break;if(t===\"/$\")return null}}return e}function Xu(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n===\"$\"||n===\"$!\"||n===\"$?\"){if(t===0)return e;t--}else n===\"/$\"&&t++}e=e.previousSibling}return null}var gn=Math.random().toString(36).slice(2),$e=\"__reactFiber$\"+gn,Jn=\"__reactProps$\"+gn,Ye=\"__reactContainer$\"+gn,Vi=\"__reactEvents$\"+gn,vp=\"__reactListeners$\"+gn,yp=\"__reactHandles$\"+gn;function _t(e){var t=e[$e];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Ye]||n[$e]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=Xu(e);e!==null;){if(n=e[$e])return n;e=Xu(e)}return t}e=n,n=e.parentNode}return null}function cr(e){return e=e[$e]||e[Ye],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function Yt(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(S(33))}function Nl(e){return e[Jn]||null}var Hi=[],Xt=-1;function xt(e){return{current:e}}function A(e){0>Xt||(e.current=Hi[Xt],Hi[Xt]=null,Xt--)}function I(e,t){Xt++,Hi[Xt]=e.current,e.current=t}var gt={},oe=xt(gt),me=xt(!1),zt=gt;function cn(e,t){var n=e.type.contextTypes;if(!n)return gt;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var l={},i;for(i in n)l[i]=t[i];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=l),l}function ve(e){return e=e.childContextTypes,e!=null}function nl(){A(me),A(oe)}function Zu(e,t,n){if(oe.current!==gt)throw Error(S(168));I(oe,t),I(me,n)}function ba(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,typeof r.getChildContext!=\"function\")return n;r=r.getChildContext();for(var l in r)if(!(l in t))throw Error(S(108,td(e)||\"Unknown\",l));return V({},n,r)}function rl(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||gt,zt=oe.current,I(oe,e),I(me,me.current),!0}function Ju(e,t,n){var r=e.stateNode;if(!r)throw Error(S(169));n?(e=ba(e,t,zt),r.__reactInternalMemoizedMergedChildContext=e,A(me),A(oe),I(oe,e)):A(me),I(me,n)}var He=null,_l=!1,oi=!1;function ec(e){He===null?He=[e]:He.push(e)}function gp(e){_l=!0,ec(e)}function St(){if(!oi&&He!==null){oi=!0;var e=0,t=D;try{var n=He;for(D=1;e<n.length;e++){var r=n[e];do r=r(!0);while(r!==null)}He=null,_l=!1}catch(l){throw He!==null&&(He=He.slice(e+1)),Pa(Oo,St),l}finally{D=t,oi=!1}}return null}var Zt=[],Jt=0,ll=null,il=0,Ee=[],Pe=0,Ft=null,We=1,Ke=\"\";function Pt(e,t){Zt[Jt++]=il,Zt[Jt++]=ll,ll=e,il=t}function tc(e,t,n){Ee[Pe++]=We,Ee[Pe++]=Ke,Ee[Pe++]=Ft,Ft=e;var r=We;e=Ke;var l=32-Me(r)-1;r&=~(1<<l),n+=1;var i=32-Me(t)+l;if(30<i){var o=l-l%5;i=(r&(1<<o)-1).toString(32),r>>=o,l-=o,We=1<<32-Me(t)+l|n<<l|r,Ke=i+e}else We=1<<i|n<<l|r,Ke=e}function Io(e){e.return!==null&&(Pt(e,1),tc(e,1,0))}function Uo(e){for(;e===ll;)ll=Zt[--Jt],Zt[Jt]=null,il=Zt[--Jt],Zt[Jt]=null;for(;e===Ft;)Ft=Ee[--Pe],Ee[Pe]=null,Ke=Ee[--Pe],Ee[Pe]=null,We=Ee[--Pe],Ee[Pe]=null}var xe=null,we=null,$=!1,Fe=null;function nc(e,t){var n=Ne(5,null,null,0);n.elementType=\"DELETED\",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function bu(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,xe=e,we=ft(t.firstChild),!0):!1;case 6:return t=e.pendingProps===\"\"||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,xe=e,we=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=Ft!==null?{id:We,overflow:Ke}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=Ne(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,xe=e,we=null,!0):!1;default:return!1}}function Wi(e){return(e.mode&1)!==0&&(e.flags&128)===0}function Ki(e){if($){var t=we;if(t){var n=t;if(!bu(e,t)){if(Wi(e))throw Error(S(418));t=ft(n.nextSibling);var r=xe;t&&bu(e,t)?nc(r,n):(e.flags=e.flags&-4097|2,$=!1,xe=e)}}else{if(Wi(e))throw Error(S(418));e.flags=e.flags&-4097|2,$=!1,xe=e}}}function es(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;xe=e}function Or(e){if(e!==xe)return!1;if(!$)return es(e),$=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!==\"head\"&&t!==\"body\"&&!Bi(e.type,e.memoizedProps)),t&&(t=we)){if(Wi(e))throw rc(),Error(S(418));for(;t;)nc(e,t),t=ft(t.nextSibling)}if(es(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(S(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n===\"/$\"){if(t===0){we=ft(e.nextSibling);break e}t--}else n!==\"$\"&&n!==\"$!\"&&n!==\"$?\"||t++}e=e.nextSibling}we=null}}else we=xe?ft(e.stateNode.nextSibling):null;return!0}function rc(){for(var e=we;e;)e=ft(e.nextSibling)}function fn(){we=xe=null,$=!1}function Ao(e){Fe===null?Fe=[e]:Fe.push(e)}var wp=Je.ReactCurrentBatchConfig;function Pn(e,t,n){if(e=n.ref,e!==null&&typeof e!=\"function\"&&typeof e!=\"object\"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(S(309));var r=n.stateNode}if(!r)throw Error(S(147,e));var l=r,i=\"\"+e;return t!==null&&t.ref!==null&&typeof t.ref==\"function\"&&t.ref._stringRef===i?t.ref:(t=function(o){var u=l.refs;o===null?delete u[i]:u[i]=o},t._stringRef=i,t)}if(typeof e!=\"string\")throw Error(S(284));if(!n._owner)throw Error(S(290,e))}return e}function Rr(e,t){throw e=Object.prototype.toString.call(t),Error(S(31,e===\"[object Object]\"?\"object with keys {\"+Object.keys(t).join(\", \")+\"}\":e))}function ts(e){var t=e._init;return t(e._payload)}function lc(e){function t(f,c){if(e){var d=f.deletions;d===null?(f.deletions=[c],f.flags|=16):d.push(c)}}function n(f,c){if(!e)return null;for(;c!==null;)t(f,c),c=c.sibling;return null}function r(f,c){for(f=new Map;c!==null;)c.key!==null?f.set(c.key,c):f.set(c.index,c),c=c.sibling;return f}function l(f,c){return f=mt(f,c),f.index=0,f.sibling=null,f}function i(f,c,d){return f.index=d,e?(d=f.alternate,d!==null?(d=d.index,d<c?(f.flags|=2,c):d):(f.flags|=2,c)):(f.flags|=1048576,c)}function o(f){return e&&f.alternate===null&&(f.flags|=2),f}function u(f,c,d,y){return c===null||c.tag!==6?(c=pi(d,f.mode,y),c.return=f,c):(c=l(c,d),c.return=f,c)}function s(f,c,d,y){var P=d.type;return P===Wt?h(f,c,d.props.children,y,d.key):c!==null&&(c.elementType===P||typeof P==\"object\"&&P!==null&&P.$$typeof===et&&ts(P)===c.type)?(y=l(c,d.props),y.ref=Pn(f,c,d),y.return=f,y):(y=Kr(d.type,d.key,d.props,null,f.mode,y),y.ref=Pn(f,c,d),y.return=f,y)}function a(f,c,d,y){return c===null||c.tag!==4||c.stateNode.containerInfo!==d.containerInfo||c.stateNode.implementation!==d.implementation?(c=hi(d,f.mode,y),c.return=f,c):(c=l(c,d.children||[]),c.return=f,c)}function h(f,c,d,y,P){return c===null||c.tag!==7?(c=Tt(d,f.mode,y,P),c.return=f,c):(c=l(c,d),c.return=f,c)}function p(f,c,d){if(typeof c==\"string\"&&c!==\"\"||typeof c==\"number\")return c=pi(\"\"+c,f.mode,d),c.return=f,c;if(typeof c==\"object\"&&c!==null){switch(c.$$typeof){case gr:return d=Kr(c.type,c.key,c.props,null,f.mode,d),d.ref=Pn(f,null,c),d.return=f,d;case Ht:return c=hi(c,f.mode,d),c.return=f,c;case et:var y=c._init;return p(f,y(c._payload),d)}if(Rn(c)||xn(c))return c=Tt(c,f.mode,d,null),c.return=f,c;Rr(f,c)}return null}function m(f,c,d,y){var P=c!==null?c.key:null;if(typeof d==\"string\"&&d!==\"\"||typeof d==\"number\")return P!==null?null:u(f,c,\"\"+d,y);if(typeof d==\"object\"&&d!==null){switch(d.$$typeof){case gr:return d.key===P?s(f,c,d,y):null;case Ht:return d.key===P?a(f,c,d,y):null;case et:return P=d._init,m(f,c,P(d._payload),y)}if(Rn(d)||xn(d))return P!==null?null:h(f,c,d,y,null);Rr(f,d)}return null}function v(f,c,d,y,P){if(typeof y==\"string\"&&y!==\"\"||typeof y==\"number\")return f=f.get(d)||null,u(c,f,\"\"+y,P);if(typeof y==\"object\"&&y!==null){switch(y.$$typeof){case gr:return f=f.get(y.key===null?d:y.key)||null,s(c,f,y,P);case Ht:return f=f.get(y.key===null?d:y.key)||null,a(c,f,y,P);case et:var E=y._init;return v(f,c,d,E(y._payload),P)}if(Rn(y)||xn(y))return f=f.get(d)||null,h(c,f,y,P,null);Rr(c,y)}return null}function g(f,c,d,y){for(var P=null,E=null,C=c,N=c=0,M=null;C!==null&&N<d.length;N++){C.index>N?(M=C,C=null):M=C.sibling;var L=m(f,C,d[N],y);if(L===null){C===null&&(C=M);break}e&&C&&L.alternate===null&&t(f,C),c=i(L,c,N),E===null?P=L:E.sibling=L,E=L,C=M}if(N===d.length)return n(f,C),$&&Pt(f,N),P;if(C===null){for(;N<d.length;N++)C=p(f,d[N],y),C!==null&&(c=i(C,c,N),E===null?P=C:E.sibling=C,E=C);return $&&Pt(f,N),P}for(C=r(f,C);N<d.length;N++)M=v(C,f,N,d[N],y),M!==null&&(e&&M.alternate!==null&&C.delete(M.key===null?N:M.key),c=i(M,c,N),E===null?P=M:E.sibling=M,E=M);return e&&C.forEach(function(ue){return t(f,ue)}),$&&Pt(f,N),P}function w(f,c,d,y){var P=xn(d);if(typeof P!=\"function\")throw Error(S(150));if(d=P.call(d),d==null)throw Error(S(151));for(var E=P=null,C=c,N=c=0,M=null,L=d.next();C!==null&&!L.done;N++,L=d.next()){C.index>N?(M=C,C=null):M=C.sibling;var ue=m(f,C,L.value,y);if(ue===null){C===null&&(C=M);break}e&&C&&ue.alternate===null&&t(f,C),c=i(ue,c,N),E===null?P=ue:E.sibling=ue,E=ue,C=M}if(L.done)return n(f,C),$&&Pt(f,N),P;if(C===null){for(;!L.done;N++,L=d.next())L=p(f,L.value,y),L!==null&&(c=i(L,c,N),E===null?P=L:E.sibling=L,E=L);return $&&Pt(f,N),P}for(C=r(f,C);!L.done;N++,L=d.next())L=v(C,f,N,L.value,y),L!==null&&(e&&L.alternate!==null&&C.delete(L.key===null?N:L.key),c=i(L,c,N),E===null?P=L:E.sibling=L,E=L);return e&&C.forEach(function(Qt){return t(f,Qt)}),$&&Pt(f,N),P}function x(f,c,d,y){if(typeof d==\"object\"&&d!==null&&d.type===Wt&&d.key===null&&(d=d.props.children),typeof d==\"object\"&&d!==null){switch(d.$$typeof){case gr:e:{for(var P=d.key,E=c;E!==null;){if(E.key===P){if(P=d.type,P===Wt){if(E.tag===7){n(f,E.sibling),c=l(E,d.props.children),c.return=f,f=c;break e}}else if(E.elementType===P||typeof P==\"object\"&&P!==null&&P.$$typeof===et&&ts(P)===E.type){n(f,E.sibling),c=l(E,d.props),c.ref=Pn(f,E,d),c.return=f,f=c;break e}n(f,E);break}else t(f,E);E=E.sibling}d.type===Wt?(c=Tt(d.props.children,f.mode,y,d.key),c.return=f,f=c):(y=Kr(d.type,d.key,d.props,null,f.mode,y),y.ref=Pn(f,c,d),y.return=f,f=y)}return o(f);case Ht:e:{for(E=d.key;c!==null;){if(c.key===E)if(c.tag===4&&c.stateNode.containerInfo===d.containerInfo&&c.stateNode.implementation===d.implementation){n(f,c.sibling),c=l(c,d.children||[]),c.return=f,f=c;break e}else{n(f,c);break}else t(f,c);c=c.sibling}c=hi(d,f.mode,y),c.return=f,f=c}return o(f);case et:return E=d._init,x(f,c,E(d._payload),y)}if(Rn(d))return g(f,c,d,y);if(xn(d))return w(f,c,d,y);Rr(f,d)}return typeof d==\"string\"&&d!==\"\"||typeof d==\"number\"?(d=\"\"+d,c!==null&&c.tag===6?(n(f,c.sibling),c=l(c,d),c.return=f,f=c):(n(f,c),c=pi(d,f.mode,y),c.return=f,f=c),o(f)):n(f,c)}return x}var dn=lc(!0),ic=lc(!1),ol=xt(null),ul=null,bt=null,$o=null;function Bo(){$o=bt=ul=null}function Qo(e){var t=ol.current;A(ol),e._currentValue=t}function qi(e,t,n){for(;e!==null;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,r!==null&&(r.childLanes|=t)):r!==null&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function un(e,t){ul=e,$o=bt=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(he=!0),e.firstContext=null)}function Oe(e){var t=e._currentValue;if($o!==e)if(e={context:e,memoizedValue:t,next:null},bt===null){if(ul===null)throw Error(S(308));bt=e,ul.dependencies={lanes:0,firstContext:e}}else bt=bt.next=e;return t}var Ot=null;function Vo(e){Ot===null?Ot=[e]:Ot.push(e)}function oc(e,t,n,r){var l=t.interleaved;return l===null?(n.next=n,Vo(t)):(n.next=l.next,l.next=n),t.interleaved=n,Xe(e,r)}function Xe(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var tt=!1;function Ho(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function uc(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function qe(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function dt(e,t,n){var r=e.updateQueue;if(r===null)return null;if(r=r.shared,F&2){var l=r.pending;return l===null?t.next=t:(t.next=l.next,l.next=t),r.pending=t,Xe(e,n)}return l=r.interleaved,l===null?(t.next=t,Vo(r)):(t.next=l.next,l.next=t),r.interleaved=t,Xe(e,n)}function $r(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,Ro(e,n)}}function ns(e,t){var n=e.updateQueue,r=e.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var l=null,i=null;if(n=n.firstBaseUpdate,n!==null){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};i===null?l=i=o:i=i.next=o,n=n.next}while(n!==null);i===null?l=i=t:i=i.next=t}else l=i=t;n={baseState:r.baseState,firstBaseUpdate:l,lastBaseUpdate:i,shared:r.shared,effects:r.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function sl(e,t,n,r){var l=e.updateQueue;tt=!1;var i=l.firstBaseUpdate,o=l.lastBaseUpdate,u=l.shared.pending;if(u!==null){l.shared.pending=null;var s=u,a=s.next;s.next=null,o===null?i=a:o.next=a,o=s;var h=e.alternate;h!==null&&(h=h.updateQueue,u=h.lastBaseUpdate,u!==o&&(u===null?h.firstBaseUpdate=a:u.next=a,h.lastBaseUpdate=s))}if(i!==null){var p=l.baseState;o=0,h=a=s=null,u=i;do{var m=u.lane,v=u.eventTime;if((r&m)===m){h!==null&&(h=h.next={eventTime:v,lane:0,tag:u.tag,payload:u.payload,callback:u.callback,next:null});e:{var g=e,w=u;switch(m=t,v=n,w.tag){case 1:if(g=w.payload,typeof g==\"function\"){p=g.call(v,p,m);break e}p=g;break e;case 3:g.flags=g.flags&-65537|128;case 0:if(g=w.payload,m=typeof g==\"function\"?g.call(v,p,m):g,m==null)break e;p=V({},p,m);break e;case 2:tt=!0}}u.callback!==null&&u.lane!==0&&(e.flags|=64,m=l.effects,m===null?l.effects=[u]:m.push(u))}else v={eventTime:v,lane:m,tag:u.tag,payload:u.payload,callback:u.callback,next:null},h===null?(a=h=v,s=p):h=h.next=v,o|=m;if(u=u.next,u===null){if(u=l.shared.pending,u===null)break;m=u,u=m.next,m.next=null,l.lastBaseUpdate=m,l.shared.pending=null}}while(1);if(h===null&&(s=p),l.baseState=s,l.firstBaseUpdate=a,l.lastBaseUpdate=h,t=l.shared.interleaved,t!==null){l=t;do o|=l.lane,l=l.next;while(l!==t)}else i===null&&(l.shared.lanes=0);Dt|=o,e.lanes=o,e.memoizedState=p}}function rs(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var r=e[t],l=r.callback;if(l!==null){if(r.callback=null,r=n,typeof l!=\"function\")throw Error(S(191,l));l.call(r)}}}var fr={},Qe=xt(fr),bn=xt(fr),er=xt(fr);function Rt(e){if(e===fr)throw Error(S(174));return e}function Wo(e,t){switch(I(er,t),I(bn,e),I(Qe,fr),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:_i(null,\"\");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=_i(t,e)}A(Qe),I(Qe,t)}function pn(){A(Qe),A(bn),A(er)}function sc(e){Rt(er.current);var t=Rt(Qe.current),n=_i(t,e.type);t!==n&&(I(bn,e),I(Qe,n))}function Ko(e){bn.current===e&&(A(Qe),A(bn))}var B=xt(0);function al(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data===\"$?\"||n.data===\"$!\"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ui=[];function qo(){for(var e=0;e<ui.length;e++)ui[e]._workInProgressVersionPrimary=null;ui.length=0}var Br=Je.ReactCurrentDispatcher,si=Je.ReactCurrentBatchConfig,Mt=0,Q=null,Y=null,J=null,cl=!1,Un=!1,tr=0,xp=0;function re(){throw Error(S(321))}function Go(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Ie(e[n],t[n]))return!1;return!0}function Yo(e,t,n,r,l,i){if(Mt=i,Q=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Br.current=e===null||e.memoizedState===null?Ep:Pp,e=n(r,l),Un){i=0;do{if(Un=!1,tr=0,25<=i)throw Error(S(301));i+=1,J=Y=null,t.updateQueue=null,Br.current=Np,e=n(r,l)}while(Un)}if(Br.current=fl,t=Y!==null&&Y.next!==null,Mt=0,J=Y=Q=null,cl=!1,t)throw Error(S(300));return e}function Xo(){var e=tr!==0;return tr=0,e}function Ae(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return J===null?Q.memoizedState=J=e:J=J.next=e,J}function Re(){if(Y===null){var e=Q.alternate;e=e!==null?e.memoizedState:null}else e=Y.next;var t=J===null?Q.memoizedState:J.next;if(t!==null)J=t,Y=e;else{if(e===null)throw Error(S(310));Y=e,e={memoizedState:Y.memoizedState,baseState:Y.baseState,baseQueue:Y.baseQueue,queue:Y.queue,next:null},J===null?Q.memoizedState=J=e:J=J.next=e}return J}function nr(e,t){return typeof t==\"function\"?t(e):t}function ai(e){var t=Re(),n=t.queue;if(n===null)throw Error(S(311));n.lastRenderedReducer=e;var r=Y,l=r.baseQueue,i=n.pending;if(i!==null){if(l!==null){var o=l.next;l.next=i.next,i.next=o}r.baseQueue=l=i,n.pending=null}if(l!==null){i=l.next,r=r.baseState;var u=o=null,s=null,a=i;do{var h=a.lane;if((Mt&h)===h)s!==null&&(s=s.next={lane:0,action:a.action,hasEagerState:a.hasEagerState,eagerState:a.eagerState,next:null}),r=a.hasEagerState?a.eagerState:e(r,a.action);else{var p={lane:h,action:a.action,hasEagerState:a.hasEagerState,eagerState:a.eagerState,next:null};s===null?(u=s=p,o=r):s=s.next=p,Q.lanes|=h,Dt|=h}a=a.next}while(a!==null&&a!==i);s===null?o=r:s.next=u,Ie(r,t.memoizedState)||(he=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=s,n.lastRenderedState=r}if(e=n.interleaved,e!==null){l=e;do i=l.lane,Q.lanes|=i,Dt|=i,l=l.next;while(l!==e)}else l===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function ci(e){var t=Re(),n=t.queue;if(n===null)throw Error(S(311));n.lastRenderedReducer=e;var r=n.dispatch,l=n.pending,i=t.memoizedState;if(l!==null){n.pending=null;var o=l=l.next;do i=e(i,o.action),o=o.next;while(o!==l);Ie(i,t.memoizedState)||(he=!0),t.memoizedState=i,t.baseQueue===null&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ac(){}function cc(e,t){var n=Q,r=Re(),l=t(),i=!Ie(r.memoizedState,l);if(i&&(r.memoizedState=l,he=!0),r=r.queue,Zo(pc.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||J!==null&&J.memoizedState.tag&1){if(n.flags|=2048,rr(9,dc.bind(null,n,r,l,t),void 0,null),b===null)throw Error(S(349));Mt&30||fc(n,t,l)}return l}function fc(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=Q.updateQueue,t===null?(t={lastEffect:null,stores:null},Q.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function dc(e,t,n,r){t.value=n,t.getSnapshot=r,hc(t)&&mc(e)}function pc(e,t,n){return n(function(){hc(t)&&mc(e)})}function hc(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Ie(e,n)}catch{return!0}}function mc(e){var t=Xe(e,1);t!==null&&De(t,e,1,-1)}function ls(e){var t=Ae();return typeof e==\"function\"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:nr,lastRenderedState:e},t.queue=e,e=e.dispatch=Cp.bind(null,Q,e),[t.memoizedState,e]}function rr(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},t=Q.updateQueue,t===null?(t={lastEffect:null,stores:null},Q.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e)),e}function vc(){return Re().memoizedState}function Qr(e,t,n,r){var l=Ae();Q.flags|=e,l.memoizedState=rr(1|t,n,void 0,r===void 0?null:r)}function Ol(e,t,n,r){var l=Re();r=r===void 0?null:r;var i=void 0;if(Y!==null){var o=Y.memoizedState;if(i=o.destroy,r!==null&&Go(r,o.deps)){l.memoizedState=rr(t,n,i,r);return}}Q.flags|=e,l.memoizedState=rr(1|t,n,i,r)}function is(e,t){return Qr(8390656,8,e,t)}function Zo(e,t){return Ol(2048,8,e,t)}function yc(e,t){return Ol(4,2,e,t)}function gc(e,t){return Ol(4,4,e,t)}function wc(e,t){if(typeof t==\"function\")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function xc(e,t,n){return n=n!=null?n.concat([e]):null,Ol(4,4,wc.bind(null,t,e),n)}function Jo(){}function Sc(e,t){var n=Re();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&Go(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function kc(e,t){var n=Re();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&Go(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Cc(e,t,n){return Mt&21?(Ie(n,t)||(n=Oa(),Q.lanes|=n,Dt|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,he=!0),e.memoizedState=n)}function Sp(e,t){var n=D;D=n!==0&&4>n?n:4,e(!0);var r=si.transition;si.transition={};try{e(!1),t()}finally{D=n,si.transition=r}}function Ec(){return Re().memoizedState}function kp(e,t,n){var r=ht(e);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Pc(e))Nc(t,n);else if(n=oc(e,t,n,r),n!==null){var l=ce();De(n,e,r,l),_c(n,t,r)}}function Cp(e,t,n){var r=ht(e),l={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Pc(e))Nc(t,l);else{var i=e.alternate;if(e.lanes===0&&(i===null||i.lanes===0)&&(i=t.lastRenderedReducer,i!==null))try{var o=t.lastRenderedState,u=i(o,n);if(l.hasEagerState=!0,l.eagerState=u,Ie(u,o)){var s=t.interleaved;s===null?(l.next=l,Vo(t)):(l.next=s.next,s.next=l),t.interleaved=l;return}}catch{}finally{}n=oc(e,t,l,r),n!==null&&(l=ce(),De(n,e,r,l),_c(n,t,r))}}function Pc(e){var t=e.alternate;return e===Q||t!==null&&t===Q}function Nc(e,t){Un=cl=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function _c(e,t,n){if(n&4194240){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,Ro(e,n)}}var fl={readContext:Oe,useCallback:re,useContext:re,useEffect:re,useImperativeHandle:re,useInsertionEffect:re,useLayoutEffect:re,useMemo:re,useReducer:re,useRef:re,useState:re,useDebugValue:re,useDeferredValue:re,useTransition:re,useMutableSource:re,useSyncExternalStore:re,useId:re,unstable_isNewReconciler:!1},Ep={readContext:Oe,useCallback:function(e,t){return Ae().memoizedState=[e,t===void 0?null:t],e},useContext:Oe,useEffect:is,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,Qr(4194308,4,wc.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Qr(4194308,4,e,t)},useInsertionEffect:function(e,t){return Qr(4,2,e,t)},useMemo:function(e,t){var n=Ae();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ae();return t=n!==void 0?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=kp.bind(null,Q,e),[r.memoizedState,e]},useRef:function(e){var t=Ae();return e={current:e},t.memoizedState=e},useState:ls,useDebugValue:Jo,useDeferredValue:function(e){return Ae().memoizedState=e},useTransition:function(){var e=ls(!1),t=e[0];return e=Sp.bind(null,e[1]),Ae().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=Q,l=Ae();if($){if(n===void 0)throw Error(S(407));n=n()}else{if(n=t(),b===null)throw Error(S(349));Mt&30||fc(r,t,n)}l.memoizedState=n;var i={value:n,getSnapshot:t};return l.queue=i,is(pc.bind(null,r,i,e),[e]),r.flags|=2048,rr(9,dc.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Ae(),t=b.identifierPrefix;if($){var n=Ke,r=We;n=(r&~(1<<32-Me(r)-1)).toString(32)+n,t=\":\"+t+\"R\"+n,n=tr++,0<n&&(t+=\"H\"+n.toString(32)),t+=\":\"}else n=xp++,t=\":\"+t+\"r\"+n.toString(32)+\":\";return e.memoizedState=t},unstable_isNewReconciler:!1},Pp={readContext:Oe,useCallback:Sc,useContext:Oe,useEffect:Zo,useImperativeHandle:xc,useInsertionEffect:yc,useLayoutEffect:gc,useMemo:kc,useReducer:ai,useRef:vc,useState:function(){return ai(nr)},useDebugValue:Jo,useDeferredValue:function(e){var t=Re();return Cc(t,Y.memoizedState,e)},useTransition:function(){var e=ai(nr)[0],t=Re().memoizedState;return[e,t]},useMutableSource:ac,useSyncExternalStore:cc,useId:Ec,unstable_isNewReconciler:!1},Np={readContext:Oe,useCallback:Sc,useContext:Oe,useEffect:Zo,useImperativeHandle:xc,useInsertionEffect:yc,useLayoutEffect:gc,useMemo:kc,useReducer:ci,useRef:vc,useState:function(){return ci(nr)},useDebugValue:Jo,useDeferredValue:function(e){var t=Re();return Y===null?t.memoizedState=e:Cc(t,Y.memoizedState,e)},useTransition:function(){var e=ci(nr)[0],t=Re().memoizedState;return[e,t]},useMutableSource:ac,useSyncExternalStore:cc,useId:Ec,unstable_isNewReconciler:!1};function Le(e,t){if(e&&e.defaultProps){t=V({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}function Gi(e,t,n,r){t=e.memoizedState,n=n(r,t),n=n==null?t:V({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var Rl={isMounted:function(e){return(e=e._reactInternals)?At(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ce(),l=ht(e),i=qe(r,l);i.payload=t,n!=null&&(i.callback=n),t=dt(e,i,l),t!==null&&(De(t,e,l,r),$r(t,e,l))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ce(),l=ht(e),i=qe(r,l);i.tag=1,i.payload=t,n!=null&&(i.callback=n),t=dt(e,i,l),t!==null&&(De(t,e,l,r),$r(t,e,l))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ce(),r=ht(e),l=qe(n,r);l.tag=2,t!=null&&(l.callback=t),t=dt(e,l,r),t!==null&&(De(t,e,r,n),$r(t,e,r))}};function os(e,t,n,r,l,i,o){return e=e.stateNode,typeof e.shouldComponentUpdate==\"function\"?e.shouldComponentUpdate(r,i,o):t.prototype&&t.prototype.isPureReactComponent?!Yn(n,r)||!Yn(l,i):!0}function Oc(e,t,n){var r=!1,l=gt,i=t.contextType;return typeof i==\"object\"&&i!==null?i=Oe(i):(l=ve(t)?zt:oe.current,r=t.contextTypes,i=(r=r!=null)?cn(e,l):gt),t=new t(n,i),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=Rl,e.stateNode=t,t._reactInternals=e,r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=l,e.__reactInternalMemoizedMaskedChildContext=i),t}function us(e,t,n,r){e=t.state,typeof t.componentWillReceiveProps==\"function\"&&t.componentWillReceiveProps(n,r),typeof t.UNSAFE_componentWillReceiveProps==\"function\"&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Rl.enqueueReplaceState(t,t.state,null)}function Yi(e,t,n,r){var l=e.stateNode;l.props=n,l.state=e.memoizedState,l.refs={},Ho(e);var i=t.contextType;typeof i==\"object\"&&i!==null?l.context=Oe(i):(i=ve(t)?zt:oe.current,l.context=cn(e,i)),l.state=e.memoizedState,i=t.getDerivedStateFromProps,typeof i==\"function\"&&(Gi(e,t,i,n),l.state=e.memoizedState),typeof t.getDerivedStateFromProps==\"function\"||typeof l.getSnapshotBeforeUpdate==\"function\"||typeof l.UNSAFE_componentWillMount!=\"function\"&&typeof l.componentWillMount!=\"function\"||(t=l.state,typeof l.componentWillMount==\"function\"&&l.componentWillMount(),typeof l.UNSAFE_componentWillMount==\"function\"&&l.UNSAFE_componentWillMount(),t!==l.state&&Rl.enqueueReplaceState(l,l.state,null),sl(e,n,l,r),l.state=e.memoizedState),typeof l.componentDidMount==\"function\"&&(e.flags|=4194308)}function hn(e,t){try{var n=\"\",r=t;do n+=ed(r),r=r.return;while(r);var l=n}catch(i){l=`\nError generating stack: `+i.message+`\n`+i.stack}return{value:e,source:t,stack:l,digest:null}}function fi(e,t,n){return{value:e,source:null,stack:n??null,digest:t??null}}function Xi(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var _p=typeof WeakMap==\"function\"?WeakMap:Map;function Rc(e,t,n){n=qe(-1,n),n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){pl||(pl=!0,oo=r),Xi(e,t)},n}function jc(e,t,n){n=qe(-1,n),n.tag=3;var r=e.type.getDerivedStateFromError;if(typeof r==\"function\"){var l=t.value;n.payload=function(){return r(l)},n.callback=function(){Xi(e,t)}}var i=e.stateNode;return i!==null&&typeof i.componentDidCatch==\"function\"&&(n.callback=function(){Xi(e,t),typeof r!=\"function\"&&(pt===null?pt=new Set([this]):pt.add(this));var o=t.stack;this.componentDidCatch(t.value,{componentStack:o!==null?o:\"\"})}),n}function ss(e,t,n){var r=e.pingCache;if(r===null){r=e.pingCache=new _p;var l=new Set;r.set(t,l)}else l=r.get(t),l===void 0&&(l=new Set,r.set(t,l));l.has(n)||(l.add(n),e=Bp.bind(null,e,t,n),t.then(e,e))}function as(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function cs(e,t,n,r,l){return e.mode&1?(e.flags|=65536,e.lanes=l,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=qe(-1,1),t.tag=2,dt(n,t,1))),n.lanes|=1),e)}var Op=Je.ReactCurrentOwner,he=!1;function se(e,t,n,r){t.child=e===null?ic(t,null,n,r):dn(t,e.child,n,r)}function fs(e,t,n,r,l){n=n.render;var i=t.ref;return un(t,l),r=Yo(e,t,n,r,i,l),n=Xo(),e!==null&&!he?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~l,Ze(e,t,l)):($&&n&&Io(t),t.flags|=1,se(e,t,r,l),t.child)}function ds(e,t,n,r,l){if(e===null){var i=n.type;return typeof i==\"function\"&&!ou(i)&&i.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=i,Lc(e,t,i,r,l)):(e=Kr(n.type,null,r,t,t.mode,l),e.ref=t.ref,e.return=t,t.child=e)}if(i=e.child,!(e.lanes&l)){var o=i.memoizedProps;if(n=n.compare,n=n!==null?n:Yn,n(o,r)&&e.ref===t.ref)return Ze(e,t,l)}return t.flags|=1,e=mt(i,r),e.ref=t.ref,e.return=t,t.child=e}function Lc(e,t,n,r,l){if(e!==null){var i=e.memoizedProps;if(Yn(i,r)&&e.ref===t.ref)if(he=!1,t.pendingProps=r=i,(e.lanes&l)!==0)e.flags&131072&&(he=!0);else return t.lanes=e.lanes,Ze(e,t,l)}return Zi(e,t,n,r,l)}function Tc(e,t,n){var r=t.pendingProps,l=r.children,i=e!==null?e.memoizedState:null;if(r.mode===\"hidden\")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},I(tn,ge),ge|=n;else{if(!(n&1073741824))return e=i!==null?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,I(tn,ge),ge|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=i!==null?i.baseLanes:n,I(tn,ge),ge|=r}else i!==null?(r=i.baseLanes|n,t.memoizedState=null):r=n,I(tn,ge),ge|=r;return se(e,t,l,n),t.child}function zc(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Zi(e,t,n,r,l){var i=ve(n)?zt:oe.current;return i=cn(t,i),un(t,l),n=Yo(e,t,n,r,i,l),r=Xo(),e!==null&&!he?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~l,Ze(e,t,l)):($&&r&&Io(t),t.flags|=1,se(e,t,n,l),t.child)}function ps(e,t,n,r,l){if(ve(n)){var i=!0;rl(t)}else i=!1;if(un(t,l),t.stateNode===null)Vr(e,t),Oc(t,n,r),Yi(t,n,r,l),r=!0;else if(e===null){var o=t.stateNode,u=t.memoizedProps;o.props=u;var s=o.context,a=n.contextType;typeof a==\"object\"&&a!==null?a=Oe(a):(a=ve(n)?zt:oe.current,a=cn(t,a));var h=n.getDerivedStateFromProps,p=typeof h==\"function\"||typeof o.getSnapshotBeforeUpdate==\"function\";p||typeof o.UNSAFE_componentWillReceiveProps!=\"function\"&&typeof o.componentWillReceiveProps!=\"function\"||(u!==r||s!==a)&&us(t,o,r,a),tt=!1;var m=t.memoizedState;o.state=m,sl(t,r,o,l),s=t.memoizedState,u!==r||m!==s||me.current||tt?(typeof h==\"function\"&&(Gi(t,n,h,r),s=t.memoizedState),(u=tt||os(t,n,u,r,m,s,a))?(p||typeof o.UNSAFE_componentWillMount!=\"function\"&&typeof o.componentWillMount!=\"function\"||(typeof o.componentWillMount==\"function\"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount==\"function\"&&o.UNSAFE_componentWillMount()),typeof o.componentDidMount==\"function\"&&(t.flags|=4194308)):(typeof o.componentDidMount==\"function\"&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),o.props=r,o.state=s,o.context=a,r=u):(typeof o.componentDidMount==\"function\"&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,uc(e,t),u=t.memoizedProps,a=t.type===t.elementType?u:Le(t.type,u),o.props=a,p=t.pendingProps,m=o.context,s=n.contextType,typeof s==\"object\"&&s!==null?s=Oe(s):(s=ve(n)?zt:oe.current,s=cn(t,s));var v=n.getDerivedStateFromProps;(h=typeof v==\"function\"||typeof o.getSnapshotBeforeUpdate==\"function\")||typeof o.UNSAFE_componentWillReceiveProps!=\"function\"&&typeof o.componentWillReceiveProps!=\"function\"||(u!==p||m!==s)&&us(t,o,r,s),tt=!1,m=t.memoizedState,o.state=m,sl(t,r,o,l);var g=t.memoizedState;u!==p||m!==g||me.current||tt?(typeof v==\"function\"&&(Gi(t,n,v,r),g=t.memoizedState),(a=tt||os(t,n,a,r,m,g,s)||!1)?(h||typeof o.UNSAFE_componentWillUpdate!=\"function\"&&typeof o.componentWillUpdate!=\"function\"||(typeof o.componentWillUpdate==\"function\"&&o.componentWillUpdate(r,g,s),typeof o.UNSAFE_componentWillUpdate==\"function\"&&o.UNSAFE_componentWillUpdate(r,g,s)),typeof o.componentDidUpdate==\"function\"&&(t.flags|=4),typeof o.getSnapshotBeforeUpdate==\"function\"&&(t.flags|=1024)):(typeof o.componentDidUpdate!=\"function\"||u===e.memoizedProps&&m===e.memoizedState||(t.flags|=4),typeof o.getSnapshotBeforeUpdate!=\"function\"||u===e.memoizedProps&&m===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=g),o.props=r,o.state=g,o.context=s,r=a):(typeof o.componentDidUpdate!=\"function\"||u===e.memoizedProps&&m===e.memoizedState||(t.flags|=4),typeof o.getSnapshotBeforeUpdate!=\"function\"||u===e.memoizedProps&&m===e.memoizedState||(t.flags|=1024),r=!1)}return Ji(e,t,n,r,i,l)}function Ji(e,t,n,r,l,i){zc(e,t);var o=(t.flags&128)!==0;if(!r&&!o)return l&&Ju(t,n,!1),Ze(e,t,i);r=t.stateNode,Op.current=t;var u=o&&typeof n.getDerivedStateFromError!=\"function\"?null:r.render();return t.flags|=1,e!==null&&o?(t.child=dn(t,e.child,null,i),t.child=dn(t,null,u,i)):se(e,t,u,i),t.memoizedState=r.state,l&&Ju(t,n,!0),t.child}function Fc(e){var t=e.stateNode;t.pendingContext?Zu(e,t.pendingContext,t.pendingContext!==t.context):t.context&&Zu(e,t.context,!1),Wo(e,t.containerInfo)}function hs(e,t,n,r,l){return fn(),Ao(l),t.flags|=256,se(e,t,n,r),t.child}var bi={dehydrated:null,treeContext:null,retryLane:0};function eo(e){return{baseLanes:e,cachePool:null,transitions:null}}function Mc(e,t,n){var r=t.pendingProps,l=B.current,i=!1,o=(t.flags&128)!==0,u;if((u=o)||(u=e!==null&&e.memoizedState===null?!1:(l&2)!==0),u?(i=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(l|=1),I(B,l&1),e===null)return Ki(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data===\"$!\"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(o=r.children,e=r.fallback,i?(r=t.mode,i=t.child,o={mode:\"hidden\",children:o},!(r&1)&&i!==null?(i.childLanes=0,i.pendingProps=o):i=Tl(o,r,0,null),e=Tt(e,r,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=eo(n),t.memoizedState=bi,e):bo(t,o));if(l=e.memoizedState,l!==null&&(u=l.dehydrated,u!==null))return Rp(e,t,o,r,u,l,n);if(i){i=r.fallback,o=t.mode,l=e.child,u=l.sibling;var s={mode:\"hidden\",children:r.children};return!(o&1)&&t.child!==l?(r=t.child,r.childLanes=0,r.pendingProps=s,t.deletions=null):(r=mt(l,s),r.subtreeFlags=l.subtreeFlags&14680064),u!==null?i=mt(u,i):(i=Tt(i,o,n,null),i.flags|=2),i.return=t,r.return=t,r.sibling=i,t.child=r,r=i,i=t.child,o=e.child.memoizedState,o=o===null?eo(n):{baseLanes:o.baseLanes|n,cachePool:null,transitions:o.transitions},i.memoizedState=o,i.childLanes=e.childLanes&~n,t.memoizedState=bi,r}return i=e.child,e=i.sibling,r=mt(i,{mode:\"visible\",children:r.children}),!(t.mode&1)&&(r.lanes=n),r.return=t,r.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function bo(e,t){return t=Tl({mode:\"visible\",children:t},e.mode,0,null),t.return=e,e.child=t}function jr(e,t,n,r){return r!==null&&Ao(r),dn(t,e.child,null,n),e=bo(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function Rp(e,t,n,r,l,i,o){if(n)return t.flags&256?(t.flags&=-257,r=fi(Error(S(422))),jr(e,t,o,r)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(i=r.fallback,l=t.mode,r=Tl({mode:\"visible\",children:r.children},l,0,null),i=Tt(i,l,o,null),i.flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,t.mode&1&&dn(t,e.child,null,o),t.child.memoizedState=eo(o),t.memoizedState=bi,i);if(!(t.mode&1))return jr(e,t,o,null);if(l.data===\"$!\"){if(r=l.nextSibling&&l.nextSibling.dataset,r)var u=r.dgst;return r=u,i=Error(S(419)),r=fi(i,r,void 0),jr(e,t,o,r)}if(u=(o&e.childLanes)!==0,he||u){if(r=b,r!==null){switch(o&-o){case 4:l=2;break;case 16:l=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:l=32;break;case 536870912:l=268435456;break;default:l=0}l=l&(r.suspendedLanes|o)?0:l,l!==0&&l!==i.retryLane&&(i.retryLane=l,Xe(e,l),De(r,e,l,-1))}return iu(),r=fi(Error(S(421))),jr(e,t,o,r)}return l.data===\"$?\"?(t.flags|=128,t.child=e.child,t=Qp.bind(null,e),l._reactRetry=t,null):(e=i.treeContext,we=ft(l.nextSibling),xe=t,$=!0,Fe=null,e!==null&&(Ee[Pe++]=We,Ee[Pe++]=Ke,Ee[Pe++]=Ft,We=e.id,Ke=e.overflow,Ft=t),t=bo(t,r.children),t.flags|=4096,t)}function ms(e,t,n){e.lanes|=t;var r=e.alternate;r!==null&&(r.lanes|=t),qi(e.return,t,n)}function di(e,t,n,r,l){var i=e.memoizedState;i===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:l}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=l)}function Dc(e,t,n){var r=t.pendingProps,l=r.revealOrder,i=r.tail;if(se(e,t,r.children,n),r=B.current,r&2)r=r&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&ms(e,n,t);else if(e.tag===19)ms(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(I(B,r),!(t.mode&1))t.memoizedState=null;else switch(l){case\"forwards\":for(n=t.child,l=null;n!==null;)e=n.alternate,e!==null&&al(e)===null&&(l=n),n=n.sibling;n=l,n===null?(l=t.child,t.child=null):(l=n.sibling,n.sibling=null),di(t,!1,l,n,i);break;case\"backwards\":for(n=null,l=t.child,t.child=null;l!==null;){if(e=l.alternate,e!==null&&al(e)===null){t.child=l;break}e=l.sibling,l.sibling=n,n=l,l=e}di(t,!0,n,null,i);break;case\"together\":di(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Vr(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Ze(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),Dt|=t.lanes,!(n&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(S(153));if(t.child!==null){for(e=t.child,n=mt(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=mt(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function jp(e,t,n){switch(t.tag){case 3:Fc(t),fn();break;case 5:sc(t);break;case 1:ve(t.type)&&rl(t);break;case 4:Wo(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,l=t.memoizedProps.value;I(ol,r._currentValue),r._currentValue=l;break;case 13:if(r=t.memoizedState,r!==null)return r.dehydrated!==null?(I(B,B.current&1),t.flags|=128,null):n&t.child.childLanes?Mc(e,t,n):(I(B,B.current&1),e=Ze(e,t,n),e!==null?e.sibling:null);I(B,B.current&1);break;case 19:if(r=(n&t.childLanes)!==0,e.flags&128){if(r)return Dc(e,t,n);t.flags|=128}if(l=t.memoizedState,l!==null&&(l.rendering=null,l.tail=null,l.lastEffect=null),I(B,B.current),r)break;return null;case 22:case 23:return t.lanes=0,Tc(e,t,n)}return Ze(e,t,n)}var Ic,to,Uc,Ac;Ic=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};to=function(){};Uc=function(e,t,n,r){var l=e.memoizedProps;if(l!==r){e=t.stateNode,Rt(Qe.current);var i=null;switch(n){case\"input\":l=Ci(e,l),r=Ci(e,r),i=[];break;case\"select\":l=V({},l,{value:void 0}),r=V({},r,{value:void 0}),i=[];break;case\"textarea\":l=Ni(e,l),r=Ni(e,r),i=[];break;default:typeof l.onClick!=\"function\"&&typeof r.onClick==\"function\"&&(e.onclick=tl)}Oi(n,r);var o;n=null;for(a in l)if(!r.hasOwnProperty(a)&&l.hasOwnProperty(a)&&l[a]!=null)if(a===\"style\"){var u=l[a];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]=\"\")}else a!==\"dangerouslySetInnerHTML\"&&a!==\"children\"&&a!==\"suppressContentEditableWarning\"&&a!==\"suppressHydrationWarning\"&&a!==\"autoFocus\"&&(Qn.hasOwnProperty(a)?i||(i=[]):(i=i||[]).push(a,null));for(a in r){var s=r[a];if(u=l!=null?l[a]:void 0,r.hasOwnProperty(a)&&s!==u&&(s!=null||u!=null))if(a===\"style\")if(u){for(o in u)!u.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]=\"\");for(o in s)s.hasOwnProperty(o)&&u[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(i||(i=[]),i.push(a,n)),n=s;else a===\"dangerouslySetInnerHTML\"?(s=s?s.__html:void 0,u=u?u.__html:void 0,s!=null&&u!==s&&(i=i||[]).push(a,s)):a===\"children\"?typeof s!=\"string\"&&typeof s!=\"number\"||(i=i||[]).push(a,\"\"+s):a!==\"suppressContentEditableWarning\"&&a!==\"suppressHydrationWarning\"&&(Qn.hasOwnProperty(a)?(s!=null&&a===\"onScroll\"&&U(\"scroll\",e),i||u===s||(i=[])):(i=i||[]).push(a,s))}n&&(i=i||[]).push(\"style\",n);var a=i;(t.updateQueue=a)&&(t.flags|=4)}};Ac=function(e,t,n,r){n!==r&&(t.flags|=4)};function Nn(e,t){if(!$)switch(e.tailMode){case\"hidden\":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case\"collapsed\":n=e.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:r.sibling=null}}function le(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,r=0;if(t)for(var l=e.child;l!==null;)n|=l.lanes|l.childLanes,r|=l.subtreeFlags&14680064,r|=l.flags&14680064,l.return=e,l=l.sibling;else for(l=e.child;l!==null;)n|=l.lanes|l.childLanes,r|=l.subtreeFlags,r|=l.flags,l.return=e,l=l.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Lp(e,t,n){var r=t.pendingProps;switch(Uo(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return le(t),null;case 1:return ve(t.type)&&nl(),le(t),null;case 3:return r=t.stateNode,pn(),A(me),A(oe),qo(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(e===null||e.child===null)&&(Or(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,Fe!==null&&(ao(Fe),Fe=null))),to(e,t),le(t),null;case 5:Ko(t);var l=Rt(er.current);if(n=t.type,e!==null&&t.stateNode!=null)Uc(e,t,n,r,l),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(t.stateNode===null)throw Error(S(166));return le(t),null}if(e=Rt(Qe.current),Or(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[$e]=t,r[Jn]=i,e=(t.mode&1)!==0,n){case\"dialog\":U(\"cancel\",r),U(\"close\",r);break;case\"iframe\":case\"object\":case\"embed\":U(\"load\",r);break;case\"video\":case\"audio\":for(l=0;l<Ln.length;l++)U(Ln[l],r);break;case\"source\":U(\"error\",r);break;case\"img\":case\"image\":case\"link\":U(\"error\",r),U(\"load\",r);break;case\"details\":U(\"toggle\",r);break;case\"input\":Eu(r,i),U(\"invalid\",r);break;case\"select\":r._wrapperState={wasMultiple:!!i.multiple},U(\"invalid\",r);break;case\"textarea\":Nu(r,i),U(\"invalid\",r)}Oi(n,i),l=null;for(var o in i)if(i.hasOwnProperty(o)){var u=i[o];o===\"children\"?typeof u==\"string\"?r.textContent!==u&&(i.suppressHydrationWarning!==!0&&_r(r.textContent,u,e),l=[\"children\",u]):typeof u==\"number\"&&r.textContent!==\"\"+u&&(i.suppressHydrationWarning!==!0&&_r(r.textContent,u,e),l=[\"children\",\"\"+u]):Qn.hasOwnProperty(o)&&u!=null&&o===\"onScroll\"&&U(\"scroll\",r)}switch(n){case\"input\":wr(r),Pu(r,i,!0);break;case\"textarea\":wr(r),_u(r);break;case\"select\":case\"option\":break;default:typeof i.onClick==\"function\"&&(r.onclick=tl)}r=l,t.updateQueue=r,r!==null&&(t.flags|=4)}else{o=l.nodeType===9?l:l.ownerDocument,e===\"http://www.w3.org/1999/xhtml\"&&(e=pa(n)),e===\"http://www.w3.org/1999/xhtml\"?n===\"script\"?(e=o.createElement(\"div\"),e.innerHTML=\"<script><\\/script>\",e=e.removeChild(e.firstChild)):typeof r.is==\"string\"?e=o.createElement(n,{is:r.is}):(e=o.createElement(n),n===\"select\"&&(o=e,r.multiple?o.multiple=!0:r.size&&(o.size=r.size))):e=o.createElementNS(e,n),e[$e]=t,e[Jn]=r,Ic(e,t,!1,!1),t.stateNode=e;e:{switch(o=Ri(n,r),n){case\"dialog\":U(\"cancel\",e),U(\"close\",e),l=r;break;case\"iframe\":case\"object\":case\"embed\":U(\"load\",e),l=r;break;case\"video\":case\"audio\":for(l=0;l<Ln.length;l++)U(Ln[l],e);l=r;break;case\"source\":U(\"error\",e),l=r;break;case\"img\":case\"image\":case\"link\":U(\"error\",e),U(\"load\",e),l=r;break;case\"details\":U(\"toggle\",e),l=r;break;case\"input\":Eu(e,r),l=Ci(e,r),U(\"invalid\",e);break;case\"option\":l=r;break;case\"select\":e._wrapperState={wasMultiple:!!r.multiple},l=V({},r,{value:void 0}),U(\"invalid\",e);break;case\"textarea\":Nu(e,r),l=Ni(e,r),U(\"invalid\",e);break;default:l=r}Oi(n,l),u=l;for(i in u)if(u.hasOwnProperty(i)){var s=u[i];i===\"style\"?va(e,s):i===\"dangerouslySetInnerHTML\"?(s=s?s.__html:void 0,s!=null&&ha(e,s)):i===\"children\"?typeof s==\"string\"?(n!==\"textarea\"||s!==\"\")&&Vn(e,s):typeof s==\"number\"&&Vn(e,\"\"+s):i!==\"suppressContentEditableWarning\"&&i!==\"suppressHydrationWarning\"&&i!==\"autoFocus\"&&(Qn.hasOwnProperty(i)?s!=null&&i===\"onScroll\"&&U(\"scroll\",e):s!=null&&Co(e,i,s,o))}switch(n){case\"input\":wr(e),Pu(e,r,!1);break;case\"textarea\":wr(e),_u(e);break;case\"option\":r.value!=null&&e.setAttribute(\"value\",\"\"+yt(r.value));break;case\"select\":e.multiple=!!r.multiple,i=r.value,i!=null?nn(e,!!r.multiple,i,!1):r.defaultValue!=null&&nn(e,!!r.multiple,r.defaultValue,!0);break;default:typeof l.onClick==\"function\"&&(e.onclick=tl)}switch(n){case\"button\":case\"input\":case\"select\":case\"textarea\":r=!!r.autoFocus;break e;case\"img\":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return le(t),null;case 6:if(e&&t.stateNode!=null)Ac(e,t,e.memoizedProps,r);else{if(typeof r!=\"string\"&&t.stateNode===null)throw Error(S(166));if(n=Rt(er.current),Rt(Qe.current),Or(t)){if(r=t.stateNode,n=t.memoizedProps,r[$e]=t,(i=r.nodeValue!==n)&&(e=xe,e!==null))switch(e.tag){case 3:_r(r.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&_r(r.nodeValue,n,(e.mode&1)!==0)}i&&(t.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[$e]=t,t.stateNode=r}return le(t),null;case 13:if(A(B),r=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if($&&we!==null&&t.mode&1&&!(t.flags&128))rc(),fn(),t.flags|=98560,i=!1;else if(i=Or(t),r!==null&&r.dehydrated!==null){if(e===null){if(!i)throw Error(S(318));if(i=t.memoizedState,i=i!==null?i.dehydrated:null,!i)throw Error(S(317));i[$e]=t}else fn(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;le(t),i=!1}else Fe!==null&&(ao(Fe),Fe=null),i=!0;if(!i)return t.flags&65536?t:null}return t.flags&128?(t.lanes=n,t):(r=r!==null,r!==(e!==null&&e.memoizedState!==null)&&r&&(t.child.flags|=8192,t.mode&1&&(e===null||B.current&1?X===0&&(X=3):iu())),t.updateQueue!==null&&(t.flags|=4),le(t),null);case 4:return pn(),to(e,t),e===null&&Xn(t.stateNode.containerInfo),le(t),null;case 10:return Qo(t.type._context),le(t),null;case 17:return ve(t.type)&&nl(),le(t),null;case 19:if(A(B),i=t.memoizedState,i===null)return le(t),null;if(r=(t.flags&128)!==0,o=i.rendering,o===null)if(r)Nn(i,!1);else{if(X!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(o=al(e),o!==null){for(t.flags|=128,Nn(i,!1),r=o.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;n!==null;)i=n,e=r,i.flags&=14680066,o=i.alternate,o===null?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=o.childLanes,i.lanes=o.lanes,i.child=o.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=o.memoizedProps,i.memoizedState=o.memoizedState,i.updateQueue=o.updateQueue,i.type=o.type,e=o.dependencies,i.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return I(B,B.current&1|2),t.child}e=e.sibling}i.tail!==null&&K()>mn&&(t.flags|=128,r=!0,Nn(i,!1),t.lanes=4194304)}else{if(!r)if(e=al(o),e!==null){if(t.flags|=128,r=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),Nn(i,!0),i.tail===null&&i.tailMode===\"hidden\"&&!o.alternate&&!$)return le(t),null}else 2*K()-i.renderingStartTime>mn&&n!==1073741824&&(t.flags|=128,r=!0,Nn(i,!1),t.lanes=4194304);i.isBackwards?(o.sibling=t.child,t.child=o):(n=i.last,n!==null?n.sibling=o:t.child=o,i.last=o)}return i.tail!==null?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=K(),t.sibling=null,n=B.current,I(B,r?n&1|2:n&1),t):(le(t),null);case 22:case 23:return lu(),r=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==r&&(t.flags|=8192),r&&t.mode&1?ge&1073741824&&(le(t),t.subtreeFlags&6&&(t.flags|=8192)):le(t),null;case 24:return null;case 25:return null}throw Error(S(156,t.tag))}function Tp(e,t){switch(Uo(t),t.tag){case 1:return ve(t.type)&&nl(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return pn(),A(me),A(oe),qo(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return Ko(t),null;case 13:if(A(B),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(S(340));fn()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return A(B),null;case 4:return pn(),null;case 10:return Qo(t.type._context),null;case 22:case 23:return lu(),null;case 24:return null;default:return null}}var Lr=!1,ie=!1,zp=typeof WeakSet==\"function\"?WeakSet:Set,O=null;function en(e,t){var n=e.ref;if(n!==null)if(typeof n==\"function\")try{n(null)}catch(r){H(e,t,r)}else n.current=null}function no(e,t,n){try{n()}catch(r){H(e,t,r)}}var vs=!1;function Fp(e,t){if(Ai=Jr,e=Ha(),Do(e)){if(\"selectionStart\"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var l=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch{n=null;break e}var o=0,u=-1,s=-1,a=0,h=0,p=e,m=null;t:for(;;){for(var v;p!==n||l!==0&&p.nodeType!==3||(u=o+l),p!==i||r!==0&&p.nodeType!==3||(s=o+r),p.nodeType===3&&(o+=p.nodeValue.length),(v=p.firstChild)!==null;)m=p,p=v;for(;;){if(p===e)break t;if(m===n&&++a===l&&(u=o),m===i&&++h===r&&(s=o),(v=p.nextSibling)!==null)break;p=m,m=p.parentNode}p=v}n=u===-1||s===-1?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for($i={focusedElem:e,selectionRange:n},Jr=!1,O=t;O!==null;)if(t=O,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,O=e;else for(;O!==null;){t=O;try{var g=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(g!==null){var w=g.memoizedProps,x=g.memoizedState,f=t.stateNode,c=f.getSnapshotBeforeUpdate(t.elementType===t.type?w:Le(t.type,w),x);f.__reactInternalSnapshotBeforeUpdate=c}break;case 3:var d=t.stateNode.containerInfo;d.nodeType===1?d.textContent=\"\":d.nodeType===9&&d.documentElement&&d.removeChild(d.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(S(163))}}catch(y){H(t,t.return,y)}if(e=t.sibling,e!==null){e.return=t.return,O=e;break}O=t.return}return g=vs,vs=!1,g}function An(e,t,n){var r=t.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var l=r=r.next;do{if((l.tag&e)===e){var i=l.destroy;l.destroy=void 0,i!==void 0&&no(t,n,i)}l=l.next}while(l!==r)}}function jl(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ro(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t==\"function\"?t(e):t.current=e}}function $c(e){var t=e.alternate;t!==null&&(e.alternate=null,$c(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[$e],delete t[Jn],delete t[Vi],delete t[vp],delete t[yp])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Bc(e){return e.tag===5||e.tag===3||e.tag===4}function ys(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||Bc(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function lo(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=tl));else if(r!==4&&(e=e.child,e!==null))for(lo(e,t,n),e=e.sibling;e!==null;)lo(e,t,n),e=e.sibling}function io(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(r!==4&&(e=e.child,e!==null))for(io(e,t,n),e=e.sibling;e!==null;)io(e,t,n),e=e.sibling}var ee=null,ze=!1;function be(e,t,n){for(n=n.child;n!==null;)Qc(e,t,n),n=n.sibling}function Qc(e,t,n){if(Be&&typeof Be.onCommitFiberUnmount==\"function\")try{Be.onCommitFiberUnmount(kl,n)}catch{}switch(n.tag){case 5:ie||en(n,t);case 6:var r=ee,l=ze;ee=null,be(e,t,n),ee=r,ze=l,ee!==null&&(ze?(e=ee,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):ee.removeChild(n.stateNode));break;case 18:ee!==null&&(ze?(e=ee,n=n.stateNode,e.nodeType===8?ii(e.parentNode,n):e.nodeType===1&&ii(e,n),qn(e)):ii(ee,n.stateNode));break;case 4:r=ee,l=ze,ee=n.stateNode.containerInfo,ze=!0,be(e,t,n),ee=r,ze=l;break;case 0:case 11:case 14:case 15:if(!ie&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){l=r=r.next;do{var i=l,o=i.destroy;i=i.tag,o!==void 0&&(i&2||i&4)&&no(n,t,o),l=l.next}while(l!==r)}be(e,t,n);break;case 1:if(!ie&&(en(n,t),r=n.stateNode,typeof r.componentWillUnmount==\"function\"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(u){H(n,t,u)}be(e,t,n);break;case 21:be(e,t,n);break;case 22:n.mode&1?(ie=(r=ie)||n.memoizedState!==null,be(e,t,n),ie=r):be(e,t,n);break;default:be(e,t,n)}}function gs(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new zp),t.forEach(function(r){var l=Vp.bind(null,e,r);n.has(r)||(n.add(r),r.then(l,l))})}}function je(e,t){var n=t.deletions;if(n!==null)for(var r=0;r<n.length;r++){var l=n[r];try{var i=e,o=t,u=o;e:for(;u!==null;){switch(u.tag){case 5:ee=u.stateNode,ze=!1;break e;case 3:ee=u.stateNode.containerInfo,ze=!0;break e;case 4:ee=u.stateNode.containerInfo,ze=!0;break e}u=u.return}if(ee===null)throw Error(S(160));Qc(i,o,l),ee=null,ze=!1;var s=l.alternate;s!==null&&(s.return=null),l.return=null}catch(a){H(l,t,a)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)Vc(t,e),t=t.sibling}function Vc(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(je(t,e),Ue(e),r&4){try{An(3,e,e.return),jl(3,e)}catch(w){H(e,e.return,w)}try{An(5,e,e.return)}catch(w){H(e,e.return,w)}}break;case 1:je(t,e),Ue(e),r&512&&n!==null&&en(n,n.return);break;case 5:if(je(t,e),Ue(e),r&512&&n!==null&&en(n,n.return),e.flags&32){var l=e.stateNode;try{Vn(l,\"\")}catch(w){H(e,e.return,w)}}if(r&4&&(l=e.stateNode,l!=null)){var i=e.memoizedProps,o=n!==null?n.memoizedProps:i,u=e.type,s=e.updateQueue;if(e.updateQueue=null,s!==null)try{u===\"input\"&&i.type===\"radio\"&&i.name!=null&&fa(l,i),Ri(u,o);var a=Ri(u,i);for(o=0;o<s.length;o+=2){var h=s[o],p=s[o+1];h===\"style\"?va(l,p):h===\"dangerouslySetInnerHTML\"?ha(l,p):h===\"children\"?Vn(l,p):Co(l,h,p,a)}switch(u){case\"input\":Ei(l,i);break;case\"textarea\":da(l,i);break;case\"select\":var m=l._wrapperState.wasMultiple;l._wrapperState.wasMultiple=!!i.multiple;var v=i.value;v!=null?nn(l,!!i.multiple,v,!1):m!==!!i.multiple&&(i.defaultValue!=null?nn(l,!!i.multiple,i.defaultValue,!0):nn(l,!!i.multiple,i.multiple?[]:\"\",!1))}l[Jn]=i}catch(w){H(e,e.return,w)}}break;case 6:if(je(t,e),Ue(e),r&4){if(e.stateNode===null)throw Error(S(162));l=e.stateNode,i=e.memoizedProps;try{l.nodeValue=i}catch(w){H(e,e.return,w)}}break;case 3:if(je(t,e),Ue(e),r&4&&n!==null&&n.memoizedState.isDehydrated)try{qn(t.containerInfo)}catch(w){H(e,e.return,w)}break;case 4:je(t,e),Ue(e);break;case 13:je(t,e),Ue(e),l=e.child,l.flags&8192&&(i=l.memoizedState!==null,l.stateNode.isHidden=i,!i||l.alternate!==null&&l.alternate.memoizedState!==null||(nu=K())),r&4&&gs(e);break;case 22:if(h=n!==null&&n.memoizedState!==null,e.mode&1?(ie=(a=ie)||h,je(t,e),ie=a):je(t,e),Ue(e),r&8192){if(a=e.memoizedState!==null,(e.stateNode.isHidden=a)&&!h&&e.mode&1)for(O=e,h=e.child;h!==null;){for(p=O=h;O!==null;){switch(m=O,v=m.child,m.tag){case 0:case 11:case 14:case 15:An(4,m,m.return);break;case 1:en(m,m.return);var g=m.stateNode;if(typeof g.componentWillUnmount==\"function\"){r=m,n=m.return;try{t=r,g.props=t.memoizedProps,g.state=t.memoizedState,g.componentWillUnmount()}catch(w){H(r,n,w)}}break;case 5:en(m,m.return);break;case 22:if(m.memoizedState!==null){xs(p);continue}}v!==null?(v.return=m,O=v):xs(p)}h=h.sibling}e:for(h=null,p=e;;){if(p.tag===5){if(h===null){h=p;try{l=p.stateNode,a?(i=l.style,typeof i.setProperty==\"function\"?i.setProperty(\"display\",\"none\",\"important\"):i.display=\"none\"):(u=p.stateNode,s=p.memoizedProps.style,o=s!=null&&s.hasOwnProperty(\"display\")?s.display:null,u.style.display=ma(\"display\",o))}catch(w){H(e,e.return,w)}}}else if(p.tag===6){if(h===null)try{p.stateNode.nodeValue=a?\"\":p.memoizedProps}catch(w){H(e,e.return,w)}}else if((p.tag!==22&&p.tag!==23||p.memoizedState===null||p===e)&&p.child!==null){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;p.sibling===null;){if(p.return===null||p.return===e)break e;h===p&&(h=null),p=p.return}h===p&&(h=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:je(t,e),Ue(e),r&4&&gs(e);break;case 21:break;default:je(t,e),Ue(e)}}function Ue(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(Bc(n)){var r=n;break e}n=n.return}throw Error(S(160))}switch(r.tag){case 5:var l=r.stateNode;r.flags&32&&(Vn(l,\"\"),r.flags&=-33);var i=ys(e);io(e,i,l);break;case 3:case 4:var o=r.stateNode.containerInfo,u=ys(e);lo(e,u,o);break;default:throw Error(S(161))}}catch(s){H(e,e.return,s)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function Mp(e,t,n){O=e,Hc(e)}function Hc(e,t,n){for(var r=(e.mode&1)!==0;O!==null;){var l=O,i=l.child;if(l.tag===22&&r){var o=l.memoizedState!==null||Lr;if(!o){var u=l.alternate,s=u!==null&&u.memoizedState!==null||ie;u=Lr;var a=ie;if(Lr=o,(ie=s)&&!a)for(O=l;O!==null;)o=O,s=o.child,o.tag===22&&o.memoizedState!==null?Ss(l):s!==null?(s.return=o,O=s):Ss(l);for(;i!==null;)O=i,Hc(i),i=i.sibling;O=l,Lr=u,ie=a}ws(e)}else l.subtreeFlags&8772&&i!==null?(i.return=l,O=i):ws(e)}}function ws(e){for(;O!==null;){var t=O;if(t.flags&8772){var n=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:ie||jl(5,t);break;case 1:var r=t.stateNode;if(t.flags&4&&!ie)if(n===null)r.componentDidMount();else{var l=t.elementType===t.type?n.memoizedProps:Le(t.type,n.memoizedProps);r.componentDidUpdate(l,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;i!==null&&rs(t,i,r);break;case 3:var o=t.updateQueue;if(o!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}rs(t,o,n)}break;case 5:var u=t.stateNode;if(n===null&&t.flags&4){n=u;var s=t.memoizedProps;switch(t.type){case\"button\":case\"input\":case\"select\":case\"textarea\":s.autoFocus&&n.focus();break;case\"img\":s.src&&(n.src=s.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var a=t.alternate;if(a!==null){var h=a.memoizedState;if(h!==null){var p=h.dehydrated;p!==null&&qn(p)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(S(163))}ie||t.flags&512&&ro(t)}catch(m){H(t,t.return,m)}}if(t===e){O=null;break}if(n=t.sibling,n!==null){n.return=t.return,O=n;break}O=t.return}}function xs(e){for(;O!==null;){var t=O;if(t===e){O=null;break}var n=t.sibling;if(n!==null){n.return=t.return,O=n;break}O=t.return}}function Ss(e){for(;O!==null;){var t=O;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{jl(4,t)}catch(s){H(t,n,s)}break;case 1:var r=t.stateNode;if(typeof r.componentDidMount==\"function\"){var l=t.return;try{r.componentDidMount()}catch(s){H(t,l,s)}}var i=t.return;try{ro(t)}catch(s){H(t,i,s)}break;case 5:var o=t.return;try{ro(t)}catch(s){H(t,o,s)}}}catch(s){H(t,t.return,s)}if(t===e){O=null;break}var u=t.sibling;if(u!==null){u.return=t.return,O=u;break}O=t.return}}var Dp=Math.ceil,dl=Je.ReactCurrentDispatcher,eu=Je.ReactCurrentOwner,_e=Je.ReactCurrentBatchConfig,F=0,b=null,q=null,te=0,ge=0,tn=xt(0),X=0,lr=null,Dt=0,Ll=0,tu=0,$n=null,pe=null,nu=0,mn=1/0,Ve=null,pl=!1,oo=null,pt=null,Tr=!1,ot=null,hl=0,Bn=0,uo=null,Hr=-1,Wr=0;function ce(){return F&6?K():Hr!==-1?Hr:Hr=K()}function ht(e){return e.mode&1?F&2&&te!==0?te&-te:wp.transition!==null?(Wr===0&&(Wr=Oa()),Wr):(e=D,e!==0||(e=window.event,e=e===void 0?16:Ma(e.type)),e):1}function De(e,t,n,r){if(50<Bn)throw Bn=0,uo=null,Error(S(185));sr(e,n,r),(!(F&2)||e!==b)&&(e===b&&(!(F&2)&&(Ll|=n),X===4&&lt(e,te)),ye(e,r),n===1&&F===0&&!(t.mode&1)&&(mn=K()+500,_l&&St()))}function ye(e,t){var n=e.callbackNode;wd(e,t);var r=Zr(e,e===b?te:0);if(r===0)n!==null&&ju(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(n!=null&&ju(n),t===1)e.tag===0?gp(ks.bind(null,e)):ec(ks.bind(null,e)),hp(function(){!(F&6)&&St()}),n=null;else{switch(Ra(r)){case 1:n=Oo;break;case 4:n=Na;break;case 16:n=Xr;break;case 536870912:n=_a;break;default:n=Xr}n=Jc(n,Wc.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Wc(e,t){if(Hr=-1,Wr=0,F&6)throw Error(S(327));var n=e.callbackNode;if(sn()&&e.callbackNode!==n)return null;var r=Zr(e,e===b?te:0);if(r===0)return null;if(r&30||r&e.expiredLanes||t)t=ml(e,r);else{t=r;var l=F;F|=2;var i=qc();(b!==e||te!==t)&&(Ve=null,mn=K()+500,Lt(e,t));do try{Ap();break}catch(u){Kc(e,u)}while(1);Bo(),dl.current=i,F=l,q!==null?t=0:(b=null,te=0,t=X)}if(t!==0){if(t===2&&(l=Fi(e),l!==0&&(r=l,t=so(e,l))),t===1)throw n=lr,Lt(e,0),lt(e,r),ye(e,K()),n;if(t===6)lt(e,r);else{if(l=e.current.alternate,!(r&30)&&!Ip(l)&&(t=ml(e,r),t===2&&(i=Fi(e),i!==0&&(r=i,t=so(e,i))),t===1))throw n=lr,Lt(e,0),lt(e,r),ye(e,K()),n;switch(e.finishedWork=l,e.finishedLanes=r,t){case 0:case 1:throw Error(S(345));case 2:Nt(e,pe,Ve);break;case 3:if(lt(e,r),(r&130023424)===r&&(t=nu+500-K(),10<t)){if(Zr(e,0)!==0)break;if(l=e.suspendedLanes,(l&r)!==r){ce(),e.pingedLanes|=e.suspendedLanes&l;break}e.timeoutHandle=Qi(Nt.bind(null,e,pe,Ve),t);break}Nt(e,pe,Ve);break;case 4:if(lt(e,r),(r&4194240)===r)break;for(t=e.eventTimes,l=-1;0<r;){var o=31-Me(r);i=1<<o,o=t[o],o>l&&(l=o),r&=~i}if(r=l,r=K()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Dp(r/1960))-r,10<r){e.timeoutHandle=Qi(Nt.bind(null,e,pe,Ve),r);break}Nt(e,pe,Ve);break;case 5:Nt(e,pe,Ve);break;default:throw Error(S(329))}}}return ye(e,K()),e.callbackNode===n?Wc.bind(null,e):null}function so(e,t){var n=$n;return e.current.memoizedState.isDehydrated&&(Lt(e,t).flags|=256),e=ml(e,t),e!==2&&(t=pe,pe=n,t!==null&&ao(t)),e}function ao(e){pe===null?pe=e:pe.push.apply(pe,e)}function Ip(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var l=n[r],i=l.getSnapshot;l=l.value;try{if(!Ie(i(),l))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function lt(e,t){for(t&=~tu,t&=~Ll,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Me(t),r=1<<n;e[n]=-1,t&=~r}}function ks(e){if(F&6)throw Error(S(327));sn();var t=Zr(e,0);if(!(t&1))return ye(e,K()),null;var n=ml(e,t);if(e.tag!==0&&n===2){var r=Fi(e);r!==0&&(t=r,n=so(e,r))}if(n===1)throw n=lr,Lt(e,0),lt(e,t),ye(e,K()),n;if(n===6)throw Error(S(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Nt(e,pe,Ve),ye(e,K()),null}function ru(e,t){var n=F;F|=1;try{return e(t)}finally{F=n,F===0&&(mn=K()+500,_l&&St())}}function It(e){ot!==null&&ot.tag===0&&!(F&6)&&sn();var t=F;F|=1;var n=_e.transition,r=D;try{if(_e.transition=null,D=1,e)return e()}finally{D=r,_e.transition=n,F=t,!(F&6)&&St()}}function lu(){ge=tn.current,A(tn)}function Lt(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,pp(n)),q!==null)for(n=q.return;n!==null;){var r=n;switch(Uo(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&nl();break;case 3:pn(),A(me),A(oe),qo();break;case 5:Ko(r);break;case 4:pn();break;case 13:A(B);break;case 19:A(B);break;case 10:Qo(r.type._context);break;case 22:case 23:lu()}n=n.return}if(b=e,q=e=mt(e.current,null),te=ge=t,X=0,lr=null,tu=Ll=Dt=0,pe=$n=null,Ot!==null){for(t=0;t<Ot.length;t++)if(n=Ot[t],r=n.interleaved,r!==null){n.interleaved=null;var l=r.next,i=n.pending;if(i!==null){var o=i.next;i.next=l,r.next=o}n.pending=r}Ot=null}return e}function Kc(e,t){do{var n=q;try{if(Bo(),Br.current=fl,cl){for(var r=Q.memoizedState;r!==null;){var l=r.queue;l!==null&&(l.pending=null),r=r.next}cl=!1}if(Mt=0,J=Y=Q=null,Un=!1,tr=0,eu.current=null,n===null||n.return===null){X=1,lr=t,q=null;break}e:{var i=e,o=n.return,u=n,s=t;if(t=te,u.flags|=32768,s!==null&&typeof s==\"object\"&&typeof s.then==\"function\"){var a=s,h=u,p=h.tag;if(!(h.mode&1)&&(p===0||p===11||p===15)){var m=h.alternate;m?(h.updateQueue=m.updateQueue,h.memoizedState=m.memoizedState,h.lanes=m.lanes):(h.updateQueue=null,h.memoizedState=null)}var v=as(o);if(v!==null){v.flags&=-257,cs(v,o,u,i,t),v.mode&1&&ss(i,a,t),t=v,s=a;var g=t.updateQueue;if(g===null){var w=new Set;w.add(s),t.updateQueue=w}else g.add(s);break e}else{if(!(t&1)){ss(i,a,t),iu();break e}s=Error(S(426))}}else if($&&u.mode&1){var x=as(o);if(x!==null){!(x.flags&65536)&&(x.flags|=256),cs(x,o,u,i,t),Ao(hn(s,u));break e}}i=s=hn(s,u),X!==4&&(X=2),$n===null?$n=[i]:$n.push(i),i=o;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t;var f=Rc(i,s,t);ns(i,f);break e;case 1:u=s;var c=i.type,d=i.stateNode;if(!(i.flags&128)&&(typeof c.getDerivedStateFromError==\"function\"||d!==null&&typeof d.componentDidCatch==\"function\"&&(pt===null||!pt.has(d)))){i.flags|=65536,t&=-t,i.lanes|=t;var y=jc(i,u,t);ns(i,y);break e}}i=i.return}while(i!==null)}Yc(n)}catch(P){t=P,q===n&&n!==null&&(q=n=n.return);continue}break}while(1)}function qc(){var e=dl.current;return dl.current=fl,e===null?fl:e}function iu(){(X===0||X===3||X===2)&&(X=4),b===null||!(Dt&268435455)&&!(Ll&268435455)||lt(b,te)}function ml(e,t){var n=F;F|=2;var r=qc();(b!==e||te!==t)&&(Ve=null,Lt(e,t));do try{Up();break}catch(l){Kc(e,l)}while(1);if(Bo(),F=n,dl.current=r,q!==null)throw Error(S(261));return b=null,te=0,X}function Up(){for(;q!==null;)Gc(q)}function Ap(){for(;q!==null&&!cd();)Gc(q)}function Gc(e){var t=Zc(e.alternate,e,ge);e.memoizedProps=e.pendingProps,t===null?Yc(e):q=t,eu.current=null}function Yc(e){var t=e;do{var n=t.alternate;if(e=t.return,t.flags&32768){if(n=Tp(n,t),n!==null){n.flags&=32767,q=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{X=6,q=null;return}}else if(n=Lp(n,t,ge),n!==null){q=n;return}if(t=t.sibling,t!==null){q=t;return}q=t=e}while(t!==null);X===0&&(X=5)}function Nt(e,t,n){var r=D,l=_e.transition;try{_e.transition=null,D=1,$p(e,t,n,r)}finally{_e.transition=l,D=r}return null}function $p(e,t,n,r){do sn();while(ot!==null);if(F&6)throw Error(S(327));n=e.finishedWork;var l=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(S(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(xd(e,i),e===b&&(q=b=null,te=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||Tr||(Tr=!0,Jc(Xr,function(){return sn(),null})),i=(n.flags&15990)!==0,n.subtreeFlags&15990||i){i=_e.transition,_e.transition=null;var o=D;D=1;var u=F;F|=4,eu.current=null,Fp(e,n),Vc(n,e),op($i),Jr=!!Ai,$i=Ai=null,e.current=n,Mp(n),fd(),F=u,D=o,_e.transition=i}else e.current=n;if(Tr&&(Tr=!1,ot=e,hl=l),i=e.pendingLanes,i===0&&(pt=null),hd(n.stateNode),ye(e,K()),t!==null)for(r=e.onRecoverableError,n=0;n<t.length;n++)l=t[n],r(l.value,{componentStack:l.stack,digest:l.digest});if(pl)throw pl=!1,e=oo,oo=null,e;return hl&1&&e.tag!==0&&sn(),i=e.pendingLanes,i&1?e===uo?Bn++:(Bn=0,uo=e):Bn=0,St(),null}function sn(){if(ot!==null){var e=Ra(hl),t=_e.transition,n=D;try{if(_e.transition=null,D=16>e?16:e,ot===null)var r=!1;else{if(e=ot,ot=null,hl=0,F&6)throw Error(S(331));var l=F;for(F|=4,O=e.current;O!==null;){var i=O,o=i.child;if(O.flags&16){var u=i.deletions;if(u!==null){for(var s=0;s<u.length;s++){var a=u[s];for(O=a;O!==null;){var h=O;switch(h.tag){case 0:case 11:case 15:An(8,h,i)}var p=h.child;if(p!==null)p.return=h,O=p;else for(;O!==null;){h=O;var m=h.sibling,v=h.return;if($c(h),h===a){O=null;break}if(m!==null){m.return=v,O=m;break}O=v}}}var g=i.alternate;if(g!==null){var w=g.child;if(w!==null){g.child=null;do{var x=w.sibling;w.sibling=null,w=x}while(w!==null)}}O=i}}if(i.subtreeFlags&2064&&o!==null)o.return=i,O=o;else e:for(;O!==null;){if(i=O,i.flags&2048)switch(i.tag){case 0:case 11:case 15:An(9,i,i.return)}var f=i.sibling;if(f!==null){f.return=i.return,O=f;break e}O=i.return}}var c=e.current;for(O=c;O!==null;){o=O;var d=o.child;if(o.subtreeFlags&2064&&d!==null)d.return=o,O=d;else e:for(o=c;O!==null;){if(u=O,u.flags&2048)try{switch(u.tag){case 0:case 11:case 15:jl(9,u)}}catch(P){H(u,u.return,P)}if(u===o){O=null;break e}var y=u.sibling;if(y!==null){y.return=u.return,O=y;break e}O=u.return}}if(F=l,St(),Be&&typeof Be.onPostCommitFiberRoot==\"function\")try{Be.onPostCommitFiberRoot(kl,e)}catch{}r=!0}return r}finally{D=n,_e.transition=t}}return!1}function Cs(e,t,n){t=hn(n,t),t=Rc(e,t,1),e=dt(e,t,1),t=ce(),e!==null&&(sr(e,1,t),ye(e,t))}function H(e,t,n){if(e.tag===3)Cs(e,e,n);else for(;t!==null;){if(t.tag===3){Cs(t,e,n);break}else if(t.tag===1){var r=t.stateNode;if(typeof t.type.getDerivedStateFromError==\"function\"||typeof r.componentDidCatch==\"function\"&&(pt===null||!pt.has(r))){e=hn(n,e),e=jc(t,e,1),t=dt(t,e,1),e=ce(),t!==null&&(sr(t,1,e),ye(t,e));break}}t=t.return}}function Bp(e,t,n){var r=e.pingCache;r!==null&&r.delete(t),t=ce(),e.pingedLanes|=e.suspendedLanes&n,b===e&&(te&n)===n&&(X===4||X===3&&(te&130023424)===te&&500>K()-nu?Lt(e,0):tu|=n),ye(e,t)}function Xc(e,t){t===0&&(e.mode&1?(t=kr,kr<<=1,!(kr&130023424)&&(kr=4194304)):t=1);var n=ce();e=Xe(e,t),e!==null&&(sr(e,t,n),ye(e,n))}function Qp(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),Xc(e,n)}function Vp(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,l=e.memoizedState;l!==null&&(n=l.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(S(314))}r!==null&&r.delete(t),Xc(e,n)}var Zc;Zc=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||me.current)he=!0;else{if(!(e.lanes&n)&&!(t.flags&128))return he=!1,jp(e,t,n);he=!!(e.flags&131072)}else he=!1,$&&t.flags&1048576&&tc(t,il,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Vr(e,t),e=t.pendingProps;var l=cn(t,oe.current);un(t,n),l=Yo(null,t,r,e,l,n);var i=Xo();return t.flags|=1,typeof l==\"object\"&&l!==null&&typeof l.render==\"function\"&&l.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,ve(r)?(i=!0,rl(t)):i=!1,t.memoizedState=l.state!==null&&l.state!==void 0?l.state:null,Ho(t),l.updater=Rl,t.stateNode=l,l._reactInternals=t,Yi(t,r,e,n),t=Ji(null,t,r,!0,i,n)):(t.tag=0,$&&i&&Io(t),se(null,t,l,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Vr(e,t),e=t.pendingProps,l=r._init,r=l(r._payload),t.type=r,l=t.tag=Wp(r),e=Le(r,e),l){case 0:t=Zi(null,t,r,e,n);break e;case 1:t=ps(null,t,r,e,n);break e;case 11:t=fs(null,t,r,e,n);break e;case 14:t=ds(null,t,r,Le(r.type,e),n);break e}throw Error(S(306,r,\"\"))}return t;case 0:return r=t.type,l=t.pendingProps,l=t.elementType===r?l:Le(r,l),Zi(e,t,r,l,n);case 1:return r=t.type,l=t.pendingProps,l=t.elementType===r?l:Le(r,l),ps(e,t,r,l,n);case 3:e:{if(Fc(t),e===null)throw Error(S(387));r=t.pendingProps,i=t.memoizedState,l=i.element,uc(e,t),sl(t,r,null,n);var o=t.memoizedState;if(r=o.element,i.isDehydrated)if(i={element:r,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},t.updateQueue.baseState=i,t.memoizedState=i,t.flags&256){l=hn(Error(S(423)),t),t=hs(e,t,r,n,l);break e}else if(r!==l){l=hn(Error(S(424)),t),t=hs(e,t,r,n,l);break e}else for(we=ft(t.stateNode.containerInfo.firstChild),xe=t,$=!0,Fe=null,n=ic(t,null,r,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(fn(),r===l){t=Ze(e,t,n);break e}se(e,t,r,n)}t=t.child}return t;case 5:return sc(t),e===null&&Ki(t),r=t.type,l=t.pendingProps,i=e!==null?e.memoizedProps:null,o=l.children,Bi(r,l)?o=null:i!==null&&Bi(r,i)&&(t.flags|=32),zc(e,t),se(e,t,o,n),t.child;case 6:return e===null&&Ki(t),null;case 13:return Mc(e,t,n);case 4:return Wo(t,t.stateNode.containerInfo),r=t.pendingProps,e===null?t.child=dn(t,null,r,n):se(e,t,r,n),t.child;case 11:return r=t.type,l=t.pendingProps,l=t.elementType===r?l:Le(r,l),fs(e,t,r,l,n);case 7:return se(e,t,t.pendingProps,n),t.child;case 8:return se(e,t,t.pendingProps.children,n),t.child;case 12:return se(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,l=t.pendingProps,i=t.memoizedProps,o=l.value,I(ol,r._currentValue),r._currentValue=o,i!==null)if(Ie(i.value,o)){if(i.children===l.children&&!me.current){t=Ze(e,t,n);break e}}else for(i=t.child,i!==null&&(i.return=t);i!==null;){var u=i.dependencies;if(u!==null){o=i.child;for(var s=u.firstContext;s!==null;){if(s.context===r){if(i.tag===1){s=qe(-1,n&-n),s.tag=2;var a=i.updateQueue;if(a!==null){a=a.shared;var h=a.pending;h===null?s.next=s:(s.next=h.next,h.next=s),a.pending=s}}i.lanes|=n,s=i.alternate,s!==null&&(s.lanes|=n),qi(i.return,n,t),u.lanes|=n;break}s=s.next}}else if(i.tag===10)o=i.type===t.type?null:i.child;else if(i.tag===18){if(o=i.return,o===null)throw Error(S(341));o.lanes|=n,u=o.alternate,u!==null&&(u.lanes|=n),qi(o,n,t),o=i.sibling}else o=i.child;if(o!==null)o.return=i;else for(o=i;o!==null;){if(o===t){o=null;break}if(i=o.sibling,i!==null){i.return=o.return,o=i;break}o=o.return}i=o}se(e,t,l.children,n),t=t.child}return t;case 9:return l=t.type,r=t.pendingProps.children,un(t,n),l=Oe(l),r=r(l),t.flags|=1,se(e,t,r,n),t.child;case 14:return r=t.type,l=Le(r,t.pendingProps),l=Le(r.type,l),ds(e,t,r,l,n);case 15:return Lc(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,l=t.pendingProps,l=t.elementType===r?l:Le(r,l),Vr(e,t),t.tag=1,ve(r)?(e=!0,rl(t)):e=!1,un(t,n),Oc(t,r,l),Yi(t,r,l,n),Ji(null,t,r,!0,e,n);case 19:return Dc(e,t,n);case 22:return Tc(e,t,n)}throw Error(S(156,t.tag))};function Jc(e,t){return Pa(e,t)}function Hp(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ne(e,t,n,r){return new Hp(e,t,n,r)}function ou(e){return e=e.prototype,!(!e||!e.isReactComponent)}function Wp(e){if(typeof e==\"function\")return ou(e)?1:0;if(e!=null){if(e=e.$$typeof,e===Po)return 11;if(e===No)return 14}return 2}function mt(e,t){var n=e.alternate;return n===null?(n=Ne(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Kr(e,t,n,r,l,i){var o=2;if(r=e,typeof e==\"function\")ou(e)&&(o=1);else if(typeof e==\"string\")o=5;else e:switch(e){case Wt:return Tt(n.children,l,i,t);case Eo:o=8,l|=8;break;case wi:return e=Ne(12,n,t,l|2),e.elementType=wi,e.lanes=i,e;case xi:return e=Ne(13,n,t,l),e.elementType=xi,e.lanes=i,e;case Si:return e=Ne(19,n,t,l),e.elementType=Si,e.lanes=i,e;case sa:return Tl(n,l,i,t);default:if(typeof e==\"object\"&&e!==null)switch(e.$$typeof){case oa:o=10;break e;case ua:o=9;break e;case Po:o=11;break e;case No:o=14;break e;case et:o=16,r=null;break e}throw Error(S(130,e==null?e:typeof e,\"\"))}return t=Ne(o,n,t,l),t.elementType=e,t.type=r,t.lanes=i,t}function Tt(e,t,n,r){return e=Ne(7,e,r,t),e.lanes=n,e}function Tl(e,t,n,r){return e=Ne(22,e,r,t),e.elementType=sa,e.lanes=n,e.stateNode={isHidden:!1},e}function pi(e,t,n){return e=Ne(6,e,null,t),e.lanes=n,e}function hi(e,t,n){return t=Ne(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Kp(e,t,n,r,l){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=Gl(0),this.expirationTimes=Gl(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Gl(0),this.identifierPrefix=r,this.onRecoverableError=l,this.mutableSourceEagerHydrationData=null}function uu(e,t,n,r,l,i,o,u,s){return e=new Kp(e,t,n,u,s),t===1?(t=1,i===!0&&(t|=8)):t=0,i=Ne(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ho(i),e}function qp(e,t,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Ht,key:r==null?null:\"\"+r,children:e,containerInfo:t,implementation:n}}function bc(e){if(!e)return gt;e=e._reactInternals;e:{if(At(e)!==e||e.tag!==1)throw Error(S(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(ve(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(S(171))}if(e.tag===1){var n=e.type;if(ve(n))return ba(e,n,t)}return t}function ef(e,t,n,r,l,i,o,u,s){return e=uu(n,r,!0,e,l,i,o,u,s),e.context=bc(null),n=e.current,r=ce(),l=ht(n),i=qe(r,l),i.callback=t??null,dt(n,i,l),e.current.lanes=l,sr(e,l,r),ye(e,r),e}function zl(e,t,n,r){var l=t.current,i=ce(),o=ht(l);return n=bc(n),t.context===null?t.context=n:t.pendingContext=n,t=qe(i,o),t.payload={element:e},r=r===void 0?null:r,r!==null&&(t.callback=r),e=dt(l,t,o),e!==null&&(De(e,l,o,i),$r(e,l,o)),o}function vl(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function Es(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function su(e,t){Es(e,t),(e=e.alternate)&&Es(e,t)}function Gp(){return null}var tf=typeof reportError==\"function\"?reportError:function(e){console.error(e)};function au(e){this._internalRoot=e}Fl.prototype.render=au.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(S(409));zl(e,t,null,null)};Fl.prototype.unmount=au.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;It(function(){zl(null,e,null,null)}),t[Ye]=null}};function Fl(e){this._internalRoot=e}Fl.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ta();e={blockedOn:null,target:e,priority:t};for(var n=0;n<rt.length&&t!==0&&t<rt[n].priority;n++);rt.splice(n,0,e),n===0&&Fa(e)}};function cu(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function Ml(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==\" react-mount-point-unstable \"))}function Ps(){}function Yp(e,t,n,r,l){if(l){if(typeof r==\"function\"){var i=r;r=function(){var a=vl(o);i.call(a)}}var o=ef(t,r,e,0,null,!1,!1,\"\",Ps);return e._reactRootContainer=o,e[Ye]=o.current,Xn(e.nodeType===8?e.parentNode:e),It(),o}for(;l=e.lastChild;)e.removeChild(l);if(typeof r==\"function\"){var u=r;r=function(){var a=vl(s);u.call(a)}}var s=uu(e,0,!1,null,null,!1,!1,\"\",Ps);return e._reactRootContainer=s,e[Ye]=s.current,Xn(e.nodeType===8?e.parentNode:e),It(function(){zl(t,s,n,r)}),s}function Dl(e,t,n,r,l){var i=n._reactRootContainer;if(i){var o=i;if(typeof l==\"function\"){var u=l;l=function(){var s=vl(o);u.call(s)}}zl(t,o,e,l)}else o=Yp(n,t,e,l,r);return vl(o)}ja=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=jn(t.pendingLanes);n!==0&&(Ro(t,n|1),ye(t,K()),!(F&6)&&(mn=K()+500,St()))}break;case 13:It(function(){var r=Xe(e,1);if(r!==null){var l=ce();De(r,e,1,l)}}),su(e,1)}};jo=function(e){if(e.tag===13){var t=Xe(e,134217728);if(t!==null){var n=ce();De(t,e,134217728,n)}su(e,134217728)}};La=function(e){if(e.tag===13){var t=ht(e),n=Xe(e,t);if(n!==null){var r=ce();De(n,e,t,r)}su(e,t)}};Ta=function(){return D};za=function(e,t){var n=D;try{return D=e,t()}finally{D=n}};Li=function(e,t,n){switch(t){case\"input\":if(Ei(e,n),t=n.name,n.type===\"radio\"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+t)+'][type=\"radio\"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var l=Nl(r);if(!l)throw Error(S(90));ca(r),Ei(r,l)}}}break;case\"textarea\":da(e,n);break;case\"select\":t=n.value,t!=null&&nn(e,!!n.multiple,t,!1)}};wa=ru;xa=It;var Xp={usingClientEntryPoint:!1,Events:[cr,Yt,Nl,ya,ga,ru]},_n={findFiberByHostInstance:_t,bundleType:0,version:\"18.3.1\",rendererPackageName:\"react-dom\"},Zp={bundleType:_n.bundleType,version:_n.version,rendererPackageName:_n.rendererPackageName,rendererConfig:_n.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Je.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=Ca(e),e===null?null:e.stateNode},findFiberByHostInstance:_n.findFiberByHostInstance||Gp,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:\"18.3.1-next-f1338f8080-20240426\"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<\"u\"){var zr=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!zr.isDisabled&&zr.supportsFiber)try{kl=zr.inject(Zp),Be=zr}catch{}}ke.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Xp;ke.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!cu(t))throw Error(S(200));return qp(e,t,null,n)};ke.createRoot=function(e,t){if(!cu(e))throw Error(S(299));var n=!1,r=\"\",l=tf;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(r=t.identifierPrefix),t.onRecoverableError!==void 0&&(l=t.onRecoverableError)),t=uu(e,1,!1,null,null,n,!1,r,l),e[Ye]=t.current,Xn(e.nodeType===8?e.parentNode:e),new au(t)};ke.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render==\"function\"?Error(S(188)):(e=Object.keys(e).join(\",\"),Error(S(268,e)));return e=Ca(t),e=e===null?null:e.stateNode,e};ke.flushSync=function(e){return It(e)};ke.hydrate=function(e,t,n){if(!Ml(t))throw Error(S(200));return Dl(null,e,t,!0,n)};ke.hydrateRoot=function(e,t,n){if(!cu(e))throw Error(S(405));var r=n!=null&&n.hydratedSources||null,l=!1,i=\"\",o=tf;if(n!=null&&(n.unstable_strictMode===!0&&(l=!0),n.identifierPrefix!==void 0&&(i=n.identifierPrefix),n.onRecoverableError!==void 0&&(o=n.onRecoverableError)),t=ef(t,null,e,1,n??null,l,!1,i,o),e[Ye]=t.current,Xn(e),r)for(e=0;e<r.length;e++)n=r[e],l=n._getVersion,l=l(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,l]:t.mutableSourceEagerHydrationData.push(n,l);return new Fl(t)};ke.render=function(e,t,n){if(!Ml(t))throw Error(S(200));return Dl(null,e,t,!1,n)};ke.unmountComponentAtNode=function(e){if(!Ml(e))throw Error(S(40));return e._reactRootContainer?(It(function(){Dl(null,null,e,!1,function(){e._reactRootContainer=null,e[Ye]=null})}),!0):!1};ke.unstable_batchedUpdates=ru;ke.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ml(n))throw Error(S(200));if(e==null||e._reactInternals===void 0)throw Error(S(38));return Dl(e,t,n,!1,r)};ke.version=\"18.3.1-next-f1338f8080-20240426\";function nf(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>\"u\"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!=\"function\"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(nf)}catch(e){console.error(e)}}nf(),na.exports=ke;var Jp=na.exports,Ns=Jp;yi.createRoot=Ns.createRoot,yi.hydrateRoot=Ns.hydrateRoot;class Il{constructor(){this.listeners=new Set,this.subscribe=this.subscribe.bind(this)}subscribe(t){const n={listener:t};return this.listeners.add(n),this.onSubscribe(),()=>{this.listeners.delete(n),this.onUnsubscribe()}}hasListeners(){return this.listeners.size>0}onSubscribe(){}onUnsubscribe(){}}const fu=typeof window>\"u\"||\"Deno\"in window;function Te(){}function bp(e,t){return typeof e==\"function\"?e(t):e}function eh(e){return typeof e==\"number\"&&e>=0&&e!==1/0}function th(e,t){return Math.max(e+(t||0)-Date.now(),0)}function Fr(e,t,n){return Ul(e)?typeof t==\"function\"?{...n,queryKey:e,queryFn:t}:{...t,queryKey:e}:e}function nt(e,t,n){return Ul(e)?[{...t,queryKey:e},n]:[e||{},t]}function _s(e,t){const{type:n=\"all\",exact:r,fetchStatus:l,predicate:i,queryKey:o,stale:u}=e;if(Ul(o)){if(r){if(t.queryHash!==du(o,t.options))return!1}else if(!yl(t.queryKey,o))return!1}if(n!==\"all\"){const s=t.isActive();if(n===\"active\"&&!s||n===\"inactive\"&&s)return!1}return!(typeof u==\"boolean\"&&t.isStale()!==u||typeof l<\"u\"&&l!==t.state.fetchStatus||i&&!i(t))}function Os(e,t){const{exact:n,fetching:r,predicate:l,mutationKey:i}=e;if(Ul(i)){if(!t.options.mutationKey)return!1;if(n){if(jt(t.options.mutationKey)!==jt(i))return!1}else if(!yl(t.options.mutationKey,i))return!1}return!(typeof r==\"boolean\"&&t.state.status===\"loading\"!==r||l&&!l(t))}function du(e,t){return((t==null?void 0:t.queryKeyHashFn)||jt)(e)}function jt(e){return JSON.stringify(e,(t,n)=>co(n)?Object.keys(n).sort().reduce((r,l)=>(r[l]=n[l],r),{}):n)}function yl(e,t){return rf(e,t)}function rf(e,t){return e===t?!0:typeof e!=typeof t?!1:e&&t&&typeof e==\"object\"&&typeof t==\"object\"?!Object.keys(t).some(n=>!rf(e[n],t[n])):!1}function lf(e,t){if(e===t)return e;const n=Rs(e)&&Rs(t);if(n||co(e)&&co(t)){const r=n?e.length:Object.keys(e).length,l=n?t:Object.keys(t),i=l.length,o=n?[]:{};let u=0;for(let s=0;s<i;s++){const a=n?s:l[s];o[a]=lf(e[a],t[a]),o[a]===e[a]&&u++}return r===i&&u===r?e:o}return t}function Rs(e){return Array.isArray(e)&&e.length===Object.keys(e).length}function co(e){if(!js(e))return!1;const t=e.constructor;if(typeof t>\"u\")return!0;const n=t.prototype;return!(!js(n)||!n.hasOwnProperty(\"isPrototypeOf\"))}function js(e){return Object.prototype.toString.call(e)===\"[object Object]\"}function Ul(e){return Array.isArray(e)}function of(e){return new Promise(t=>{setTimeout(t,e)})}function Ls(e){of(0).then(e)}function nh(){if(typeof AbortController==\"function\")return new AbortController}function rh(e,t,n){return n.isDataEqual!=null&&n.isDataEqual(e,t)?e:typeof n.structuralSharing==\"function\"?n.structuralSharing(e,t):n.structuralSharing!==!1?lf(e,t):t}class lh extends Il{constructor(){super(),this.setup=t=>{if(!fu&&window.addEventListener){const n=()=>t();return window.addEventListener(\"visibilitychange\",n,!1),window.addEventListener(\"focus\",n,!1),()=>{window.removeEventListener(\"visibilitychange\",n),window.removeEventListener(\"focus\",n)}}}}onSubscribe(){this.cleanup||this.setEventListener(this.setup)}onUnsubscribe(){if(!this.hasListeners()){var t;(t=this.cleanup)==null||t.call(this),this.cleanup=void 0}}setEventListener(t){var n;this.setup=t,(n=this.cleanup)==null||n.call(this),this.cleanup=t(r=>{typeof r==\"boolean\"?this.setFocused(r):this.onFocus()})}setFocused(t){this.focused!==t&&(this.focused=t,this.onFocus())}onFocus(){this.listeners.forEach(({listener:t})=>{t()})}isFocused(){return typeof this.focused==\"boolean\"?this.focused:typeof document>\"u\"?!0:[void 0,\"visible\",\"prerender\"].includes(document.visibilityState)}}const fo=new lh,Ts=[\"online\",\"offline\"];class ih extends Il{constructor(){super(),this.setup=t=>{if(!fu&&window.addEventListener){const n=()=>t();return Ts.forEach(r=>{window.addEventListener(r,n,!1)}),()=>{Ts.forEach(r=>{window.removeEventListener(r,n)})}}}}onSubscribe(){this.cleanup||this.setEventListener(this.setup)}onUnsubscribe(){if(!this.hasListeners()){var t;(t=this.cleanup)==null||t.call(this),this.cleanup=void 0}}setEventListener(t){var n;this.setup=t,(n=this.cleanup)==null||n.call(this),this.cleanup=t(r=>{typeof r==\"boolean\"?this.setOnline(r):this.onOnline()})}setOnline(t){this.online!==t&&(this.online=t,this.onOnline())}onOnline(){this.listeners.forEach(({listener:t})=>{t()})}isOnline(){return typeof this.online==\"boolean\"?this.online:typeof navigator>\"u\"||typeof navigator.onLine>\"u\"?!0:navigator.onLine}}const gl=new ih;function oh(e){return Math.min(1e3*2**e,3e4)}function pu(e){return(e??\"online\")===\"online\"?gl.isOnline():!0}class uf{constructor(t){this.revert=t==null?void 0:t.revert,this.silent=t==null?void 0:t.silent}}function mi(e){return e instanceof uf}function sf(e){let t=!1,n=0,r=!1,l,i,o;const u=new Promise((x,f)=>{i=x,o=f}),s=x=>{r||(v(new uf(x)),e.abort==null||e.abort())},a=()=>{t=!0},h=()=>{t=!1},p=()=>!fo.isFocused()||e.networkMode!==\"always\"&&!gl.isOnline(),m=x=>{r||(r=!0,e.onSuccess==null||e.onSuccess(x),l==null||l(),i(x))},v=x=>{r||(r=!0,e.onError==null||e.onError(x),l==null||l(),o(x))},g=()=>new Promise(x=>{l=f=>{const c=r||!p();return c&&x(f),c},e.onPause==null||e.onPause()}).then(()=>{l=void 0,r||e.onContinue==null||e.onContinue()}),w=()=>{if(r)return;let x;try{x=e.fn()}catch(f){x=Promise.reject(f)}Promise.resolve(x).then(m).catch(f=>{var c,d;if(r)return;const y=(c=e.retry)!=null?c:3,P=(d=e.retryDelay)!=null?d:oh,E=typeof P==\"function\"?P(n,f):P,C=y===!0||typeof y==\"number\"&&n<y||typeof y==\"function\"&&y(n,f);if(t||!C){v(f);return}n++,e.onFail==null||e.onFail(n,f),of(E).then(()=>{if(p())return g()}).then(()=>{t?v(f):w()})})};return pu(e.networkMode)?w():g().then(w),{promise:u,cancel:s,continue:()=>(l==null?void 0:l())?u:Promise.resolve(),cancelRetry:a,continueRetry:h}}const hu=console;function uh(){let e=[],t=0,n=h=>{h()},r=h=>{h()};const l=h=>{let p;t++;try{p=h()}finally{t--,t||u()}return p},i=h=>{t?e.push(h):Ls(()=>{n(h)})},o=h=>(...p)=>{i(()=>{h(...p)})},u=()=>{const h=e;e=[],h.length&&Ls(()=>{r(()=>{h.forEach(p=>{n(p)})})})};return{batch:l,batchCalls:o,schedule:i,setNotifyFunction:h=>{n=h},setBatchNotifyFunction:h=>{r=h}}}const ae=uh();class af{destroy(){this.clearGcTimeout()}scheduleGc(){this.clearGcTimeout(),eh(this.cacheTime)&&(this.gcTimeout=setTimeout(()=>{this.optionalRemove()},this.cacheTime))}updateCacheTime(t){this.cacheTime=Math.max(this.cacheTime||0,t??(fu?1/0:5*60*1e3))}clearGcTimeout(){this.gcTimeout&&(clearTimeout(this.gcTimeout),this.gcTimeout=void 0)}}class sh extends af{constructor(t){super(),this.abortSignalConsumed=!1,this.defaultOptions=t.defaultOptions,this.setOptions(t.options),this.observers=[],this.cache=t.cache,this.logger=t.logger||hu,this.queryKey=t.queryKey,this.queryHash=t.queryHash,this.initialState=t.state||ah(this.options),this.state=this.initialState,this.scheduleGc()}get meta(){return this.options.meta}setOptions(t){this.options={...this.defaultOptions,...t},this.updateCacheTime(this.options.cacheTime)}optionalRemove(){!this.observers.length&&this.state.fetchStatus===\"idle\"&&this.cache.remove(this)}setData(t,n){const r=rh(this.state.data,t,this.options);return this.dispatch({data:r,type:\"success\",dataUpdatedAt:n==null?void 0:n.updatedAt,manual:n==null?void 0:n.manual}),r}setState(t,n){this.dispatch({type:\"setState\",state:t,setStateOptions:n})}cancel(t){var n;const r=this.promise;return(n=this.retryer)==null||n.cancel(t),r?r.then(Te).catch(Te):Promise.resolve()}destroy(){super.destroy(),this.cancel({silent:!0})}reset(){this.destroy(),this.setState(this.initialState)}isActive(){return this.observers.some(t=>t.options.enabled!==!1)}isDisabled(){return this.getObserversCount()>0&&!this.isActive()}isStale(){return this.state.isInvalidated||!this.state.dataUpdatedAt||this.observers.some(t=>t.getCurrentResult().isStale)}isStaleByTime(t=0){return this.state.isInvalidated||!this.state.dataUpdatedAt||!th(this.state.dataUpdatedAt,t)}onFocus(){var t;const n=this.observers.find(r=>r.shouldFetchOnWindowFocus());n&&n.refetch({cancelRefetch:!1}),(t=this.retryer)==null||t.continue()}onOnline(){var t;const n=this.observers.find(r=>r.shouldFetchOnReconnect());n&&n.refetch({cancelRefetch:!1}),(t=this.retryer)==null||t.continue()}addObserver(t){this.observers.includes(t)||(this.observers.push(t),this.clearGcTimeout(),this.cache.notify({type:\"observerAdded\",query:this,observer:t}))}removeObserver(t){this.observers.includes(t)&&(this.observers=this.observers.filter(n=>n!==t),this.observers.length||(this.retryer&&(this.abortSignalConsumed?this.retryer.cancel({revert:!0}):this.retryer.cancelRetry()),this.scheduleGc()),this.cache.notify({type:\"observerRemoved\",query:this,observer:t}))}getObserversCount(){return this.observers.length}invalidate(){this.state.isInvalidated||this.dispatch({type:\"invalidate\"})}fetch(t,n){var r,l;if(this.state.fetchStatus!==\"idle\"){if(this.state.dataUpdatedAt&&n!=null&&n.cancelRefetch)this.cancel({silent:!0});else if(this.promise){var i;return(i=this.retryer)==null||i.continueRetry(),this.promise}}if(t&&this.setOptions(t),!this.options.queryFn){const v=this.observers.find(g=>g.options.queryFn);v&&this.setOptions(v.options)}const o=nh(),u={queryKey:this.queryKey,pageParam:void 0,meta:this.meta},s=v=>{Object.defineProperty(v,\"signal\",{enumerable:!0,get:()=>{if(o)return this.abortSignalConsumed=!0,o.signal}})};s(u);const a=()=>this.options.queryFn?(this.abortSignalConsumed=!1,this.options.queryFn(u)):Promise.reject(\"Missing queryFn for queryKey '\"+this.options.queryHash+\"'\"),h={fetchOptions:n,options:this.options,queryKey:this.queryKey,state:this.state,fetchFn:a};if(s(h),(r=this.options.behavior)==null||r.onFetch(h),this.revertState=this.state,this.state.fetchStatus===\"idle\"||this.state.fetchMeta!==((l=h.fetchOptions)==null?void 0:l.meta)){var p;this.dispatch({type:\"fetch\",meta:(p=h.fetchOptions)==null?void 0:p.meta})}const m=v=>{if(mi(v)&&v.silent||this.dispatch({type:\"error\",error:v}),!mi(v)){var g,w,x,f;(g=(w=this.cache.config).onError)==null||g.call(w,v,this),(x=(f=this.cache.config).onSettled)==null||x.call(f,this.state.data,v,this)}this.isFetchingOptimistic||this.scheduleGc(),this.isFetchingOptimistic=!1};return this.retryer=sf({fn:h.fetchFn,abort:o==null?void 0:o.abort.bind(o),onSuccess:v=>{var g,w,x,f;if(typeof v>\"u\"){m(new Error(this.queryHash+\" data is undefined\"));return}this.setData(v),(g=(w=this.cache.config).onSuccess)==null||g.call(w,v,this),(x=(f=this.cache.config).onSettled)==null||x.call(f,v,this.state.error,this),this.isFetchingOptimistic||this.scheduleGc(),this.isFetchingOptimistic=!1},onError:m,onFail:(v,g)=>{this.dispatch({type:\"failed\",failureCount:v,error:g})},onPause:()=>{this.dispatch({type:\"pause\"})},onContinue:()=>{this.dispatch({type:\"continue\"})},retry:h.options.retry,retryDelay:h.options.retryDelay,networkMode:h.options.networkMode}),this.promise=this.retryer.promise,this.promise}dispatch(t){const n=r=>{var l,i;switch(t.type){case\"failed\":return{...r,fetchFailureCount:t.failureCount,fetchFailureReason:t.error};case\"pause\":return{...r,fetchStatus:\"paused\"};case\"continue\":return{...r,fetchStatus:\"fetching\"};case\"fetch\":return{...r,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:(l=t.meta)!=null?l:null,fetchStatus:pu(this.options.networkMode)?\"fetching\":\"paused\",...!r.dataUpdatedAt&&{error:null,status:\"loading\"}};case\"success\":return{...r,data:t.data,dataUpdateCount:r.dataUpdateCount+1,dataUpdatedAt:(i=t.dataUpdatedAt)!=null?i:Date.now(),error:null,isInvalidated:!1,status:\"success\",...!t.manual&&{fetchStatus:\"idle\",fetchFailureCount:0,fetchFailureReason:null}};case\"error\":const o=t.error;return mi(o)&&o.revert&&this.revertState?{...this.revertState,fetchStatus:\"idle\"}:{...r,error:o,errorUpdateCount:r.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:r.fetchFailureCount+1,fetchFailureReason:o,fetchStatus:\"idle\",status:\"error\"};case\"invalidate\":return{...r,isInvalidated:!0};case\"setState\":return{...r,...t.state}}};this.state=n(this.state),ae.batch(()=>{this.observers.forEach(r=>{r.onQueryUpdate(t)}),this.cache.notify({query:this,type:\"updated\",action:t})})}}function ah(e){const t=typeof e.initialData==\"function\"?e.initialData():e.initialData,n=typeof t<\"u\",r=n?typeof e.initialDataUpdatedAt==\"function\"?e.initialDataUpdatedAt():e.initialDataUpdatedAt:0;return{data:t,dataUpdateCount:0,dataUpdatedAt:n?r??Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:null,isInvalidated:!1,status:n?\"success\":\"loading\",fetchStatus:\"idle\"}}class ch extends Il{constructor(t){super(),this.config=t||{},this.queries=[],this.queriesMap={}}build(t,n,r){var l;const i=n.queryKey,o=(l=n.queryHash)!=null?l:du(i,n);let u=this.get(o);return u||(u=new sh({cache:this,logger:t.getLogger(),queryKey:i,queryHash:o,options:t.defaultQueryOptions(n),state:r,defaultOptions:t.getQueryDefaults(i)}),this.add(u)),u}add(t){this.queriesMap[t.queryHash]||(this.queriesMap[t.queryHash]=t,this.queries.push(t),this.notify({type:\"added\",query:t}))}remove(t){const n=this.queriesMap[t.queryHash];n&&(t.destroy(),this.queries=this.queries.filter(r=>r!==t),n===t&&delete this.queriesMap[t.queryHash],this.notify({type:\"removed\",query:t}))}clear(){ae.batch(()=>{this.queries.forEach(t=>{this.remove(t)})})}get(t){return this.queriesMap[t]}getAll(){return this.queries}find(t,n){const[r]=nt(t,n);return typeof r.exact>\"u\"&&(r.exact=!0),this.queries.find(l=>_s(r,l))}findAll(t,n){const[r]=nt(t,n);return Object.keys(r).length>0?this.queries.filter(l=>_s(r,l)):this.queries}notify(t){ae.batch(()=>{this.listeners.forEach(({listener:n})=>{n(t)})})}onFocus(){ae.batch(()=>{this.queries.forEach(t=>{t.onFocus()})})}onOnline(){ae.batch(()=>{this.queries.forEach(t=>{t.onOnline()})})}}class fh extends af{constructor(t){super(),this.defaultOptions=t.defaultOptions,this.mutationId=t.mutationId,this.mutationCache=t.mutationCache,this.logger=t.logger||hu,this.observers=[],this.state=t.state||dh(),this.setOptions(t.options),this.scheduleGc()}setOptions(t){this.options={...this.defaultOptions,...t},this.updateCacheTime(this.options.cacheTime)}get meta(){return this.options.meta}setState(t){this.dispatch({type:\"setState\",state:t})}addObserver(t){this.observers.includes(t)||(this.observers.push(t),this.clearGcTimeout(),this.mutationCache.notify({type:\"observerAdded\",mutation:this,observer:t}))}removeObserver(t){this.observers=this.observers.filter(n=>n!==t),this.scheduleGc(),this.mutationCache.notify({type:\"observerRemoved\",mutation:this,observer:t})}optionalRemove(){this.observers.length||(this.state.status===\"loading\"?this.scheduleGc():this.mutationCache.remove(this))}continue(){var t,n;return(t=(n=this.retryer)==null?void 0:n.continue())!=null?t:this.execute()}async execute(){const t=()=>{var C;return this.retryer=sf({fn:()=>this.options.mutationFn?this.options.mutationFn(this.state.variables):Promise.reject(\"No mutationFn found\"),onFail:(N,M)=>{this.dispatch({type:\"failed\",failureCount:N,error:M})},onPause:()=>{this.dispatch({type:\"pause\"})},onContinue:()=>{this.dispatch({type:\"continue\"})},retry:(C=this.options.retry)!=null?C:0,retryDelay:this.options.retryDelay,networkMode:this.options.networkMode}),this.retryer.promise},n=this.state.status===\"loading\";try{var r,l,i,o,u,s,a,h;if(!n){var p,m,v,g;this.dispatch({type:\"loading\",variables:this.options.variables}),await((p=(m=this.mutationCache.config).onMutate)==null?void 0:p.call(m,this.state.variables,this));const N=await((v=(g=this.options).onMutate)==null?void 0:v.call(g,this.state.variables));N!==this.state.context&&this.dispatch({type:\"loading\",context:N,variables:this.state.variables})}const C=await t();return await((r=(l=this.mutationCache.config).onSuccess)==null?void 0:r.call(l,C,this.state.variables,this.state.context,this)),await((i=(o=this.options).onSuccess)==null?void 0:i.call(o,C,this.state.variables,this.state.context)),await((u=(s=this.mutationCache.config).onSettled)==null?void 0:u.call(s,C,null,this.state.variables,this.state.context,this)),await((a=(h=this.options).onSettled)==null?void 0:a.call(h,C,null,this.state.variables,this.state.context)),this.dispatch({type:\"success\",data:C}),C}catch(C){try{var w,x,f,c,d,y,P,E;throw await((w=(x=this.mutationCache.config).onError)==null?void 0:w.call(x,C,this.state.variables,this.state.context,this)),await((f=(c=this.options).onError)==null?void 0:f.call(c,C,this.state.variables,this.state.context)),await((d=(y=this.mutationCache.config).onSettled)==null?void 0:d.call(y,void 0,C,this.state.variables,this.state.context,this)),await((P=(E=this.options).onSettled)==null?void 0:P.call(E,void 0,C,this.state.variables,this.state.context)),C}finally{this.dispatch({type:\"error\",error:C})}}}dispatch(t){const n=r=>{switch(t.type){case\"failed\":return{...r,failureCount:t.failureCount,failureReason:t.error};case\"pause\":return{...r,isPaused:!0};case\"continue\":return{...r,isPaused:!1};case\"loading\":return{...r,context:t.context,data:void 0,failureCount:0,failureReason:null,error:null,isPaused:!pu(this.options.networkMode),status:\"loading\",variables:t.variables};case\"success\":return{...r,data:t.data,failureCount:0,failureReason:null,error:null,status:\"success\",isPaused:!1};case\"error\":return{...r,data:void 0,error:t.error,failureCount:r.failureCount+1,failureReason:t.error,isPaused:!1,status:\"error\"};case\"setState\":return{...r,...t.state}}};this.state=n(this.state),ae.batch(()=>{this.observers.forEach(r=>{r.onMutationUpdate(t)}),this.mutationCache.notify({mutation:this,type:\"updated\",action:t})})}}function dh(){return{context:void 0,data:void 0,error:null,failureCount:0,failureReason:null,isPaused:!1,status:\"idle\",variables:void 0}}class ph extends Il{constructor(t){super(),this.config=t||{},this.mutations=[],this.mutationId=0}build(t,n,r){const l=new fh({mutationCache:this,logger:t.getLogger(),mutationId:++this.mutationId,options:t.defaultMutationOptions(n),state:r,defaultOptions:n.mutationKey?t.getMutationDefaults(n.mutationKey):void 0});return this.add(l),l}add(t){this.mutations.push(t),this.notify({type:\"added\",mutation:t})}remove(t){this.mutations=this.mutations.filter(n=>n!==t),this.notify({type:\"removed\",mutation:t})}clear(){ae.batch(()=>{this.mutations.forEach(t=>{this.remove(t)})})}getAll(){return this.mutations}find(t){return typeof t.exact>\"u\"&&(t.exact=!0),this.mutations.find(n=>Os(t,n))}findAll(t){return this.mutations.filter(n=>Os(t,n))}notify(t){ae.batch(()=>{this.listeners.forEach(({listener:n})=>{n(t)})})}resumePausedMutations(){var t;return this.resuming=((t=this.resuming)!=null?t:Promise.resolve()).then(()=>{const n=this.mutations.filter(r=>r.state.isPaused);return ae.batch(()=>n.reduce((r,l)=>r.then(()=>l.continue().catch(Te)),Promise.resolve()))}).then(()=>{this.resuming=void 0}),this.resuming}}function hh(){return{onFetch:e=>{e.fetchFn=()=>{var t,n,r,l,i,o;const u=(t=e.fetchOptions)==null||(n=t.meta)==null?void 0:n.refetchPage,s=(r=e.fetchOptions)==null||(l=r.meta)==null?void 0:l.fetchMore,a=s==null?void 0:s.pageParam,h=(s==null?void 0:s.direction)===\"forward\",p=(s==null?void 0:s.direction)===\"backward\",m=((i=e.state.data)==null?void 0:i.pages)||[],v=((o=e.state.data)==null?void 0:o.pageParams)||[];let g=v,w=!1;const x=E=>{Object.defineProperty(E,\"signal\",{enumerable:!0,get:()=>{var C;if((C=e.signal)!=null&&C.aborted)w=!0;else{var N;(N=e.signal)==null||N.addEventListener(\"abort\",()=>{w=!0})}return e.signal}})},f=e.options.queryFn||(()=>Promise.reject(\"Missing queryFn for queryKey '\"+e.options.queryHash+\"'\")),c=(E,C,N,M)=>(g=M?[C,...g]:[...g,C],M?[N,...E]:[...E,N]),d=(E,C,N,M)=>{if(w)return Promise.reject(\"Cancelled\");if(typeof N>\"u\"&&!C&&E.length)return Promise.resolve(E);const L={queryKey:e.queryKey,pageParam:N,meta:e.options.meta};x(L);const ue=f(L);return Promise.resolve(ue).then(kt=>c(E,N,kt,M))};let y;if(!m.length)y=d([]);else if(h){const E=typeof a<\"u\",C=E?a:zs(e.options,m);y=d(m,E,C)}else if(p){const E=typeof a<\"u\",C=E?a:mh(e.options,m);y=d(m,E,C,!0)}else{g=[];const E=typeof e.options.getNextPageParam>\"u\";y=(u&&m[0]?u(m[0],0,m):!0)?d([],E,v[0]):Promise.resolve(c([],v[0],m[0]));for(let N=1;N<m.length;N++)y=y.then(M=>{if(u&&m[N]?u(m[N],N,m):!0){const ue=E?v[N]:zs(e.options,M);return d(M,E,ue)}return Promise.resolve(c(M,v[N],m[N]))})}return y.then(E=>({pages:E,pageParams:g}))}}}}function zs(e,t){return e.getNextPageParam==null?void 0:e.getNextPageParam(t[t.length-1],t)}function mh(e,t){return e.getPreviousPageParam==null?void 0:e.getPreviousPageParam(t[0],t)}class vh{constructor(t={}){this.queryCache=t.queryCache||new ch,this.mutationCache=t.mutationCache||new ph,this.logger=t.logger||hu,this.defaultOptions=t.defaultOptions||{},this.queryDefaults=[],this.mutationDefaults=[],this.mountCount=0}mount(){this.mountCount++,this.mountCount===1&&(this.unsubscribeFocus=fo.subscribe(()=>{fo.isFocused()&&(this.resumePausedMutations(),this.queryCache.onFocus())}),this.unsubscribeOnline=gl.subscribe(()=>{gl.isOnline()&&(this.resumePausedMutations(),this.queryCache.onOnline())}))}unmount(){var t,n;this.mountCount--,this.mountCount===0&&((t=this.unsubscribeFocus)==null||t.call(this),this.unsubscribeFocus=void 0,(n=this.unsubscribeOnline)==null||n.call(this),this.unsubscribeOnline=void 0)}isFetching(t,n){const[r]=nt(t,n);return r.fetchStatus=\"fetching\",this.queryCache.findAll(r).length}isMutating(t){return this.mutationCache.findAll({...t,fetching:!0}).length}getQueryData(t,n){var r;return(r=this.queryCache.find(t,n))==null?void 0:r.state.data}ensureQueryData(t,n,r){const l=Fr(t,n,r),i=this.getQueryData(l.queryKey);return i?Promise.resolve(i):this.fetchQuery(l)}getQueriesData(t){return this.getQueryCache().findAll(t).map(({queryKey:n,state:r})=>{const l=r.data;return[n,l]})}setQueryData(t,n,r){const l=this.queryCache.find(t),i=l==null?void 0:l.state.data,o=bp(n,i);if(typeof o>\"u\")return;const u=Fr(t),s=this.defaultQueryOptions(u);return this.queryCache.build(this,s).setData(o,{...r,manual:!0})}setQueriesData(t,n,r){return ae.batch(()=>this.getQueryCache().findAll(t).map(({queryKey:l})=>[l,this.setQueryData(l,n,r)]))}getQueryState(t,n){var r;return(r=this.queryCache.find(t,n))==null?void 0:r.state}removeQueries(t,n){const[r]=nt(t,n),l=this.queryCache;ae.batch(()=>{l.findAll(r).forEach(i=>{l.remove(i)})})}resetQueries(t,n,r){const[l,i]=nt(t,n,r),o=this.queryCache,u={type:\"active\",...l};return ae.batch(()=>(o.findAll(l).forEach(s=>{s.reset()}),this.refetchQueries(u,i)))}cancelQueries(t,n,r){const[l,i={}]=nt(t,n,r);typeof i.revert>\"u\"&&(i.revert=!0);const o=ae.batch(()=>this.queryCache.findAll(l).map(u=>u.cancel(i)));return Promise.all(o).then(Te).catch(Te)}invalidateQueries(t,n,r){const[l,i]=nt(t,n,r);return ae.batch(()=>{var o,u;if(this.queryCache.findAll(l).forEach(a=>{a.invalidate()}),l.refetchType===\"none\")return Promise.resolve();const s={...l,type:(o=(u=l.refetchType)!=null?u:l.type)!=null?o:\"active\"};return this.refetchQueries(s,i)})}refetchQueries(t,n,r){const[l,i]=nt(t,n,r),o=ae.batch(()=>this.queryCache.findAll(l).filter(s=>!s.isDisabled()).map(s=>{var a;return s.fetch(void 0,{...i,cancelRefetch:(a=i==null?void 0:i.cancelRefetch)!=null?a:!0,meta:{refetchPage:l.refetchPage}})}));let u=Promise.all(o).then(Te);return i!=null&&i.throwOnError||(u=u.catch(Te)),u}fetchQuery(t,n,r){const l=Fr(t,n,r),i=this.defaultQueryOptions(l);typeof i.retry>\"u\"&&(i.retry=!1);const o=this.queryCache.build(this,i);return o.isStaleByTime(i.staleTime)?o.fetch(i):Promise.resolve(o.state.data)}prefetchQuery(t,n,r){return this.fetchQuery(t,n,r).then(Te).catch(Te)}fetchInfiniteQuery(t,n,r){const l=Fr(t,n,r);return l.behavior=hh(),this.fetchQuery(l)}prefetchInfiniteQuery(t,n,r){return this.fetchInfiniteQuery(t,n,r).then(Te).catch(Te)}resumePausedMutations(){return this.mutationCache.resumePausedMutations()}getQueryCache(){return this.queryCache}getMutationCache(){return this.mutationCache}getLogger(){return this.logger}getDefaultOptions(){return this.defaultOptions}setDefaultOptions(t){this.defaultOptions=t}setQueryDefaults(t,n){const r=this.queryDefaults.find(l=>jt(t)===jt(l.queryKey));r?r.defaultOptions=n:this.queryDefaults.push({queryKey:t,defaultOptions:n})}getQueryDefaults(t){if(!t)return;const n=this.queryDefaults.find(r=>yl(t,r.queryKey));return n==null?void 0:n.defaultOptions}setMutationDefaults(t,n){const r=this.mutationDefaults.find(l=>jt(t)===jt(l.mutationKey));r?r.defaultOptions=n:this.mutationDefaults.push({mutationKey:t,defaultOptions:n})}getMutationDefaults(t){if(!t)return;const n=this.mutationDefaults.find(r=>yl(t,r.mutationKey));return n==null?void 0:n.defaultOptions}defaultQueryOptions(t){if(t!=null&&t._defaulted)return t;const n={...this.defaultOptions.queries,...this.getQueryDefaults(t==null?void 0:t.queryKey),...t,_defaulted:!0};return!n.queryHash&&n.queryKey&&(n.queryHash=du(n.queryKey,n)),typeof n.refetchOnReconnect>\"u\"&&(n.refetchOnReconnect=n.networkMode!==\"always\"),typeof n.useErrorBoundary>\"u\"&&(n.useErrorBoundary=!!n.suspense),n}defaultMutationOptions(t){return t!=null&&t._defaulted?t:{...this.defaultOptions.mutations,...this.getMutationDefaults(t==null?void 0:t.mutationKey),...t,_defaulted:!0}}clear(){this.queryCache.clear(),this.mutationCache.clear()}}const Fs=_.createContext(void 0),yh=_.createContext(!1);function gh(e,t){return e||(t&&typeof window<\"u\"?(window.ReactQueryClientContext||(window.ReactQueryClientContext=Fs),window.ReactQueryClientContext):Fs)}const wh=({client:e,children:t,context:n,contextSharing:r=!1})=>{_.useEffect(()=>(e.mount(),()=>{e.unmount()}),[e]);const l=gh(n,r);return _.createElement(yh.Provider,{value:!n&&r},_.createElement(l.Provider,{value:e},t))};/**\n * @remix-run/router v1.23.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */function ir(){return ir=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ir.apply(this,arguments)}var ut;(function(e){e.Pop=\"POP\",e.Push=\"PUSH\",e.Replace=\"REPLACE\"})(ut||(ut={}));const Ms=\"popstate\";function xh(e){e===void 0&&(e={});function t(r,l){let{pathname:i,search:o,hash:u}=r.location;return po(\"\",{pathname:i,search:o,hash:u},l.state&&l.state.usr||null,l.state&&l.state.key||\"default\")}function n(r,l){return typeof l==\"string\"?l:wl(l)}return kh(t,n,null,e)}function G(e,t){if(e===!1||e===null||typeof e>\"u\")throw new Error(t)}function cf(e,t){if(!e){typeof console<\"u\"&&console.warn(t);try{throw new Error(t)}catch{}}}function Sh(){return Math.random().toString(36).substr(2,8)}function Ds(e,t){return{usr:e.state,key:e.key,idx:t}}function po(e,t,n,r){return n===void 0&&(n=null),ir({pathname:typeof e==\"string\"?e:e.pathname,search:\"\",hash:\"\"},typeof t==\"string\"?wn(t):t,{state:n,key:t&&t.key||r||Sh()})}function wl(e){let{pathname:t=\"/\",search:n=\"\",hash:r=\"\"}=e;return n&&n!==\"?\"&&(t+=n.charAt(0)===\"?\"?n:\"?\"+n),r&&r!==\"#\"&&(t+=r.charAt(0)===\"#\"?r:\"#\"+r),t}function wn(e){let t={};if(e){let n=e.indexOf(\"#\");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf(\"?\");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}function kh(e,t,n,r){r===void 0&&(r={});let{window:l=document.defaultView,v5Compat:i=!1}=r,o=l.history,u=ut.Pop,s=null,a=h();a==null&&(a=0,o.replaceState(ir({},o.state,{idx:a}),\"\"));function h(){return(o.state||{idx:null}).idx}function p(){u=ut.Pop;let x=h(),f=x==null?null:x-a;a=x,s&&s({action:u,location:w.location,delta:f})}function m(x,f){u=ut.Push;let c=po(w.location,x,f);n&&n(c,x),a=h()+1;let d=Ds(c,a),y=w.createHref(c);try{o.pushState(d,\"\",y)}catch(P){if(P instanceof DOMException&&P.name===\"DataCloneError\")throw P;l.location.assign(y)}i&&s&&s({action:u,location:w.location,delta:1})}function v(x,f){u=ut.Replace;let c=po(w.location,x,f);n&&n(c,x),a=h();let d=Ds(c,a),y=w.createHref(c);o.replaceState(d,\"\",y),i&&s&&s({action:u,location:w.location,delta:0})}function g(x){let f=l.location.origin!==\"null\"?l.location.origin:l.location.href,c=typeof x==\"string\"?x:wl(x);return c=c.replace(/ $/,\"%20\"),G(f,\"No window.location.(origin|href) available to create URL for href: \"+c),new URL(c,f)}let w={get action(){return u},get location(){return e(l,o)},listen(x){if(s)throw new Error(\"A history only accepts one active listener\");return l.addEventListener(Ms,p),s=x,()=>{l.removeEventListener(Ms,p),s=null}},createHref(x){return t(l,x)},createURL:g,encodeLocation(x){let f=g(x);return{pathname:f.pathname,search:f.search,hash:f.hash}},push:m,replace:v,go(x){return o.go(x)}};return w}var Is;(function(e){e.data=\"data\",e.deferred=\"deferred\",e.redirect=\"redirect\",e.error=\"error\"})(Is||(Is={}));function Ch(e,t,n){return n===void 0&&(n=\"/\"),Eh(e,t,n,!1)}function Eh(e,t,n,r){let l=typeof t==\"string\"?wn(t):t,i=mu(l.pathname||\"/\",n);if(i==null)return null;let o=ff(e);Ph(o);let u=null;for(let s=0;u==null&&s<o.length;++s){let a=Dh(i);u=Fh(o[s],a,r)}return u}function ff(e,t,n,r){t===void 0&&(t=[]),n===void 0&&(n=[]),r===void 0&&(r=\"\");let l=(i,o,u)=>{let s={relativePath:u===void 0?i.path||\"\":u,caseSensitive:i.caseSensitive===!0,childrenIndex:o,route:i};s.relativePath.startsWith(\"/\")&&(G(s.relativePath.startsWith(r),'Absolute route path \"'+s.relativePath+'\" nested under path '+('\"'+r+'\" is not valid. An absolute child route path ')+\"must start with the combined path of all its parent routes.\"),s.relativePath=s.relativePath.slice(r.length));let a=vt([r,s.relativePath]),h=n.concat(s);i.children&&i.children.length>0&&(G(i.index!==!0,\"Index routes must not have child routes. Please remove \"+('all child routes from route path \"'+a+'\".')),ff(i.children,t,h,a)),!(i.path==null&&!i.index)&&t.push({path:a,score:Th(a,i.index),routesMeta:h})};return e.forEach((i,o)=>{var u;if(i.path===\"\"||!((u=i.path)!=null&&u.includes(\"?\")))l(i,o);else for(let s of df(i.path))l(i,o,s)}),t}function df(e){let t=e.split(\"/\");if(t.length===0)return[];let[n,...r]=t,l=n.endsWith(\"?\"),i=n.replace(/\\?$/,\"\");if(r.length===0)return l?[i,\"\"]:[i];let o=df(r.join(\"/\")),u=[];return u.push(...o.map(s=>s===\"\"?i:[i,s].join(\"/\"))),l&&u.push(...o),u.map(s=>e.startsWith(\"/\")&&s===\"\"?\"/\":s)}function Ph(e){e.sort((t,n)=>t.score!==n.score?n.score-t.score:zh(t.routesMeta.map(r=>r.childrenIndex),n.routesMeta.map(r=>r.childrenIndex)))}const Nh=/^:[\\w-]+$/,_h=3,Oh=2,Rh=1,jh=10,Lh=-2,Us=e=>e===\"*\";function Th(e,t){let n=e.split(\"/\"),r=n.length;return n.some(Us)&&(r+=Lh),t&&(r+=Oh),n.filter(l=>!Us(l)).reduce((l,i)=>l+(Nh.test(i)?_h:i===\"\"?Rh:jh),r)}function zh(e,t){return e.length===t.length&&e.slice(0,-1).every((r,l)=>r===t[l])?e[e.length-1]-t[t.length-1]:0}function Fh(e,t,n){n===void 0&&(n=!1);let{routesMeta:r}=e,l={},i=\"/\",o=[];for(let u=0;u<r.length;++u){let s=r[u],a=u===r.length-1,h=i===\"/\"?t:t.slice(i.length)||\"/\",p=As({path:s.relativePath,caseSensitive:s.caseSensitive,end:a},h),m=s.route;if(!p&&a&&n&&!r[r.length-1].route.index&&(p=As({path:s.relativePath,caseSensitive:s.caseSensitive,end:!1},h)),!p)return null;Object.assign(l,p.params),o.push({params:l,pathname:vt([i,p.pathname]),pathnameBase:$h(vt([i,p.pathnameBase])),route:m}),p.pathnameBase!==\"/\"&&(i=vt([i,p.pathnameBase]))}return o}function As(e,t){typeof e==\"string\"&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=Mh(e.path,e.caseSensitive,e.end),l=t.match(n);if(!l)return null;let i=l[0],o=i.replace(/(.)\\/+$/,\"$1\"),u=l.slice(1);return{params:r.reduce((a,h,p)=>{let{paramName:m,isOptional:v}=h;if(m===\"*\"){let w=u[p]||\"\";o=i.slice(0,i.length-w.length).replace(/(.)\\/+$/,\"$1\")}const g=u[p];return v&&!g?a[m]=void 0:a[m]=(g||\"\").replace(/%2F/g,\"/\"),a},{}),pathname:i,pathnameBase:o,pattern:e}}function Mh(e,t,n){t===void 0&&(t=!1),n===void 0&&(n=!0),cf(e===\"*\"||!e.endsWith(\"*\")||e.endsWith(\"/*\"),'Route path \"'+e+'\" will be treated as if it were '+('\"'+e.replace(/\\*$/,\"/*\")+'\" because the `*` character must ')+\"always follow a `/` in the pattern. To get rid of this warning, \"+('please change the route path to \"'+e.replace(/\\*$/,\"/*\")+'\".'));let r=[],l=\"^\"+e.replace(/\\/*\\*?$/,\"\").replace(/^\\/*/,\"/\").replace(/[\\\\.*+^${}|()[\\]]/g,\"\\\\$&\").replace(/\\/:([\\w-]+)(\\?)?/g,(o,u,s)=>(r.push({paramName:u,isOptional:s!=null}),s?\"/?([^\\\\/]+)?\":\"/([^\\\\/]+)\"));return e.endsWith(\"*\")?(r.push({paramName:\"*\"}),l+=e===\"*\"||e===\"/*\"?\"(.*)$\":\"(?:\\\\/(.+)|\\\\/*)$\"):n?l+=\"\\\\/*$\":e!==\"\"&&e!==\"/\"&&(l+=\"(?:(?=\\\\/|$))\"),[new RegExp(l,t?void 0:\"i\"),r]}function Dh(e){try{return e.split(\"/\").map(t=>decodeURIComponent(t).replace(/\\//g,\"%2F\")).join(\"/\")}catch(t){return cf(!1,'The URL path \"'+e+'\" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent '+(\"encoding (\"+t+\").\")),e}}function mu(e,t){if(t===\"/\")return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith(\"/\")?t.length-1:t.length,r=e.charAt(n);return r&&r!==\"/\"?null:e.slice(n)||\"/\"}function Ih(e,t){t===void 0&&(t=\"/\");let{pathname:n,search:r=\"\",hash:l=\"\"}=typeof e==\"string\"?wn(e):e;return{pathname:n?n.startsWith(\"/\")?n:Uh(n,t):t,search:Bh(r),hash:Qh(l)}}function Uh(e,t){let n=t.replace(/\\/+$/,\"\").split(\"/\");return e.split(\"/\").forEach(l=>{l===\"..\"?n.length>1&&n.pop():l!==\".\"&&n.push(l)}),n.length>1?n.join(\"/\"):\"/\"}function vi(e,t,n,r){return\"Cannot include a '\"+e+\"' character in a manually specified \"+(\"`to.\"+t+\"` field [\"+JSON.stringify(r)+\"].  Please separate it out to the \")+(\"`to.\"+n+\"` field. Alternatively you may provide the full path as \")+'a string in <Link to=\"...\"> and the router will parse it for you.'}function Ah(e){return e.filter((t,n)=>n===0||t.route.path&&t.route.path.length>0)}function pf(e,t){let n=Ah(e);return t?n.map((r,l)=>l===n.length-1?r.pathname:r.pathnameBase):n.map(r=>r.pathnameBase)}function hf(e,t,n,r){r===void 0&&(r=!1);let l;typeof e==\"string\"?l=wn(e):(l=ir({},e),G(!l.pathname||!l.pathname.includes(\"?\"),vi(\"?\",\"pathname\",\"search\",l)),G(!l.pathname||!l.pathname.includes(\"#\"),vi(\"#\",\"pathname\",\"hash\",l)),G(!l.search||!l.search.includes(\"#\"),vi(\"#\",\"search\",\"hash\",l)));let i=e===\"\"||l.pathname===\"\",o=i?\"/\":l.pathname,u;if(o==null)u=n;else{let p=t.length-1;if(!r&&o.startsWith(\"..\")){let m=o.split(\"/\");for(;m[0]===\"..\";)m.shift(),p-=1;l.pathname=m.join(\"/\")}u=p>=0?t[p]:\"/\"}let s=Ih(l,u),a=o&&o!==\"/\"&&o.endsWith(\"/\"),h=(i||o===\".\")&&n.endsWith(\"/\");return!s.pathname.endsWith(\"/\")&&(a||h)&&(s.pathname+=\"/\"),s}const vt=e=>e.join(\"/\").replace(/\\/\\/+/g,\"/\"),$h=e=>e.replace(/\\/+$/,\"\").replace(/^\\/*/,\"/\"),Bh=e=>!e||e===\"?\"?\"\":e.startsWith(\"?\")?e:\"?\"+e,Qh=e=>!e||e===\"#\"?\"\":e.startsWith(\"#\")?e:\"#\"+e;function Vh(e){return e!=null&&typeof e.status==\"number\"&&typeof e.statusText==\"string\"&&typeof e.internal==\"boolean\"&&\"data\"in e}const mf=[\"post\",\"put\",\"patch\",\"delete\"];new Set(mf);const Hh=[\"get\",...mf];new Set(Hh);/**\n * React Router v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */function or(){return or=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},or.apply(this,arguments)}const vu=_.createContext(null),Wh=_.createContext(null),$t=_.createContext(null),Al=_.createContext(null),Bt=_.createContext({outlet:null,matches:[],isDataRoute:!1}),vf=_.createContext(null);function Kh(e,t){let{relative:n}=t===void 0?{}:t;dr()||G(!1);let{basename:r,navigator:l}=_.useContext($t),{hash:i,pathname:o,search:u}=gf(e,{relative:n}),s=o;return r!==\"/\"&&(s=o===\"/\"?r:vt([r,o])),l.createHref({pathname:s,search:u,hash:i})}function dr(){return _.useContext(Al)!=null}function pr(){return dr()||G(!1),_.useContext(Al).location}function yf(e){_.useContext($t).static||_.useLayoutEffect(e)}function qh(){let{isDataRoute:e}=_.useContext(Bt);return e?om():Gh()}function Gh(){dr()||G(!1);let e=_.useContext(vu),{basename:t,future:n,navigator:r}=_.useContext($t),{matches:l}=_.useContext(Bt),{pathname:i}=pr(),o=JSON.stringify(pf(l,n.v7_relativeSplatPath)),u=_.useRef(!1);return yf(()=>{u.current=!0}),_.useCallback(function(a,h){if(h===void 0&&(h={}),!u.current)return;if(typeof a==\"number\"){r.go(a);return}let p=hf(a,JSON.parse(o),i,h.relative===\"path\");e==null&&t!==\"/\"&&(p.pathname=p.pathname===\"/\"?t:vt([t,p.pathname])),(h.replace?r.replace:r.push)(p,h.state,h)},[t,r,o,i,e])}function gf(e,t){let{relative:n}=t===void 0?{}:t,{future:r}=_.useContext($t),{matches:l}=_.useContext(Bt),{pathname:i}=pr(),o=JSON.stringify(pf(l,r.v7_relativeSplatPath));return _.useMemo(()=>hf(e,JSON.parse(o),i,n===\"path\"),[e,o,i,n])}function Yh(e,t){return Xh(e,t)}function Xh(e,t,n,r){dr()||G(!1);let{navigator:l}=_.useContext($t),{matches:i}=_.useContext(Bt),o=i[i.length-1],u=o?o.params:{};o&&o.pathname;let s=o?o.pathnameBase:\"/\";o&&o.route;let a=pr(),h;if(t){var p;let x=typeof t==\"string\"?wn(t):t;s===\"/\"||(p=x.pathname)!=null&&p.startsWith(s)||G(!1),h=x}else h=a;let m=h.pathname||\"/\",v=m;if(s!==\"/\"){let x=s.replace(/^\\//,\"\").split(\"/\");v=\"/\"+m.replace(/^\\//,\"\").split(\"/\").slice(x.length).join(\"/\")}let g=Ch(e,{pathname:v}),w=tm(g&&g.map(x=>Object.assign({},x,{params:Object.assign({},u,x.params),pathname:vt([s,l.encodeLocation?l.encodeLocation(x.pathname).pathname:x.pathname]),pathnameBase:x.pathnameBase===\"/\"?s:vt([s,l.encodeLocation?l.encodeLocation(x.pathnameBase).pathname:x.pathnameBase])})),i,n,r);return t&&w?_.createElement(Al.Provider,{value:{location:or({pathname:\"/\",search:\"\",hash:\"\",state:null,key:\"default\"},h),navigationType:ut.Pop}},w):w}function Zh(){let e=im(),t=Vh(e)?e.status+\" \"+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,l={padding:\"0.5rem\",backgroundColor:\"rgba(200,200,200, 0.5)\"},i=null;return _.createElement(_.Fragment,null,_.createElement(\"h2\",null,\"Unexpected Application Error!\"),_.createElement(\"h3\",{style:{fontStyle:\"italic\"}},t),n?_.createElement(\"pre\",{style:l},n):null,i)}const Jh=_.createElement(Zh,null);class bh extends _.Component{constructor(t){super(t),this.state={location:t.location,revalidation:t.revalidation,error:t.error}}static getDerivedStateFromError(t){return{error:t}}static getDerivedStateFromProps(t,n){return n.location!==t.location||n.revalidation!==\"idle\"&&t.revalidation===\"idle\"?{error:t.error,location:t.location,revalidation:t.revalidation}:{error:t.error!==void 0?t.error:n.error,location:n.location,revalidation:t.revalidation||n.revalidation}}componentDidCatch(t,n){console.error(\"React Router caught the following error during render\",t,n)}render(){return this.state.error!==void 0?_.createElement(Bt.Provider,{value:this.props.routeContext},_.createElement(vf.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function em(e){let{routeContext:t,match:n,children:r}=e,l=_.useContext(vu);return l&&l.static&&l.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(l.staticContext._deepestRenderedBoundaryId=n.route.id),_.createElement(Bt.Provider,{value:t},r)}function tm(e,t,n,r){var l;if(t===void 0&&(t=[]),n===void 0&&(n=null),r===void 0&&(r=null),e==null){var i;if(!n)return null;if(n.errors)e=n.matches;else if((i=r)!=null&&i.v7_partialHydration&&t.length===0&&!n.initialized&&n.matches.length>0)e=n.matches;else return null}let o=e,u=(l=n)==null?void 0:l.errors;if(u!=null){let h=o.findIndex(p=>p.route.id&&(u==null?void 0:u[p.route.id])!==void 0);h>=0||G(!1),o=o.slice(0,Math.min(o.length,h+1))}let s=!1,a=-1;if(n&&r&&r.v7_partialHydration)for(let h=0;h<o.length;h++){let p=o[h];if((p.route.HydrateFallback||p.route.hydrateFallbackElement)&&(a=h),p.route.id){let{loaderData:m,errors:v}=n,g=p.route.loader&&m[p.route.id]===void 0&&(!v||v[p.route.id]===void 0);if(p.route.lazy||g){s=!0,a>=0?o=o.slice(0,a+1):o=[o[0]];break}}}return o.reduceRight((h,p,m)=>{let v,g=!1,w=null,x=null;n&&(v=u&&p.route.id?u[p.route.id]:void 0,w=p.route.errorElement||Jh,s&&(a<0&&m===0?(um(\"route-fallback\",!1),g=!0,x=null):a===m&&(g=!0,x=p.route.hydrateFallbackElement||null)));let f=t.concat(o.slice(0,m+1)),c=()=>{let d;return v?d=w:g?d=x:p.route.Component?d=_.createElement(p.route.Component,null):p.route.element?d=p.route.element:d=h,_.createElement(em,{match:p,routeContext:{outlet:h,matches:f,isDataRoute:n!=null},children:d})};return n&&(p.route.ErrorBoundary||p.route.errorElement||m===0)?_.createElement(bh,{location:n.location,revalidation:n.revalidation,component:w,error:v,children:c(),routeContext:{outlet:null,matches:f,isDataRoute:!0}}):c()},null)}var wf=function(e){return e.UseBlocker=\"useBlocker\",e.UseRevalidator=\"useRevalidator\",e.UseNavigateStable=\"useNavigate\",e}(wf||{}),xl=function(e){return e.UseBlocker=\"useBlocker\",e.UseLoaderData=\"useLoaderData\",e.UseActionData=\"useActionData\",e.UseRouteError=\"useRouteError\",e.UseNavigation=\"useNavigation\",e.UseRouteLoaderData=\"useRouteLoaderData\",e.UseMatches=\"useMatches\",e.UseRevalidator=\"useRevalidator\",e.UseNavigateStable=\"useNavigate\",e.UseRouteId=\"useRouteId\",e}(xl||{});function nm(e){let t=_.useContext(vu);return t||G(!1),t}function rm(e){let t=_.useContext(Wh);return t||G(!1),t}function lm(e){let t=_.useContext(Bt);return t||G(!1),t}function xf(e){let t=lm(),n=t.matches[t.matches.length-1];return n.route.id||G(!1),n.route.id}function im(){var e;let t=_.useContext(vf),n=rm(xl.UseRouteError),r=xf(xl.UseRouteError);return t!==void 0?t:(e=n.errors)==null?void 0:e[r]}function om(){let{router:e}=nm(wf.UseNavigateStable),t=xf(xl.UseNavigateStable),n=_.useRef(!1);return yf(()=>{n.current=!0}),_.useCallback(function(l,i){i===void 0&&(i={}),n.current&&(typeof l==\"number\"?e.navigate(l):e.navigate(l,or({fromRouteId:t},i)))},[e,t])}const $s={};function um(e,t,n){!t&&!$s[e]&&($s[e]=!0)}function sm(e,t){e==null||e.v7_startTransition,(e==null?void 0:e.v7_relativeSplatPath)===void 0&&(!t||t.v7_relativeSplatPath),t&&(t.v7_fetcherPersist,t.v7_normalizeFormMethod,t.v7_partialHydration,t.v7_skipActionErrorRevalidation)}function Tn(e){G(!1)}function am(e){let{basename:t=\"/\",children:n=null,location:r,navigationType:l=ut.Pop,navigator:i,static:o=!1,future:u}=e;dr()&&G(!1);let s=t.replace(/^\\/*/,\"/\"),a=_.useMemo(()=>({basename:s,navigator:i,static:o,future:or({v7_relativeSplatPath:!1},u)}),[s,u,i,o]);typeof r==\"string\"&&(r=wn(r));let{pathname:h=\"/\",search:p=\"\",hash:m=\"\",state:v=null,key:g=\"default\"}=r,w=_.useMemo(()=>{let x=mu(h,s);return x==null?null:{location:{pathname:x,search:p,hash:m,state:v,key:g},navigationType:l}},[s,h,p,m,v,g,l]);return w==null?null:_.createElement($t.Provider,{value:a},_.createElement(Al.Provider,{children:n,value:w}))}function cm(e){let{children:t,location:n}=e;return Yh(ho(t),n)}new Promise(()=>{});function ho(e,t){t===void 0&&(t=[]);let n=[];return _.Children.forEach(e,(r,l)=>{if(!_.isValidElement(r))return;let i=[...t,l];if(r.type===_.Fragment){n.push.apply(n,ho(r.props.children,i));return}r.type!==Tn&&G(!1),!r.props.index||!r.props.children||G(!1);let o={id:r.props.id||i.join(\"-\"),caseSensitive:r.props.caseSensitive,element:r.props.element,Component:r.props.Component,index:r.props.index,path:r.props.path,loader:r.props.loader,action:r.props.action,errorElement:r.props.errorElement,ErrorBoundary:r.props.ErrorBoundary,hasErrorBoundary:r.props.ErrorBoundary!=null||r.props.errorElement!=null,shouldRevalidate:r.props.shouldRevalidate,handle:r.props.handle,lazy:r.props.lazy};r.props.children&&(o.children=ho(r.props.children,i)),n.push(o)}),n}/**\n * React Router DOM v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */function mo(){return mo=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},mo.apply(this,arguments)}function fm(e,t){if(e==null)return{};var n={},r=Object.keys(e),l,i;for(i=0;i<r.length;i++)l=r[i],!(t.indexOf(l)>=0)&&(n[l]=e[l]);return n}function dm(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}function pm(e,t){return e.button===0&&(!t||t===\"_self\")&&!dm(e)}const hm=[\"onClick\",\"relative\",\"reloadDocument\",\"replace\",\"state\",\"target\",\"to\",\"preventScrollReset\",\"viewTransition\"],mm=\"6\";try{window.__reactRouterVersion=mm}catch{}const vm=\"startTransition\",Bs=Bf[vm];function ym(e){let{basename:t,children:n,future:r,window:l}=e,i=_.useRef();i.current==null&&(i.current=xh({window:l,v5Compat:!0}));let o=i.current,[u,s]=_.useState({action:o.action,location:o.location}),{v7_startTransition:a}=r||{},h=_.useCallback(p=>{a&&Bs?Bs(()=>s(p)):s(p)},[s,a]);return _.useLayoutEffect(()=>o.listen(h),[o,h]),_.useEffect(()=>sm(r),[r]),_.createElement(am,{basename:t,children:n,location:u.location,navigationType:u.action,navigator:o,future:r})}const gm=typeof window<\"u\"&&typeof window.document<\"u\"&&typeof window.document.createElement<\"u\",wm=/^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i,xm=_.forwardRef(function(t,n){let{onClick:r,relative:l,reloadDocument:i,replace:o,state:u,target:s,to:a,preventScrollReset:h,viewTransition:p}=t,m=fm(t,hm),{basename:v}=_.useContext($t),g,w=!1;if(typeof a==\"string\"&&wm.test(a)&&(g=a,gm))try{let d=new URL(window.location.href),y=a.startsWith(\"//\")?new URL(d.protocol+a):new URL(a),P=mu(y.pathname,v);y.origin===d.origin&&P!=null?a=P+y.search+y.hash:w=!0}catch{}let x=Kh(a,{relative:l}),f=Sm(a,{replace:o,state:u,target:s,preventScrollReset:h,relative:l,viewTransition:p});function c(d){r&&r(d),d.defaultPrevented||f(d)}return _.createElement(\"a\",mo({},m,{href:g||x,onClick:w||i?r:c,ref:n,target:s}))});var Qs;(function(e){e.UseScrollRestoration=\"useScrollRestoration\",e.UseSubmit=\"useSubmit\",e.UseSubmitFetcher=\"useSubmitFetcher\",e.UseFetcher=\"useFetcher\",e.useViewTransitionState=\"useViewTransitionState\"})(Qs||(Qs={}));var Vs;(function(e){e.UseFetcher=\"useFetcher\",e.UseFetchers=\"useFetchers\",e.UseScrollRestoration=\"useScrollRestoration\"})(Vs||(Vs={}));function Sm(e,t){let{target:n,replace:r,state:l,preventScrollReset:i,relative:o,viewTransition:u}=t===void 0?{}:t,s=qh(),a=pr(),h=gf(e,{relative:o});return _.useCallback(p=>{if(pm(p,n)){p.preventDefault();let m=r!==void 0?r:wl(a)===wl(h);s(e,{replace:m,state:l,preventScrollReset:i,relative:o,viewTransition:u})}},[a,s,h,r,l,n,e,i,o,u])}var km={xmlns:\"http://www.w3.org/2000/svg\",width:24,height:24,viewBox:\"0 0 24 24\",fill:\"none\",stroke:\"currentColor\",strokeWidth:2,strokeLinecap:\"round\",strokeLinejoin:\"round\"};const Cm=e=>e.replace(/([a-z0-9])([A-Z])/g,\"$1-$2\").toLowerCase(),Em=(e,t)=>{const n=_.forwardRef(({color:r=\"currentColor\",size:l=24,strokeWidth:i=2,absoluteStrokeWidth:o,children:u,...s},a)=>_.createElement(\"svg\",{ref:a,...km,width:l,height:l,stroke:r,strokeWidth:o?Number(i)*24/Number(l):i,className:`lucide lucide-${Cm(e)}`,...s},[...t.map(([h,p])=>_.createElement(h,p)),...(Array.isArray(u)?u:[u])||[]]));return n.displayName=`${e}`,n};var hr=Em;const Sf=hr(\"FileText\",[[\"path\",{d:\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\",key:\"1nnpy2\"}],[\"polyline\",{points:\"14 2 14 8 20 8\",key:\"1ew0cm\"}],[\"line\",{x1:\"16\",x2:\"8\",y1:\"13\",y2:\"13\",key:\"14keom\"}],[\"line\",{x1:\"16\",x2:\"8\",y1:\"17\",y2:\"17\",key:\"17nazh\"}],[\"line\",{x1:\"10\",x2:\"8\",y1:\"9\",y2:\"9\",key:\"1a5vjj\"}]]),kf=hr(\"Globe\",[[\"circle\",{cx:\"12\",cy:\"12\",r:\"10\",key:\"1mglay\"}],[\"line\",{x1:\"2\",x2:\"22\",y1:\"12\",y2:\"12\",key:\"1dnqot\"}],[\"path\",{d:\"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z\",key:\"nb9nel\"}]]),Pm=hr(\"Home\",[[\"path\",{d:\"m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\",key:\"y5dka4\"}],[\"polyline\",{points:\"9 22 9 12 15 12 15 22\",key:\"e2us08\"}]]),Nm=hr(\"TrendingUp\",[[\"polyline\",{points:\"22 7 13.5 15.5 8.5 10.5 2 17\",key:\"126l90\"}],[\"polyline\",{points:\"16 7 22 7 22 13\",key:\"kwv8wd\"}]]),vo=hr(\"Users\",[[\"path\",{d:\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\",key:\"1yyitq\"}],[\"circle\",{cx:\"9\",cy:\"7\",r:\"4\",key:\"nufk8\"}],[\"path\",{d:\"M22 21v-2a4 4 0 0 0-3-3.87\",key:\"kshegd\"}],[\"path\",{d:\"M16 3.13a4 4 0 0 1 0 7.75\",key:\"1da9ce\"}]]);function _m(){const e=[{title:\"Expert Personas\",value:\"0\",icon:vo,color:\"bg-blue-500\",description:\"Active real estate experts\"},{title:\"Platform Accounts\",value:\"0\",icon:kf,color:\"bg-green-500\",description:\"Connected social accounts\"},{title:\"Content Published\",value:\"0\",icon:Sf,color:\"bg-purple-500\",description:\"Authority content pieces\"},{title:\"Monthly Consultations\",value:\"0\",icon:Nm,color:\"bg-authority-gold\",description:\"Consultation requests\"}];return k.jsxs(\"div\",{className:\"space-y-8\",children:[k.jsxs(\"div\",{className:\"text-center\",children:[k.jsx(\"h1\",{className:\"text-3xl font-bold text-gray-900 mb-2\",children:\"Philippines Real Estate Expert Authority Dashboard\"}),k.jsx(\"p\",{className:\"text-lg text-gray-600\",children:\"AI Citation-Optimized Expert Authority Lead Generation System\"})]}),k.jsx(\"div\",{className:\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\",children:e.map(t=>{const n=t.icon;return k.jsxs(\"div\",{className:\"card p-6\",children:[k.jsxs(\"div\",{className:\"flex items-center\",children:[k.jsx(\"div\",{className:`${t.color} p-3 rounded-full`,children:k.jsx(n,{className:\"w-6 h-6 text-white\"})}),k.jsxs(\"div\",{className:\"ml-4\",children:[k.jsx(\"p\",{className:\"text-sm font-medium text-gray-600\",children:t.title}),k.jsx(\"p\",{className:\"text-2xl font-bold text-gray-900\",children:t.value})]})]}),k.jsx(\"p\",{className:\"mt-2 text-sm text-gray-500\",children:t.description})]},t.title)})}),k.jsxs(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-2 gap-8\",children:[k.jsxs(\"div\",{className:\"card p-6\",children:[k.jsx(\"h3\",{className:\"text-lg font-semibold text-gray-900 mb-4\",children:\"GEO Platform Strategy\"}),k.jsxs(\"div\",{className:\"space-y-4\",children:[k.jsxs(\"div\",{className:\"flex items-center justify-between p-3 bg-gray-50 rounded\",children:[k.jsxs(\"div\",{children:[k.jsx(\"span\",{className:\"font-medium text-gray-900\",children:\"Medium\"}),k.jsx(\"span\",{className:\"ml-2 text-sm text-gray-600\",children:\"Phase 1 - Priority\"})]}),k.jsx(\"span\",{className:\"px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded\",children:\"Ready to Setup\"})]}),k.jsxs(\"div\",{className:\"flex items-center justify-between p-3 bg-gray-50 rounded\",children:[k.jsxs(\"div\",{children:[k.jsx(\"span\",{className:\"font-medium text-gray-900\",children:\"Reddit\"}),k.jsx(\"span\",{className:\"ml-2 text-sm text-gray-600\",children:\"Phase 2 - High Priority\"})]}),k.jsx(\"span\",{className:\"px-2 py-1 bg-gray-100 text-gray-800 text-xs font-medium rounded\",children:\"Pending\"})]}),k.jsxs(\"div\",{className:\"flex items-center justify-between p-3 bg-gray-50 rounded\",children:[k.jsxs(\"div\",{children:[k.jsx(\"span\",{className:\"font-medium text-gray-900\",children:\"Quora\"}),k.jsx(\"span\",{className:\"ml-2 text-sm text-gray-600\",children:\"Phase 3 - High Priority\"})]}),k.jsx(\"span\",{className:\"px-2 py-1 bg-gray-100 text-gray-800 text-xs font-medium rounded\",children:\"Pending\"})]})]})]}),k.jsxs(\"div\",{className:\"card p-6\",children:[k.jsx(\"h3\",{className:\"text-lg font-semibold text-gray-900 mb-4\",children:\"Expert Authority Status\"}),k.jsx(\"div\",{className:\"space-y-4\",children:k.jsxs(\"div\",{className:\"text-center py-8\",children:[k.jsx(\"div\",{className:\"text-gray-400 mb-2\",children:k.jsx(vo,{className:\"w-12 h-12 mx-auto\"})}),k.jsx(\"h4\",{className:\"text-lg font-medium text-gray-900 mb-2\",children:\"No Expert Personas Yet\"}),k.jsx(\"p\",{className:\"text-gray-600 mb-4\",children:\"Create your first Philippines real estate expert to start building authority\"}),k.jsx(\"button\",{className:\"btn-primary\",children:\"Create Expert Persona\"})]})})]})]})]})}function Om(){return k.jsxs(\"div\",{className:\"space-y-6\",children:[k.jsxs(\"div\",{children:[k.jsx(\"h1\",{className:\"text-2xl font-bold text-gray-900\",children:\"Expert Personas\"}),k.jsx(\"p\",{className:\"text-gray-600\",children:\"Manage your Philippines real estate expert personas\"})]}),k.jsxs(\"div\",{className:\"card p-6 text-center\",children:[k.jsx(\"h3\",{className:\"text-lg font-semibold text-gray-900 mb-2\",children:\"No Expert Personas\"}),k.jsx(\"p\",{className:\"text-gray-600 mb-4\",children:\"Create your first expert persona to begin building authority\"}),k.jsx(\"button\",{className:\"btn-primary\",children:\"Create Expert Persona\"})]})]})}function Rm(){return k.jsxs(\"div\",{className:\"space-y-6\",children:[k.jsxs(\"div\",{children:[k.jsx(\"h1\",{className:\"text-2xl font-bold text-gray-900\",children:\"Platform Accounts\"}),k.jsx(\"p\",{className:\"text-gray-600\",children:\"Manage GEO platform accounts for expert authority building\"})]}),k.jsxs(\"div\",{className:\"card p-6 text-center\",children:[k.jsx(\"h3\",{className:\"text-lg font-semibold text-gray-900 mb-2\",children:\"No Platform Accounts\"}),k.jsx(\"p\",{className:\"text-gray-600 mb-4\",children:\"Connect platform accounts to start building expert presence\"}),k.jsx(\"button\",{className:\"btn-primary\",children:\"Connect Platform Account\"})]})]})}function jm(){return k.jsxs(\"div\",{className:\"space-y-6\",children:[k.jsxs(\"div\",{children:[k.jsx(\"h1\",{className:\"text-2xl font-bold text-gray-900\",children:\"Authority Content\"}),k.jsx(\"p\",{className:\"text-gray-600\",children:\"Manage AI citation-optimized expert content\"})]}),k.jsxs(\"div\",{className:\"card p-6 text-center\",children:[k.jsx(\"h3\",{className:\"text-lg font-semibold text-gray-900 mb-2\",children:\"No Authority Content\"}),k.jsx(\"p\",{className:\"text-gray-600 mb-4\",children:\"Create expert content to build authority and generate AI citations\"}),k.jsx(\"button\",{className:\"btn-primary\",children:\"Create Content\"})]})]})}function Lm(){const e=pr(),t=[{path:\"/\",label:\"Dashboard\",icon:Pm},{path:\"/expert-personas\",label:\"Expert Personas\",icon:vo},{path:\"/platform-accounts\",label:\"Platform Accounts\",icon:kf},{path:\"/authority-content\",label:\"Content\",icon:Sf}];return k.jsx(\"nav\",{className:\"bg-white border-b border-gray-200\",children:k.jsx(\"div\",{className:\"container mx-auto px-4\",children:k.jsxs(\"div\",{className:\"flex items-center justify-between h-16\",children:[k.jsxs(\"div\",{className:\"flex items-center space-x-8\",children:[k.jsx(\"div\",{className:\"font-bold text-xl text-philippines-blue\",children:\"GEO Expert Authority\"}),k.jsx(\"div\",{className:\"flex space-x-4\",children:t.map(n=>{const r=n.icon,l=e.pathname===n.path;return k.jsxs(xm,{to:n.path,className:`flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium transition-colors ${l?\"bg-philippines-blue text-white\":\"text-gray-700 hover:bg-gray-100\"}`,children:[k.jsx(r,{size:16}),k.jsx(\"span\",{children:n.label})]},n.path)})})]}),k.jsx(\"div\",{className:\"flex items-center space-x-4\",children:k.jsx(\"span\",{className:\"text-sm text-gray-600\",children:\"Philippines Real Estate Expert System\"})})]})})})}function Tm(){return k.jsx(ym,{children:k.jsxs(\"div\",{className:\"min-h-screen bg-gray-50\",children:[k.jsx(Lm,{}),k.jsx(\"main\",{className:\"container mx-auto px-4 py-8\",children:k.jsxs(cm,{children:[k.jsx(Tn,{path:\"/\",element:k.jsx(_m,{})}),k.jsx(Tn,{path:\"/expert-personas\",element:k.jsx(Om,{})}),k.jsx(Tn,{path:\"/platform-accounts\",element:k.jsx(Rm,{})}),k.jsx(Tn,{path:\"/authority-content\",element:k.jsx(jm,{})})]})})]})})}const zm=new vh({defaultOptions:{queries:{staleTime:1e3*60*5,refetchOnWindowFocus:!1}}});yi.createRoot(document.getElementById(\"root\")).render(k.jsx(ea.StrictMode,{children:k.jsx(wh,{client:zm,children:k.jsx(Tm,{})})}));\n","size_bytes":198017},"dist/server/db/index.d.ts":{"content":"import * as schema from '../../shared/schema';\nexport declare const db: import(\"drizzle-orm/node-postgres\").NodePgDatabase<typeof schema>;\nexport * from '../../shared/schema';\n//# sourceMappingURL=index.d.ts.map","size_bytes":211},"dist/server/db/index.js":{"content":"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.db = void 0;\nconst node_postgres_1 = require(\"drizzle-orm/node-postgres\");\nconst pg_1 = require(\"pg\");\nconst schema = __importStar(require(\"../../shared/schema\"));\nconst pool = new pg_1.Pool({\n    connectionString: process.env.DATABASE_URL,\n});\nexports.db = (0, node_postgres_1.drizzle)(pool, { schema });\n__exportStar(require(\"../../shared/schema\"), exports);\n//# sourceMappingURL=index.js.map","size_bytes":2041},"dist/server/index.d.ts":{"content":"declare const app: import(\"express-serve-static-core\").Express;\nexport default app;\n//# sourceMappingURL=index.d.ts.map","size_bytes":119},"dist/server/index.js":{"content":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst express_1 = __importDefault(require(\"express\"));\nconst cors_1 = __importDefault(require(\"cors\"));\nconst helmet_1 = __importDefault(require(\"helmet\"));\nconst dotenv_1 = require(\"dotenv\");\nconst path_1 = __importDefault(require(\"path\"));\nconst expertPersonas_1 = require(\"./routes/expertPersonas\");\nconst geoPlatformAccounts_1 = require(\"./routes/geoPlatformAccounts\");\nconst authorityContent_1 = require(\"./routes/authorityContent\");\nconst errorHandler_1 = require(\"./middleware/errorHandler\");\nconst logger_1 = require(\"./services/logger\");\nconst db_1 = require(\"./db\");\n(0, dotenv_1.config)();\n// Fail fast if DATABASE_URL is not set\nif (!process.env.DATABASE_URL) {\n    logger_1.logger.error('DATABASE_URL environment variable is required');\n    process.exit(1);\n}\nconst app = (0, express_1.default)();\nconst port = process.env.PORT || (process.env.NODE_ENV === 'production' ? 5000 : 3001);\n// Security and CORS middleware\napp.use((0, helmet_1.default)());\napp.use((0, cors_1.default)({\n    origin: process.env.NODE_ENV === 'production'\n        ? process.env.FRONTEND_URL || 'https://your-domain.com'\n        : ['http://localhost:3000', 'http://0.0.0.0:3000', 'http://127.0.0.1:3000'],\n    credentials: true\n}));\n// Body parsing middleware\napp.use(express_1.default.json());\napp.use(express_1.default.urlencoded({ extended: true }));\n// Request logging\napp.use((req, res, next) => {\n    logger_1.logger.info(`${req.method} ${req.path}`, {\n        ip: req.ip,\n        userAgent: req.get('User-Agent')\n    });\n    next();\n});\n// Health check endpoint with database connectivity check\napp.get('/health', async (req, res) => {\n    try {\n        // Simple database connectivity check using existing table\n        await db_1.db.select().from(db_1.expertPersonas).limit(1);\n        res.json({\n            status: 'ok',\n            timestamp: new Date().toISOString(),\n            service: 'geo-expert-authority-app',\n            database: 'connected'\n        });\n    }\n    catch (error) {\n        logger_1.logger.error('Database health check failed:', error);\n        res.status(503).json({\n            status: 'error',\n            timestamp: new Date().toISOString(),\n            service: 'geo-expert-authority-app',\n            database: 'disconnected',\n            error: 'Database connection failed'\n        });\n    }\n});\n// In production, serve static files from the built client\nif (process.env.NODE_ENV === 'production') {\n    const clientDistPath = path_1.default.join(__dirname, '..', 'client');\n    app.use(express_1.default.static(clientDistPath));\n    // Handle client-side routing - serve index.html for non-API routes\n    app.get('*', (req, res, next) => {\n        if (req.path.startsWith('/api') || req.path.startsWith('/health')) {\n            next();\n        }\n        else {\n            res.sendFile(path_1.default.join(clientDistPath, 'index.html'));\n        }\n    });\n}\n// API routes\napp.use('/api/expert-personas', expertPersonas_1.expertPersonasRouter);\napp.use('/api/geo-platform-accounts', geoPlatformAccounts_1.geoPlatformAccountsRouter);\napp.use('/api/authority-content', authorityContent_1.authorityContentRouter);\n// Error handling\napp.use(errorHandler_1.errorHandler);\n// 404 handler\napp.use('*', (req, res) => {\n    res.status(404).json({\n        error: 'Not Found',\n        message: `Route ${req.originalUrl} not found`,\n        timestamp: new Date().toISOString()\n    });\n});\napp.listen(port, () => {\n    logger_1.logger.info(`🚀 Server running on port ${port}`);\n    logger_1.logger.info(`📊 Health check available at http://localhost:${port}/health`);\n    logger_1.logger.info(`🏗️  API endpoints available at http://localhost:${port}/api`);\n});\nexports.default = app;\n//# sourceMappingURL=index.js.map","size_bytes":3961},"dist/server/middleware/errorHandler.d.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nexport interface CustomError extends Error {\n    statusCode?: number;\n    code?: string;\n}\nexport declare const errorHandler: (err: CustomError, req: Request, res: Response, next: NextFunction) => void;\n//# sourceMappingURL=errorHandler.d.ts.map","size_bytes":304},"dist/server/middleware/errorHandler.js":{"content":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.errorHandler = void 0;\nconst logger_1 = require(\"../services/logger\");\nconst errorHandler = (err, req, res, next) => {\n    logger_1.logger.error('Error occurred:', {\n        error: err.message,\n        stack: err.stack,\n        url: req.url,\n        method: req.method,\n        statusCode: err.statusCode\n    });\n    const statusCode = err.statusCode || 500;\n    const message = err.message || 'Internal Server Error';\n    res.status(statusCode).json({\n        error: true,\n        message,\n        statusCode,\n        timestamp: new Date().toISOString(),\n        path: req.path\n    });\n};\nexports.errorHandler = errorHandler;\n//# sourceMappingURL=errorHandler.js.map","size_bytes":752},"dist/server/routes/authorityContent.d.ts":{"content":"declare const router: import(\"express-serve-static-core\").Router;\nexport { router as authorityContentRouter };\n//# sourceMappingURL=authorityContent.d.ts.map","size_bytes":157},"dist/server/routes/authorityContent.js":{"content":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.authorityContentRouter = void 0;\nconst express_1 = require(\"express\");\nconst db_1 = require(\"../db\");\nconst drizzle_orm_1 = require(\"drizzle-orm\");\nconst logger_1 = require(\"../services/logger\");\nconst zod_1 = require(\"zod\");\nconst router = (0, express_1.Router)();\nexports.authorityContentRouter = router;\n// Validation schema\nconst createContentSchema = zod_1.z.object({\n    personaId: zod_1.z.string().uuid(),\n    platformAccountId: zod_1.z.string().uuid(),\n    contentTitle: zod_1.z.string().min(1),\n    contentType: zod_1.z.enum(['article', 'answer', 'post', 'comment', 'guide']),\n    contentCategory: zod_1.z.string().optional(),\n    contentUrl: zod_1.z.string().url().optional(),\n    contentLength: zod_1.z.number().int().min(0).optional(),\n    publicationStatus: zod_1.z.enum(['draft', 'published', 'scheduled']).default('draft')\n});\n// Get content for a persona\nrouter.get('/persona/:personaId', async (req, res, next) => {\n    try {\n        const { personaId } = req.params;\n        const { status, platform } = req.query;\n        let query = db_1.db.select().from(db_1.authorityContentPublications)\n            .where((0, drizzle_orm_1.eq)(db_1.authorityContentPublications.personaId, personaId));\n        if (status) {\n            query = query.where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(db_1.authorityContentPublications.personaId, personaId), (0, drizzle_orm_1.eq)(db_1.authorityContentPublications.publicationStatus, status)));\n        }\n        const content = await query;\n        logger_1.logger.info(`Retrieved ${content.length} content items for persona: ${personaId}`);\n        res.json({\n            success: true,\n            data: content,\n            count: content.length\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error fetching content for persona ${req.params.personaId}:`, error);\n        next(error);\n    }\n});\n// Get all authority content\nrouter.get('/', async (req, res, next) => {\n    try {\n        const { status, type } = req.query;\n        let query = db_1.db.select().from(db_1.authorityContentPublications);\n        if (status) {\n            query = query.where((0, drizzle_orm_1.eq)(db_1.authorityContentPublications.publicationStatus, status));\n        }\n        const content = await query;\n        logger_1.logger.info(`Retrieved ${content.length} content items`);\n        res.json({\n            success: true,\n            data: content,\n            count: content.length\n        });\n    }\n    catch (error) {\n        logger_1.logger.error('Error fetching authority content:', error);\n        next(error);\n    }\n});\n// Get content by ID\nrouter.get('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const content = await db_1.db.select()\n            .from(db_1.authorityContentPublications)\n            .where((0, drizzle_orm_1.eq)(db_1.authorityContentPublications.id, id))\n            .limit(1);\n        if (content.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Content not found'\n            });\n        }\n        logger_1.logger.info(`Retrieved content: ${id}`);\n        res.json({\n            success: true,\n            data: content[0]\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error fetching content ${req.params.id}:`, error);\n        next(error);\n    }\n});\n// Create new content\nrouter.post('/', async (req, res, next) => {\n    try {\n        const validatedData = createContentSchema.parse(req.body);\n        const result = await db_1.db.insert(db_1.authorityContentPublications)\n            .values(validatedData)\n            .returning();\n        logger_1.logger.info(`Created content: ${result[0].contentTitle} (${result[0].id})`);\n        res.status(201).json({\n            success: true,\n            data: result[0],\n            message: 'Content created successfully'\n        });\n    }\n    catch (error) {\n        if (error instanceof zod_1.z.ZodError) {\n            return res.status(400).json({\n                success: false,\n                message: 'Validation error',\n                errors: error.errors\n            });\n        }\n        logger_1.logger.error('Error creating content:', error);\n        next(error);\n    }\n});\n// Update content\nrouter.put('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const updates = req.body;\n        const result = await db_1.db.update(db_1.authorityContentPublications)\n            .set({ ...updates, updatedAt: new Date() })\n            .where((0, drizzle_orm_1.eq)(db_1.authorityContentPublications.id, id))\n            .returning();\n        if (result.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Content not found'\n            });\n        }\n        logger_1.logger.info(`Updated content: ${id}`);\n        res.json({\n            success: true,\n            data: result[0],\n            message: 'Content updated successfully'\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error updating content ${req.params.id}:`, error);\n        next(error);\n    }\n});\n// Delete content\nrouter.delete('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const result = await db_1.db.delete(db_1.authorityContentPublications)\n            .where((0, drizzle_orm_1.eq)(db_1.authorityContentPublications.id, id))\n            .returning();\n        if (result.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Content not found'\n            });\n        }\n        logger_1.logger.info(`Deleted content: ${id}`);\n        res.json({\n            success: true,\n            message: 'Content deleted successfully'\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error deleting content ${req.params.id}:`, error);\n        next(error);\n    }\n});\n//# sourceMappingURL=authorityContent.js.map","size_bytes":6079},"dist/server/routes/expertPersonas.d.ts":{"content":"declare const router: import(\"express-serve-static-core\").Router;\nexport { router as expertPersonasRouter };\n//# sourceMappingURL=expertPersonas.d.ts.map","size_bytes":153},"dist/server/routes/expertPersonas.js":{"content":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.expertPersonasRouter = void 0;\nconst express_1 = require(\"express\");\nconst db_1 = require(\"../db\");\nconst drizzle_orm_1 = require(\"drizzle-orm\");\nconst logger_1 = require(\"../services/logger\");\nconst zod_1 = require(\"zod\");\nconst router = (0, express_1.Router)();\nexports.expertPersonasRouter = router;\n// Validation schemas\nconst createExpertPersonaSchema = zod_1.z.object({\n    expertName: zod_1.z.string().min(1).max(100),\n    expertiseFocus: zod_1.z.string().min(1).max(50),\n    targetBuyerSegments: zod_1.z.array(zod_1.z.string()),\n    primaryMarketLocation: zod_1.z.string().min(1).max(50),\n    geoContentSpecializations: zod_1.z.array(zod_1.z.string()),\n    authorityBuildingTopics: zod_1.z.array(zod_1.z.string()),\n    citationWorthyExpertise: zod_1.z.array(zod_1.z.string()),\n    platformExpertiseFocus: zod_1.z.object({\n        medium: zod_1.z.object({\n            active: zod_1.z.boolean(),\n            contentTypes: zod_1.z.array(zod_1.z.string())\n        }).optional(),\n        reddit: zod_1.z.object({\n            active: zod_1.z.boolean(),\n            subreddits: zod_1.z.array(zod_1.z.string())\n        }).optional(),\n        quora: zod_1.z.object({\n            active: zod_1.z.boolean(),\n            topics: zod_1.z.array(zod_1.z.string())\n        }).optional()\n    }),\n    contentPublicationSchedule: zod_1.z.object({\n        frequency: zod_1.z.string(),\n        timezone: zod_1.z.string().default('Asia/Manila')\n    }),\n    expertVoiceCharacteristics: zod_1.z.object({\n        tone: zod_1.z.string(),\n        expertise_level: zod_1.z.string(),\n        target_audience: zod_1.z.string()\n    }),\n    browserFingerprintConfig: zod_1.z.object({\n        userAgent: zod_1.z.string().optional(),\n        viewport: zod_1.z.object({\n            width: zod_1.z.number(),\n            height: zod_1.z.number()\n        }).optional()\n    })\n});\n// Get all expert personas\nrouter.get('/', async (req, res, next) => {\n    try {\n        const personas = await db_1.db.select().from(db_1.expertPersonas);\n        logger_1.logger.info(`Retrieved ${personas.length} expert personas`);\n        res.json({\n            success: true,\n            data: personas,\n            count: personas.length\n        });\n    }\n    catch (error) {\n        logger_1.logger.error('Error fetching expert personas:', error);\n        next(error);\n    }\n});\n// Get expert persona by ID\nrouter.get('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const persona = await db_1.db.select()\n            .from(db_1.expertPersonas)\n            .where((0, drizzle_orm_1.eq)(db_1.expertPersonas.id, id))\n            .limit(1);\n        if (persona.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Expert persona not found'\n            });\n        }\n        logger_1.logger.info(`Retrieved expert persona: ${id}`);\n        res.json({\n            success: true,\n            data: persona[0]\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error fetching expert persona ${req.params.id}:`, error);\n        next(error);\n    }\n});\n// Create new expert persona\nrouter.post('/', async (req, res, next) => {\n    try {\n        const validatedData = createExpertPersonaSchema.parse(req.body);\n        // Create encrypted placeholders for sensitive data\n        const newPersona = {\n            ...validatedData,\n            professionalBackgroundEncrypted: 'encrypted_placeholder',\n            expertiseCredentialsEncrypted: 'encrypted_placeholder',\n            marketExperienceEncrypted: 'encrypted_placeholder',\n            personaEncryptionKeyId: `key_${Date.now()}`\n        };\n        const result = await db_1.db.insert(db_1.expertPersonas)\n            .values(newPersona)\n            .returning();\n        logger_1.logger.info(`Created expert persona: ${result[0].expertName} (${result[0].id})`);\n        res.status(201).json({\n            success: true,\n            data: result[0],\n            message: 'Expert persona created successfully'\n        });\n    }\n    catch (error) {\n        if (error instanceof zod_1.z.ZodError) {\n            return res.status(400).json({\n                success: false,\n                message: 'Validation error',\n                errors: error.errors\n            });\n        }\n        logger_1.logger.error('Error creating expert persona:', error);\n        next(error);\n    }\n});\n// Update expert persona\nrouter.put('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const updates = req.body;\n        const result = await db_1.db.update(db_1.expertPersonas)\n            .set({ ...updates, updatedAt: new Date() })\n            .where((0, drizzle_orm_1.eq)(db_1.expertPersonas.id, id))\n            .returning();\n        if (result.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Expert persona not found'\n            });\n        }\n        logger_1.logger.info(`Updated expert persona: ${id}`);\n        res.json({\n            success: true,\n            data: result[0],\n            message: 'Expert persona updated successfully'\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error updating expert persona ${req.params.id}:`, error);\n        next(error);\n    }\n});\n// Delete expert persona\nrouter.delete('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const result = await db_1.db.delete(db_1.expertPersonas)\n            .where((0, drizzle_orm_1.eq)(db_1.expertPersonas.id, id))\n            .returning();\n        if (result.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Expert persona not found'\n            });\n        }\n        logger_1.logger.info(`Deleted expert persona: ${id}`);\n        res.json({\n            success: true,\n            message: 'Expert persona deleted successfully'\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error deleting expert persona ${req.params.id}:`, error);\n        next(error);\n    }\n});\n//# sourceMappingURL=expertPersonas.js.map","size_bytes":6236},"dist/server/routes/geoPlatformAccounts.d.ts":{"content":"declare const router: import(\"express-serve-static-core\").Router;\nexport { router as geoPlatformAccountsRouter };\n//# sourceMappingURL=geoPlatformAccounts.d.ts.map","size_bytes":163},"dist/server/routes/geoPlatformAccounts.js":{"content":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.geoPlatformAccountsRouter = void 0;\nconst express_1 = require(\"express\");\nconst db_1 = require(\"../db\");\nconst drizzle_orm_1 = require(\"drizzle-orm\");\nconst logger_1 = require(\"../services/logger\");\nconst zod_1 = require(\"zod\");\nconst router = (0, express_1.Router)();\nexports.geoPlatformAccountsRouter = router;\n// Validation schema\nconst createPlatformAccountSchema = zod_1.z.object({\n    personaId: zod_1.z.string().uuid(),\n    platformType: zod_1.z.enum(['medium', 'reddit', 'quora', 'facebook', 'linkedin']),\n    platformPriority: zod_1.z.number().int().min(1).max(10),\n    username: zod_1.z.string().min(1).max(100),\n    displayName: zod_1.z.string().max(100).optional(),\n    expertBio: zod_1.z.string().optional(),\n    expertCredentials: zod_1.z.string().optional(),\n    platformGeoSettings: zod_1.z.object({\n        targetRegions: zod_1.z.array(zod_1.z.string()),\n        contentLanguage: zod_1.z.string().default('en-PH'),\n        timezoneFocus: zod_1.z.string().default('Asia/Manila')\n    }),\n    contentAuthorityStrategy: zod_1.z.object({\n        contentTypes: zod_1.z.array(zod_1.z.string()),\n        publicationFrequency: zod_1.z.string(),\n        expertiseAreas: zod_1.z.array(zod_1.z.string())\n    }),\n    expertEngagementApproach: zod_1.z.object({\n        responseStyle: zod_1.z.string(),\n        engagementLevel: zod_1.z.enum(['low', 'medium', 'high']),\n        communityParticipation: zod_1.z.boolean()\n    }),\n    citationOptimizationConfig: zod_1.z.object({\n        keywordTargets: zod_1.z.array(zod_1.z.string()),\n        contentDepth: zod_1.z.enum(['comprehensive', 'detailed', 'summary']),\n        authoritySignals: zod_1.z.array(zod_1.z.string())\n    })\n});\n// Get platform accounts for a persona\nrouter.get('/persona/:personaId', async (req, res, next) => {\n    try {\n        const { personaId } = req.params;\n        const accounts = await db_1.db.select()\n            .from(db_1.geoPlatformAccounts)\n            .where((0, drizzle_orm_1.eq)(db_1.geoPlatformAccounts.personaId, personaId));\n        logger_1.logger.info(`Retrieved ${accounts.length} platform accounts for persona: ${personaId}`);\n        res.json({\n            success: true,\n            data: accounts,\n            count: accounts.length\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error fetching platform accounts for persona ${req.params.personaId}:`, error);\n        next(error);\n    }\n});\n// Get all platform accounts\nrouter.get('/', async (req, res, next) => {\n    try {\n        const { platform, status } = req.query;\n        let query = db_1.db.select().from(db_1.geoPlatformAccounts);\n        if (platform) {\n            query = query.where((0, drizzle_orm_1.eq)(db_1.geoPlatformAccounts.platformType, platform));\n        }\n        const accounts = await query;\n        logger_1.logger.info(`Retrieved ${accounts.length} platform accounts`);\n        res.json({\n            success: true,\n            data: accounts,\n            count: accounts.length\n        });\n    }\n    catch (error) {\n        logger_1.logger.error('Error fetching platform accounts:', error);\n        next(error);\n    }\n});\n// Get platform account by ID\nrouter.get('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const account = await db_1.db.select()\n            .from(db_1.geoPlatformAccounts)\n            .where((0, drizzle_orm_1.eq)(db_1.geoPlatformAccounts.id, id))\n            .limit(1);\n        if (account.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Platform account not found'\n            });\n        }\n        logger_1.logger.info(`Retrieved platform account: ${id}`);\n        res.json({\n            success: true,\n            data: account[0]\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error fetching platform account ${req.params.id}:`, error);\n        next(error);\n    }\n});\n// Create new platform account\nrouter.post('/', async (req, res, next) => {\n    try {\n        const validatedData = createPlatformAccountSchema.parse(req.body);\n        const newAccount = {\n            ...validatedData,\n            credentialsEncrypted: 'encrypted_placeholder', // Will be properly encrypted in production\n            accountStatus: 'building',\n            platformAuthorityLevel: 'newcomer',\n            expertVerificationStatus: 'unverified'\n        };\n        const result = await db_1.db.insert(db_1.geoPlatformAccounts)\n            .values(newAccount)\n            .returning();\n        logger_1.logger.info(`Created platform account: ${result[0].username} on ${result[0].platformType} (${result[0].id})`);\n        res.status(201).json({\n            success: true,\n            data: result[0],\n            message: 'Platform account created successfully'\n        });\n    }\n    catch (error) {\n        if (error instanceof zod_1.z.ZodError) {\n            return res.status(400).json({\n                success: false,\n                message: 'Validation error',\n                errors: error.errors\n            });\n        }\n        logger_1.logger.error('Error creating platform account:', error);\n        next(error);\n    }\n});\n// Update platform account\nrouter.put('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const updates = req.body;\n        const result = await db_1.db.update(db_1.geoPlatformAccounts)\n            .set({ ...updates, updatedAt: new Date() })\n            .where((0, drizzle_orm_1.eq)(db_1.geoPlatformAccounts.id, id))\n            .returning();\n        if (result.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Platform account not found'\n            });\n        }\n        logger_1.logger.info(`Updated platform account: ${id}`);\n        res.json({\n            success: true,\n            data: result[0],\n            message: 'Platform account updated successfully'\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error updating platform account ${req.params.id}:`, error);\n        next(error);\n    }\n});\n//# sourceMappingURL=geoPlatformAccounts.js.map","size_bytes":6237},"dist/server/server/db/index.d.ts":{"content":"import * as schema from '../../shared/schema';\nexport declare const db: import(\"drizzle-orm/node-postgres\").NodePgDatabase<typeof schema>;\nexport * from '../../shared/schema';\n//# sourceMappingURL=index.d.ts.map","size_bytes":211},"dist/server/server/db/index.js":{"content":"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.db = void 0;\nconst node_postgres_1 = require(\"drizzle-orm/node-postgres\");\nconst pg_1 = require(\"pg\");\nconst schema = __importStar(require(\"../../shared/schema\"));\nconst pool = new pg_1.Pool({\n    connectionString: process.env.DATABASE_URL,\n});\nexports.db = (0, node_postgres_1.drizzle)(pool, { schema });\n__exportStar(require(\"../../shared/schema\"), exports);\n//# sourceMappingURL=index.js.map","size_bytes":2041},"dist/server/server/index.d.ts":{"content":"declare const app: import(\"express-serve-static-core\").Express;\nexport default app;\n//# sourceMappingURL=index.d.ts.map","size_bytes":119},"dist/server/server/index.js":{"content":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst express_1 = __importDefault(require(\"express\"));\nconst cors_1 = __importDefault(require(\"cors\"));\nconst helmet_1 = __importDefault(require(\"helmet\"));\nconst dotenv_1 = require(\"dotenv\");\nconst path_1 = __importDefault(require(\"path\"));\nconst expertPersonas_1 = require(\"./routes/expertPersonas\");\nconst geoPlatformAccounts_1 = require(\"./routes/geoPlatformAccounts\");\nconst authorityContent_1 = require(\"./routes/authorityContent\");\nconst errorHandler_1 = require(\"./middleware/errorHandler\");\nconst logger_1 = require(\"./services/logger\");\nconst db_1 = require(\"./db\");\n(0, dotenv_1.config)();\n// Fail fast if DATABASE_URL is not set\nif (!process.env.DATABASE_URL) {\n    logger_1.logger.error('DATABASE_URL environment variable is required');\n    process.exit(1);\n}\nconst app = (0, express_1.default)();\nconst port = process.env.PORT || (process.env.NODE_ENV === 'production' ? 5000 : 3001);\n// Security and CORS middleware\napp.use((0, helmet_1.default)());\napp.use((0, cors_1.default)({\n    origin: process.env.NODE_ENV === 'production'\n        ? process.env.FRONTEND_URL || 'https://your-domain.com'\n        : ['http://localhost:3000', 'http://0.0.0.0:3000', 'http://127.0.0.1:3000'],\n    credentials: true\n}));\n// Body parsing middleware\napp.use(express_1.default.json());\napp.use(express_1.default.urlencoded({ extended: true }));\n// Request logging\napp.use((req, res, next) => {\n    logger_1.logger.info(`${req.method} ${req.path}`, {\n        ip: req.ip,\n        userAgent: req.get('User-Agent')\n    });\n    next();\n});\n// Health check endpoint with database connectivity check\napp.get('/health', async (req, res) => {\n    try {\n        // Simple database connectivity check using existing table\n        await db_1.db.select().from(db_1.expertPersonas).limit(1);\n        res.json({\n            status: 'ok',\n            timestamp: new Date().toISOString(),\n            service: 'geo-expert-authority-app',\n            database: 'connected'\n        });\n    }\n    catch (error) {\n        logger_1.logger.error('Database health check failed:', error);\n        res.status(503).json({\n            status: 'error',\n            timestamp: new Date().toISOString(),\n            service: 'geo-expert-authority-app',\n            database: 'disconnected',\n            error: 'Database connection failed'\n        });\n    }\n});\n// In production, serve static files from the built client\nif (process.env.NODE_ENV === 'production') {\n    const clientDistPath = path_1.default.join(__dirname, '..', 'client');\n    app.use(express_1.default.static(clientDistPath));\n    // Handle client-side routing - serve index.html for non-API routes\n    app.get('*', (req, res, next) => {\n        if (req.path.startsWith('/api') || req.path.startsWith('/health')) {\n            next();\n        }\n        else {\n            res.sendFile(path_1.default.join(clientDistPath, 'index.html'));\n        }\n    });\n}\n// API routes\napp.use('/api/expert-personas', expertPersonas_1.expertPersonasRouter);\napp.use('/api/geo-platform-accounts', geoPlatformAccounts_1.geoPlatformAccountsRouter);\napp.use('/api/authority-content', authorityContent_1.authorityContentRouter);\n// Error handling\napp.use(errorHandler_1.errorHandler);\n// 404 handler\napp.use('*', (req, res) => {\n    res.status(404).json({\n        error: 'Not Found',\n        message: `Route ${req.originalUrl} not found`,\n        timestamp: new Date().toISOString()\n    });\n});\napp.listen(port, () => {\n    logger_1.logger.info(`🚀 Server running on port ${port}`);\n    logger_1.logger.info(`📊 Health check available at http://localhost:${port}/health`);\n    logger_1.logger.info(`🏗️  API endpoints available at http://localhost:${port}/api`);\n});\nexports.default = app;\n//# sourceMappingURL=index.js.map","size_bytes":3961},"dist/server/server/middleware/errorHandler.d.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nexport interface CustomError extends Error {\n    statusCode?: number;\n    code?: string;\n}\nexport declare const errorHandler: (err: CustomError, req: Request, res: Response, next: NextFunction) => void;\n//# sourceMappingURL=errorHandler.d.ts.map","size_bytes":304},"dist/server/server/middleware/errorHandler.js":{"content":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.errorHandler = void 0;\nconst logger_1 = require(\"../services/logger\");\nconst errorHandler = (err, req, res, next) => {\n    logger_1.logger.error('Error occurred:', {\n        error: err.message,\n        stack: err.stack,\n        url: req.url,\n        method: req.method,\n        statusCode: err.statusCode\n    });\n    const statusCode = err.statusCode || 500;\n    const message = err.message || 'Internal Server Error';\n    res.status(statusCode).json({\n        error: true,\n        message,\n        statusCode,\n        timestamp: new Date().toISOString(),\n        path: req.path\n    });\n};\nexports.errorHandler = errorHandler;\n//# sourceMappingURL=errorHandler.js.map","size_bytes":752},"dist/server/server/routes/authorityContent.d.ts":{"content":"declare const router: import(\"express-serve-static-core\").Router;\nexport { router as authorityContentRouter };\n//# sourceMappingURL=authorityContent.d.ts.map","size_bytes":157},"dist/server/server/routes/authorityContent.js":{"content":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.authorityContentRouter = void 0;\nconst express_1 = require(\"express\");\nconst db_1 = require(\"../db\");\nconst drizzle_orm_1 = require(\"drizzle-orm\");\nconst logger_1 = require(\"../services/logger\");\nconst zod_1 = require(\"zod\");\nconst router = (0, express_1.Router)();\nexports.authorityContentRouter = router;\n// Validation schema\nconst createContentSchema = zod_1.z.object({\n    personaId: zod_1.z.string().uuid(),\n    platformAccountId: zod_1.z.string().uuid(),\n    contentTitle: zod_1.z.string().min(1),\n    contentType: zod_1.z.enum(['article', 'answer', 'post', 'comment', 'guide']),\n    contentCategory: zod_1.z.string().optional(),\n    contentUrl: zod_1.z.string().url().optional(),\n    contentLength: zod_1.z.number().int().min(0).optional(),\n    publicationStatus: zod_1.z.enum(['draft', 'published', 'scheduled']).default('draft')\n});\n// Get content for a persona\nrouter.get('/persona/:personaId', async (req, res, next) => {\n    try {\n        const { personaId } = req.params;\n        const { status, platform } = req.query;\n        let query = db_1.db.select().from(db_1.authorityContentPublications)\n            .where((0, drizzle_orm_1.eq)(db_1.authorityContentPublications.personaId, personaId));\n        if (status) {\n            query = query.where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(db_1.authorityContentPublications.personaId, personaId), (0, drizzle_orm_1.eq)(db_1.authorityContentPublications.publicationStatus, status)));\n        }\n        const content = await query;\n        logger_1.logger.info(`Retrieved ${content.length} content items for persona: ${personaId}`);\n        res.json({\n            success: true,\n            data: content,\n            count: content.length\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error fetching content for persona ${req.params.personaId}:`, error);\n        next(error);\n    }\n});\n// Get all authority content\nrouter.get('/', async (req, res, next) => {\n    try {\n        const { status, type } = req.query;\n        let query = db_1.db.select().from(db_1.authorityContentPublications);\n        if (status) {\n            query = query.where((0, drizzle_orm_1.eq)(db_1.authorityContentPublications.publicationStatus, status));\n        }\n        const content = await query;\n        logger_1.logger.info(`Retrieved ${content.length} content items`);\n        res.json({\n            success: true,\n            data: content,\n            count: content.length\n        });\n    }\n    catch (error) {\n        logger_1.logger.error('Error fetching authority content:', error);\n        next(error);\n    }\n});\n// Get content by ID\nrouter.get('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const content = await db_1.db.select()\n            .from(db_1.authorityContentPublications)\n            .where((0, drizzle_orm_1.eq)(db_1.authorityContentPublications.id, id))\n            .limit(1);\n        if (content.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Content not found'\n            });\n        }\n        logger_1.logger.info(`Retrieved content: ${id}`);\n        res.json({\n            success: true,\n            data: content[0]\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error fetching content ${req.params.id}:`, error);\n        next(error);\n    }\n});\n// Create new content\nrouter.post('/', async (req, res, next) => {\n    try {\n        const validatedData = createContentSchema.parse(req.body);\n        const result = await db_1.db.insert(db_1.authorityContentPublications)\n            .values(validatedData)\n            .returning();\n        logger_1.logger.info(`Created content: ${result[0].contentTitle} (${result[0].id})`);\n        res.status(201).json({\n            success: true,\n            data: result[0],\n            message: 'Content created successfully'\n        });\n    }\n    catch (error) {\n        if (error instanceof zod_1.z.ZodError) {\n            return res.status(400).json({\n                success: false,\n                message: 'Validation error',\n                errors: error.errors\n            });\n        }\n        logger_1.logger.error('Error creating content:', error);\n        next(error);\n    }\n});\n// Update content\nrouter.put('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const updates = req.body;\n        const result = await db_1.db.update(db_1.authorityContentPublications)\n            .set({ ...updates, updatedAt: new Date() })\n            .where((0, drizzle_orm_1.eq)(db_1.authorityContentPublications.id, id))\n            .returning();\n        if (result.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Content not found'\n            });\n        }\n        logger_1.logger.info(`Updated content: ${id}`);\n        res.json({\n            success: true,\n            data: result[0],\n            message: 'Content updated successfully'\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error updating content ${req.params.id}:`, error);\n        next(error);\n    }\n});\n// Delete content\nrouter.delete('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const result = await db_1.db.delete(db_1.authorityContentPublications)\n            .where((0, drizzle_orm_1.eq)(db_1.authorityContentPublications.id, id))\n            .returning();\n        if (result.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Content not found'\n            });\n        }\n        logger_1.logger.info(`Deleted content: ${id}`);\n        res.json({\n            success: true,\n            message: 'Content deleted successfully'\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error deleting content ${req.params.id}:`, error);\n        next(error);\n    }\n});\n//# sourceMappingURL=authorityContent.js.map","size_bytes":6079},"dist/server/server/routes/expertPersonas.d.ts":{"content":"declare const router: import(\"express-serve-static-core\").Router;\nexport { router as expertPersonasRouter };\n//# sourceMappingURL=expertPersonas.d.ts.map","size_bytes":153},"dist/server/server/routes/expertPersonas.js":{"content":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.expertPersonasRouter = void 0;\nconst express_1 = require(\"express\");\nconst db_1 = require(\"../db\");\nconst drizzle_orm_1 = require(\"drizzle-orm\");\nconst logger_1 = require(\"../services/logger\");\nconst zod_1 = require(\"zod\");\nconst router = (0, express_1.Router)();\nexports.expertPersonasRouter = router;\n// Validation schemas\nconst createExpertPersonaSchema = zod_1.z.object({\n    expertName: zod_1.z.string().min(1).max(100),\n    expertiseFocus: zod_1.z.string().min(1).max(50),\n    targetBuyerSegments: zod_1.z.array(zod_1.z.string()),\n    primaryMarketLocation: zod_1.z.string().min(1).max(50),\n    geoContentSpecializations: zod_1.z.array(zod_1.z.string()),\n    authorityBuildingTopics: zod_1.z.array(zod_1.z.string()),\n    citationWorthyExpertise: zod_1.z.array(zod_1.z.string()),\n    platformExpertiseFocus: zod_1.z.object({\n        medium: zod_1.z.object({\n            active: zod_1.z.boolean(),\n            contentTypes: zod_1.z.array(zod_1.z.string())\n        }).optional(),\n        reddit: zod_1.z.object({\n            active: zod_1.z.boolean(),\n            subreddits: zod_1.z.array(zod_1.z.string())\n        }).optional(),\n        quora: zod_1.z.object({\n            active: zod_1.z.boolean(),\n            topics: zod_1.z.array(zod_1.z.string())\n        }).optional()\n    }),\n    contentPublicationSchedule: zod_1.z.object({\n        frequency: zod_1.z.string(),\n        timezone: zod_1.z.string().default('Asia/Manila')\n    }),\n    expertVoiceCharacteristics: zod_1.z.object({\n        tone: zod_1.z.string(),\n        expertise_level: zod_1.z.string(),\n        target_audience: zod_1.z.string()\n    }),\n    browserFingerprintConfig: zod_1.z.object({\n        userAgent: zod_1.z.string().optional(),\n        viewport: zod_1.z.object({\n            width: zod_1.z.number(),\n            height: zod_1.z.number()\n        }).optional()\n    })\n});\n// Get all expert personas\nrouter.get('/', async (req, res, next) => {\n    try {\n        const personas = await db_1.db.select().from(db_1.expertPersonas);\n        logger_1.logger.info(`Retrieved ${personas.length} expert personas`);\n        res.json({\n            success: true,\n            data: personas,\n            count: personas.length\n        });\n    }\n    catch (error) {\n        logger_1.logger.error('Error fetching expert personas:', error);\n        next(error);\n    }\n});\n// Get expert persona by ID\nrouter.get('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const persona = await db_1.db.select()\n            .from(db_1.expertPersonas)\n            .where((0, drizzle_orm_1.eq)(db_1.expertPersonas.id, id))\n            .limit(1);\n        if (persona.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Expert persona not found'\n            });\n        }\n        logger_1.logger.info(`Retrieved expert persona: ${id}`);\n        res.json({\n            success: true,\n            data: persona[0]\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error fetching expert persona ${req.params.id}:`, error);\n        next(error);\n    }\n});\n// Create new expert persona\nrouter.post('/', async (req, res, next) => {\n    try {\n        const validatedData = createExpertPersonaSchema.parse(req.body);\n        // Create encrypted placeholders for sensitive data\n        const newPersona = {\n            ...validatedData,\n            professionalBackgroundEncrypted: 'encrypted_placeholder',\n            expertiseCredentialsEncrypted: 'encrypted_placeholder',\n            marketExperienceEncrypted: 'encrypted_placeholder',\n            personaEncryptionKeyId: `key_${Date.now()}`\n        };\n        const result = await db_1.db.insert(db_1.expertPersonas)\n            .values(newPersona)\n            .returning();\n        logger_1.logger.info(`Created expert persona: ${result[0].expertName} (${result[0].id})`);\n        res.status(201).json({\n            success: true,\n            data: result[0],\n            message: 'Expert persona created successfully'\n        });\n    }\n    catch (error) {\n        if (error instanceof zod_1.z.ZodError) {\n            return res.status(400).json({\n                success: false,\n                message: 'Validation error',\n                errors: error.errors\n            });\n        }\n        logger_1.logger.error('Error creating expert persona:', error);\n        next(error);\n    }\n});\n// Update expert persona\nrouter.put('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const updates = req.body;\n        const result = await db_1.db.update(db_1.expertPersonas)\n            .set({ ...updates, updatedAt: new Date() })\n            .where((0, drizzle_orm_1.eq)(db_1.expertPersonas.id, id))\n            .returning();\n        if (result.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Expert persona not found'\n            });\n        }\n        logger_1.logger.info(`Updated expert persona: ${id}`);\n        res.json({\n            success: true,\n            data: result[0],\n            message: 'Expert persona updated successfully'\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error updating expert persona ${req.params.id}:`, error);\n        next(error);\n    }\n});\n// Delete expert persona\nrouter.delete('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const result = await db_1.db.delete(db_1.expertPersonas)\n            .where((0, drizzle_orm_1.eq)(db_1.expertPersonas.id, id))\n            .returning();\n        if (result.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Expert persona not found'\n            });\n        }\n        logger_1.logger.info(`Deleted expert persona: ${id}`);\n        res.json({\n            success: true,\n            message: 'Expert persona deleted successfully'\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error deleting expert persona ${req.params.id}:`, error);\n        next(error);\n    }\n});\n//# sourceMappingURL=expertPersonas.js.map","size_bytes":6236},"dist/server/server/routes/geoPlatformAccounts.d.ts":{"content":"declare const router: import(\"express-serve-static-core\").Router;\nexport { router as geoPlatformAccountsRouter };\n//# sourceMappingURL=geoPlatformAccounts.d.ts.map","size_bytes":163},"dist/server/server/routes/geoPlatformAccounts.js":{"content":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.geoPlatformAccountsRouter = void 0;\nconst express_1 = require(\"express\");\nconst db_1 = require(\"../db\");\nconst drizzle_orm_1 = require(\"drizzle-orm\");\nconst logger_1 = require(\"../services/logger\");\nconst zod_1 = require(\"zod\");\nconst router = (0, express_1.Router)();\nexports.geoPlatformAccountsRouter = router;\n// Validation schema\nconst createPlatformAccountSchema = zod_1.z.object({\n    personaId: zod_1.z.string().uuid(),\n    platformType: zod_1.z.enum(['medium', 'reddit', 'quora', 'facebook', 'linkedin']),\n    platformPriority: zod_1.z.number().int().min(1).max(10),\n    username: zod_1.z.string().min(1).max(100),\n    displayName: zod_1.z.string().max(100).optional(),\n    expertBio: zod_1.z.string().optional(),\n    expertCredentials: zod_1.z.string().optional(),\n    platformGeoSettings: zod_1.z.object({\n        targetRegions: zod_1.z.array(zod_1.z.string()),\n        contentLanguage: zod_1.z.string().default('en-PH'),\n        timezoneFocus: zod_1.z.string().default('Asia/Manila')\n    }),\n    contentAuthorityStrategy: zod_1.z.object({\n        contentTypes: zod_1.z.array(zod_1.z.string()),\n        publicationFrequency: zod_1.z.string(),\n        expertiseAreas: zod_1.z.array(zod_1.z.string())\n    }),\n    expertEngagementApproach: zod_1.z.object({\n        responseStyle: zod_1.z.string(),\n        engagementLevel: zod_1.z.enum(['low', 'medium', 'high']),\n        communityParticipation: zod_1.z.boolean()\n    }),\n    citationOptimizationConfig: zod_1.z.object({\n        keywordTargets: zod_1.z.array(zod_1.z.string()),\n        contentDepth: zod_1.z.enum(['comprehensive', 'detailed', 'summary']),\n        authoritySignals: zod_1.z.array(zod_1.z.string())\n    })\n});\n// Get platform accounts for a persona\nrouter.get('/persona/:personaId', async (req, res, next) => {\n    try {\n        const { personaId } = req.params;\n        const accounts = await db_1.db.select()\n            .from(db_1.geoPlatformAccounts)\n            .where((0, drizzle_orm_1.eq)(db_1.geoPlatformAccounts.personaId, personaId));\n        logger_1.logger.info(`Retrieved ${accounts.length} platform accounts for persona: ${personaId}`);\n        res.json({\n            success: true,\n            data: accounts,\n            count: accounts.length\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error fetching platform accounts for persona ${req.params.personaId}:`, error);\n        next(error);\n    }\n});\n// Get all platform accounts\nrouter.get('/', async (req, res, next) => {\n    try {\n        const { platform, status } = req.query;\n        let query = db_1.db.select().from(db_1.geoPlatformAccounts);\n        if (platform) {\n            query = query.where((0, drizzle_orm_1.eq)(db_1.geoPlatformAccounts.platformType, platform));\n        }\n        const accounts = await query;\n        logger_1.logger.info(`Retrieved ${accounts.length} platform accounts`);\n        res.json({\n            success: true,\n            data: accounts,\n            count: accounts.length\n        });\n    }\n    catch (error) {\n        logger_1.logger.error('Error fetching platform accounts:', error);\n        next(error);\n    }\n});\n// Get platform account by ID\nrouter.get('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const account = await db_1.db.select()\n            .from(db_1.geoPlatformAccounts)\n            .where((0, drizzle_orm_1.eq)(db_1.geoPlatformAccounts.id, id))\n            .limit(1);\n        if (account.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Platform account not found'\n            });\n        }\n        logger_1.logger.info(`Retrieved platform account: ${id}`);\n        res.json({\n            success: true,\n            data: account[0]\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error fetching platform account ${req.params.id}:`, error);\n        next(error);\n    }\n});\n// Create new platform account\nrouter.post('/', async (req, res, next) => {\n    try {\n        const validatedData = createPlatformAccountSchema.parse(req.body);\n        const newAccount = {\n            ...validatedData,\n            credentialsEncrypted: 'encrypted_placeholder', // Will be properly encrypted in production\n            accountStatus: 'building',\n            platformAuthorityLevel: 'newcomer',\n            expertVerificationStatus: 'unverified'\n        };\n        const result = await db_1.db.insert(db_1.geoPlatformAccounts)\n            .values(newAccount)\n            .returning();\n        logger_1.logger.info(`Created platform account: ${result[0].username} on ${result[0].platformType} (${result[0].id})`);\n        res.status(201).json({\n            success: true,\n            data: result[0],\n            message: 'Platform account created successfully'\n        });\n    }\n    catch (error) {\n        if (error instanceof zod_1.z.ZodError) {\n            return res.status(400).json({\n                success: false,\n                message: 'Validation error',\n                errors: error.errors\n            });\n        }\n        logger_1.logger.error('Error creating platform account:', error);\n        next(error);\n    }\n});\n// Update platform account\nrouter.put('/:id', async (req, res, next) => {\n    try {\n        const { id } = req.params;\n        const updates = req.body;\n        const result = await db_1.db.update(db_1.geoPlatformAccounts)\n            .set({ ...updates, updatedAt: new Date() })\n            .where((0, drizzle_orm_1.eq)(db_1.geoPlatformAccounts.id, id))\n            .returning();\n        if (result.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: 'Platform account not found'\n            });\n        }\n        logger_1.logger.info(`Updated platform account: ${id}`);\n        res.json({\n            success: true,\n            data: result[0],\n            message: 'Platform account updated successfully'\n        });\n    }\n    catch (error) {\n        logger_1.logger.error(`Error updating platform account ${req.params.id}:`, error);\n        next(error);\n    }\n});\n//# sourceMappingURL=geoPlatformAccounts.js.map","size_bytes":6237},"dist/server/server/services/logger.d.ts":{"content":"import winston from 'winston';\nexport declare const logger: winston.Logger;\n//# sourceMappingURL=logger.d.ts.map","size_bytes":112},"dist/server/server/services/logger.js":{"content":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logger = void 0;\nconst winston_1 = __importDefault(require(\"winston\"));\nconst logFormat = winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.errors({ stack: true }), winston_1.default.format.json());\nexports.logger = winston_1.default.createLogger({\n    level: process.env.LOG_LEVEL || 'info',\n    format: logFormat,\n    defaultMeta: { service: 'geo-expert-authority-app' },\n    transports: [\n        // Write all logs with importance level of 'error' or higher to 'error.log'\n        new winston_1.default.transports.File({ filename: 'logs/error.log', level: 'error' }),\n        // Write all logs with importance level of 'info' or higher to 'combined.log'\n        new winston_1.default.transports.File({ filename: 'logs/combined.log' })\n    ]\n});\n// If not in production, also log to the console\nif (process.env.NODE_ENV !== 'production') {\n    exports.logger.add(new winston_1.default.transports.Console({\n        format: winston_1.default.format.combine(winston_1.default.format.colorize(), winston_1.default.format.simple())\n    }));\n}\n//# sourceMappingURL=logger.js.map","size_bytes":1344},"dist/server/services/logger.d.ts":{"content":"import winston from 'winston';\nexport declare const logger: winston.Logger;\n//# sourceMappingURL=logger.d.ts.map","size_bytes":112},"dist/server/services/logger.js":{"content":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logger = void 0;\nconst winston_1 = __importDefault(require(\"winston\"));\nconst logFormat = winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.errors({ stack: true }), winston_1.default.format.json());\nexports.logger = winston_1.default.createLogger({\n    level: process.env.LOG_LEVEL || 'info',\n    format: logFormat,\n    defaultMeta: { service: 'geo-expert-authority-app' },\n    transports: [\n        // Write all logs with importance level of 'error' or higher to 'error.log'\n        new winston_1.default.transports.File({ filename: 'logs/error.log', level: 'error' }),\n        // Write all logs with importance level of 'info' or higher to 'combined.log'\n        new winston_1.default.transports.File({ filename: 'logs/combined.log' })\n    ]\n});\n// If not in production, also log to the console\nif (process.env.NODE_ENV !== 'production') {\n    exports.logger.add(new winston_1.default.transports.Console({\n        format: winston_1.default.format.combine(winston_1.default.format.colorize(), winston_1.default.format.simple())\n    }));\n}\n//# sourceMappingURL=logger.js.map","size_bytes":1344},"dist/server/shared/schema.d.ts":{"content":"export declare const adminUsers: import(\"drizzle-orm/pg-core\").PgTableWithColumns<{\n    name: \"admin_users\";\n    schema: undefined;\n    columns: {\n        id: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"id\";\n            tableName: \"admin_users\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        username: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"username\";\n            tableName: \"admin_users\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        email: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"email\";\n            tableName: \"admin_users\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        passwordHash: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"password_hash\";\n            tableName: \"admin_users\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        fullName: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"full_name\";\n            tableName: \"admin_users\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        role: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"role\";\n            tableName: \"admin_users\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        status: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"status\";\n            tableName: \"admin_users\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        lastLogin: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"last_login\";\n            tableName: \"admin_users\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        createdAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"created_at\";\n            tableName: \"admin_users\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        updatedAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"updated_at\";\n            tableName: \"admin_users\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n    };\n    dialect: \"pg\";\n}>;\nexport declare const expertPersonas: import(\"drizzle-orm/pg-core\").PgTableWithColumns<{\n    name: \"expert_personas\";\n    schema: undefined;\n    columns: {\n        id: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"id\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        adminUserId: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"admin_user_id\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        expertName: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_name\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        expertStatus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_status\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        expertiseFocus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expertise_focus\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        targetBuyerSegments: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"target_buyer_segments\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        authorityLevel: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"authority_level\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        professionalBackgroundEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"professional_background_encrypted\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        expertiseCredentialsEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expertise_credentials_encrypted\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        marketExperienceEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"market_experience_encrypted\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        primaryMarketLocation: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"primary_market_location\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        secondaryMarketAreas: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"secondary_market_areas\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        localMarketKnowledgeDepth: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"local_market_knowledge_depth\";\n            tableName: \"expert_personas\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        timezone: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"timezone\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        geoContentSpecializations: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"geo_content_specializations\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        authorityBuildingTopics: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"authority_building_topics\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        citationWorthyExpertise: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"citation_worthy_expertise\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        platformExpertiseFocus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"platform_expertise_focus\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        contentPublicationSchedule: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"content_publication_schedule\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        expertVoiceCharacteristics: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_voice_characteristics\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        personaEncryptionKeyId: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"persona_encryption_key_id\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        browserFingerprintConfig: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"browser_fingerprint_config\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        currentAuthorityScore: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"current_authority_score\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        estimatedAiCitations: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"estimated_ai_citations\";\n            tableName: \"expert_personas\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        expertRecognitionSignals: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_recognition_signals\";\n            tableName: \"expert_personas\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        thoughtLeadershipReach: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"thought_leadership_reach\";\n            tableName: \"expert_personas\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        monthlyConsultationRequests: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"monthly_consultation_requests\";\n            tableName: \"expert_personas\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        consultationToReferralRate: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"consultation_to_referral_rate\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        averageConsultationValue: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"average_consultation_value\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        createdAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"created_at\";\n            tableName: \"expert_personas\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        updatedAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"updated_at\";\n            tableName: \"expert_personas\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        lastExpertActivity: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"last_expert_activity\";\n            tableName: \"expert_personas\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n    };\n    dialect: \"pg\";\n}>;\nexport declare const geoPlatformAccounts: import(\"drizzle-orm/pg-core\").PgTableWithColumns<{\n    name: \"geo_platform_accounts\";\n    schema: undefined;\n    columns: {\n        id: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"id\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        personaId: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"persona_id\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        platformType: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"platform_type\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        platformPriority: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"platform_priority\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        geoOptimizationLevel: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"geo_optimization_level\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        username: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"username\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        displayName: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"display_name\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        expertBio: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_bio\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        expertCredentials: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_credentials\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        profileOptimizationScore: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"profile_optimization_score\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        credentialsEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"credentials_encrypted\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        authTokensEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"auth_tokens_encrypted\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        accountStatus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"account_status\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        platformAuthorityLevel: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"platform_authority_level\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        expertVerificationStatus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_verification_status\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        accountReputationScore: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"account_reputation_score\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        totalAuthorityContent: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"total_authority_content\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        averageContentEngagement: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"average_content_engagement\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        expertRecognitionSignals: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_recognition_signals\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        thoughtLeadershipIndicators: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"thought_leadership_indicators\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        platformGeoSettings: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"platform_geo_settings\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        contentAuthorityStrategy: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"content_authority_strategy\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        expertEngagementApproach: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_engagement_approach\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        citationOptimizationConfig: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"citation_optimization_config\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        monthlyExpertInquiries: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"monthly_expert_inquiries\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        consultationRequests: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"consultation_requests\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        authorityConversionRate: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"authority_conversion_rate\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        leadQualityFromAuthority: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"lead_quality_from_authority\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        createdAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"created_at\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        updatedAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"updated_at\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        lastActivity: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"last_activity\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n    };\n    dialect: \"pg\";\n}>;\nexport declare const authorityContentPublications: import(\"drizzle-orm/pg-core\").PgTableWithColumns<{\n    name: \"authority_content_publications\";\n    schema: undefined;\n    columns: {\n        id: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"id\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        personaId: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"persona_id\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        platformAccountId: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"platform_account_id\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        contentTitle: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"content_title\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        contentType: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"content_type\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        contentCategory: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"content_category\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        contentUrl: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"content_url\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        contentLength: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"content_length\";\n            tableName: \"authority_content_publications\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        authorityScore: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"authority_score\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        aiCitationPotentialScore: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"ai_citation_potential_score\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        viewCount: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"view_count\";\n            tableName: \"authority_content_publications\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        engagementCount: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"engagement_count\";\n            tableName: \"authority_content_publications\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        shareCount: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"share_count\";\n            tableName: \"authority_content_publications\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        expertRecognitionSignals: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_recognition_signals\";\n            tableName: \"authority_content_publications\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        consultationInquiriesAttributed: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"consultation_inquiries_attributed\";\n            tableName: \"authority_content_publications\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        leadConversionsAttributed: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"lead_conversions_attributed\";\n            tableName: \"authority_content_publications\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        revenueAttributed: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"revenue_attributed\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        publicationStatus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"publication_status\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        publishedAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"published_at\";\n            tableName: \"authority_content_publications\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        createdAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"created_at\";\n            tableName: \"authority_content_publications\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        updatedAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"updated_at\";\n            tableName: \"authority_content_publications\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n    };\n    dialect: \"pg\";\n}>;\nexport declare const proxyAssignments: import(\"drizzle-orm/pg-core\").PgTableWithColumns<{\n    name: \"proxy_assignments\";\n    schema: undefined;\n    columns: {\n        id: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"id\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        personaId: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"persona_id\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        proxyProvider: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_provider\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        proxyType: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_type\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        proxyLocation: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_location\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        proxyHostEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_host_encrypted\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        proxyPortEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_port_encrypted\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        proxyUsernameEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_username_encrypted\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        proxyPasswordEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_password_encrypted\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        proxyStatus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_status\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        lastHealthCheck: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"last_health_check\";\n            tableName: \"proxy_assignments\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        healthCheckStatus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"health_check_status\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        connectionSuccessRate: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"connection_success_rate\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        averageResponseTime: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"average_response_time\";\n            tableName: \"proxy_assignments\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        assignedAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"assigned_at\";\n            tableName: \"proxy_assignments\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        createdAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"created_at\";\n            tableName: \"proxy_assignments\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        updatedAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"updated_at\";\n            tableName: \"proxy_assignments\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n    };\n    dialect: \"pg\";\n}>;\nexport declare const expertPersonasNameIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport declare const expertPersonasStatusIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport declare const expertPersonasAuthorityIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport declare const geoPlatformAccountsPersonaIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport declare const geoPlatformAccountsPlatformIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport declare const contentPublicationsPersonaIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport declare const contentPublicationsPlatformIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport declare const proxyAssignmentsPersonaIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type NewAdminUser = typeof adminUsers.$inferInsert;\nexport type ExpertPersona = typeof expertPersonas.$inferSelect;\nexport type NewExpertPersona = typeof expertPersonas.$inferInsert;\nexport type GeoPlatformAccount = typeof geoPlatformAccounts.$inferSelect;\nexport type NewGeoPlatformAccount = typeof geoPlatformAccounts.$inferInsert;\nexport type AuthorityContentPublication = typeof authorityContentPublications.$inferSelect;\nexport type NewAuthorityContentPublication = typeof authorityContentPublications.$inferInsert;\nexport type ProxyAssignment = typeof proxyAssignments.$inferSelect;\nexport type NewProxyAssignment = typeof proxyAssignments.$inferInsert;\n//# sourceMappingURL=schema.d.ts.map","size_bytes":50231},"dist/server/shared/schema.js":{"content":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.proxyAssignmentsPersonaIdx = exports.contentPublicationsPlatformIdx = exports.contentPublicationsPersonaIdx = exports.geoPlatformAccountsPlatformIdx = exports.geoPlatformAccountsPersonaIdx = exports.expertPersonasAuthorityIdx = exports.expertPersonasStatusIdx = exports.expertPersonasNameIdx = exports.proxyAssignments = exports.authorityContentPublications = exports.geoPlatformAccounts = exports.expertPersonas = exports.adminUsers = void 0;\nconst pg_core_1 = require(\"drizzle-orm/pg-core\");\n// Admin Users Table\nexports.adminUsers = (0, pg_core_1.pgTable)('admin_users', {\n    id: (0, pg_core_1.uuid)('id').defaultRandom().primaryKey(),\n    username: (0, pg_core_1.varchar)('username', { length: 50 }).notNull().unique(),\n    email: (0, pg_core_1.varchar)('email', { length: 255 }).notNull().unique(),\n    passwordHash: (0, pg_core_1.text)('password_hash').notNull(),\n    fullName: (0, pg_core_1.varchar)('full_name', { length: 100 }),\n    role: (0, pg_core_1.varchar)('role', { length: 20 }).default('admin'),\n    status: (0, pg_core_1.varchar)('status', { length: 20 }).default('active'),\n    lastLogin: (0, pg_core_1.timestamp)('last_login'),\n    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),\n    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()\n});\n// Expert Personas Table (Authority-Focused Real Estate Experts)\nexports.expertPersonas = (0, pg_core_1.pgTable)('expert_personas', {\n    id: (0, pg_core_1.uuid)('id').defaultRandom().primaryKey(),\n    adminUserId: (0, pg_core_1.uuid)('admin_user_id').references(() => exports.adminUsers.id, { onDelete: 'cascade' }),\n    // Core Expert Identity\n    expertName: (0, pg_core_1.varchar)('expert_name', { length: 100 }).notNull(),\n    expertStatus: (0, pg_core_1.varchar)('expert_status', { length: 20 }).default('developing'),\n    // Real Estate Expertise Specialization\n    expertiseFocus: (0, pg_core_1.varchar)('expertise_focus', { length: 50 }).notNull(),\n    targetBuyerSegments: (0, pg_core_1.jsonb)('target_buyer_segments').notNull(),\n    authorityLevel: (0, pg_core_1.varchar)('authority_level', { length: 20 }).default('emerging'),\n    // Expert Profile (Encrypted)\n    professionalBackgroundEncrypted: (0, pg_core_1.text)('professional_background_encrypted').notNull(),\n    expertiseCredentialsEncrypted: (0, pg_core_1.text)('expertise_credentials_encrypted').notNull(),\n    marketExperienceEncrypted: (0, pg_core_1.text)('market_experience_encrypted').notNull(),\n    // Geographic Expertise (Philippines Focus)\n    primaryMarketLocation: (0, pg_core_1.varchar)('primary_market_location', { length: 50 }).notNull(),\n    secondaryMarketAreas: (0, pg_core_1.jsonb)('secondary_market_areas').default([]),\n    localMarketKnowledgeDepth: (0, pg_core_1.integer)('local_market_knowledge_depth').default(1),\n    timezone: (0, pg_core_1.varchar)('timezone', { length: 50 }).default('Asia/Manila'),\n    // GEO Content Authority Configuration\n    geoContentSpecializations: (0, pg_core_1.jsonb)('geo_content_specializations').notNull(),\n    authorityBuildingTopics: (0, pg_core_1.jsonb)('authority_building_topics').notNull(),\n    citationWorthyExpertise: (0, pg_core_1.jsonb)('citation_worthy_expertise').notNull(),\n    // Platform Authority Strategy\n    platformExpertiseFocus: (0, pg_core_1.jsonb)('platform_expertise_focus').notNull(),\n    contentPublicationSchedule: (0, pg_core_1.jsonb)('content_publication_schedule').notNull(),\n    expertVoiceCharacteristics: (0, pg_core_1.jsonb)('expert_voice_characteristics').notNull(),\n    // Security Configuration\n    personaEncryptionKeyId: (0, pg_core_1.varchar)('persona_encryption_key_id', { length: 255 }).notNull(),\n    browserFingerprintConfig: (0, pg_core_1.jsonb)('browser_fingerprint_config').notNull(),\n    // Authority Building Performance\n    currentAuthorityScore: (0, pg_core_1.decimal)('current_authority_score', { precision: 5, scale: 2 }).default('0.00'),\n    estimatedAiCitations: (0, pg_core_1.integer)('estimated_ai_citations').default(0),\n    expertRecognitionSignals: (0, pg_core_1.integer)('expert_recognition_signals').default(0),\n    thoughtLeadershipReach: (0, pg_core_1.integer)('thought_leadership_reach').default(0),\n    // Lead Generation Through Expertise\n    monthlyConsultationRequests: (0, pg_core_1.integer)('monthly_consultation_requests').default(0),\n    consultationToReferralRate: (0, pg_core_1.decimal)('consultation_to_referral_rate', { precision: 5, scale: 4 }).default('0.0000'),\n    averageConsultationValue: (0, pg_core_1.decimal)('average_consultation_value', { precision: 8, scale: 2 }).default('0.00'),\n    // Metadata\n    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),\n    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),\n    lastExpertActivity: (0, pg_core_1.timestamp)('last_expert_activity')\n});\n// GEO Platform Accounts\nexports.geoPlatformAccounts = (0, pg_core_1.pgTable)('geo_platform_accounts', {\n    id: (0, pg_core_1.uuid)('id').defaultRandom().primaryKey(),\n    personaId: (0, pg_core_1.uuid)('persona_id').references(() => exports.expertPersonas.id, { onDelete: 'cascade' }),\n    platformType: (0, pg_core_1.varchar)('platform_type', { length: 50 }).notNull(),\n    platformPriority: (0, pg_core_1.integer)('platform_priority').notNull(),\n    geoOptimizationLevel: (0, pg_core_1.varchar)('geo_optimization_level', { length: 20 }).default('high'),\n    // Account Details\n    username: (0, pg_core_1.varchar)('username', { length: 100 }).notNull(),\n    displayName: (0, pg_core_1.varchar)('display_name', { length: 100 }),\n    expertBio: (0, pg_core_1.text)('expert_bio'),\n    expertCredentials: (0, pg_core_1.text)('expert_credentials'),\n    profileOptimizationScore: (0, pg_core_1.decimal)('profile_optimization_score', { precision: 3, scale: 2 }).default('0.00'),\n    // Authentication (Encrypted)\n    credentialsEncrypted: (0, pg_core_1.text)('credentials_encrypted').notNull(),\n    authTokensEncrypted: (0, pg_core_1.text)('auth_tokens_encrypted'),\n    // Account Authority Status\n    accountStatus: (0, pg_core_1.varchar)('account_status', { length: 20 }).default('building'),\n    platformAuthorityLevel: (0, pg_core_1.varchar)('platform_authority_level', { length: 20 }).default('newcomer'),\n    expertVerificationStatus: (0, pg_core_1.varchar)('expert_verification_status', { length: 20 }).default('unverified'),\n    accountReputationScore: (0, pg_core_1.decimal)('account_reputation_score', { precision: 5, scale: 2 }).default('0.00'),\n    // Content Authority Metrics\n    totalAuthorityContent: (0, pg_core_1.integer)('total_authority_content').default(0),\n    averageContentEngagement: (0, pg_core_1.decimal)('average_content_engagement', { precision: 5, scale: 2 }).default('0.00'),\n    expertRecognitionSignals: (0, pg_core_1.integer)('expert_recognition_signals').default(0),\n    thoughtLeadershipIndicators: (0, pg_core_1.integer)('thought_leadership_indicators').default(0),\n    // Platform-Specific GEO Configuration\n    platformGeoSettings: (0, pg_core_1.jsonb)('platform_geo_settings').notNull(),\n    contentAuthorityStrategy: (0, pg_core_1.jsonb)('content_authority_strategy').notNull(),\n    expertEngagementApproach: (0, pg_core_1.jsonb)('expert_engagement_approach').notNull(),\n    citationOptimizationConfig: (0, pg_core_1.jsonb)('citation_optimization_config').notNull(),\n    // Authority-Based Lead Generation\n    monthlyExpertInquiries: (0, pg_core_1.integer)('monthly_expert_inquiries').default(0),\n    consultationRequests: (0, pg_core_1.integer)('consultation_requests').default(0),\n    authorityConversionRate: (0, pg_core_1.decimal)('authority_conversion_rate', { precision: 5, scale: 4 }).default('0.0000'),\n    leadQualityFromAuthority: (0, pg_core_1.decimal)('lead_quality_from_authority', { precision: 3, scale: 2 }).default('0.00'),\n    // Metadata\n    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),\n    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),\n    lastActivity: (0, pg_core_1.timestamp)('last_activity')\n});\n// Authority Content Publications\nexports.authorityContentPublications = (0, pg_core_1.pgTable)('authority_content_publications', {\n    id: (0, pg_core_1.uuid)('id').defaultRandom().primaryKey(),\n    personaId: (0, pg_core_1.uuid)('persona_id').references(() => exports.expertPersonas.id, { onDelete: 'cascade' }),\n    platformAccountId: (0, pg_core_1.uuid)('platform_account_id').references(() => exports.geoPlatformAccounts.id, { onDelete: 'cascade' }),\n    // Content Details\n    contentTitle: (0, pg_core_1.text)('content_title').notNull(),\n    contentType: (0, pg_core_1.varchar)('content_type', { length: 50 }).notNull(),\n    contentCategory: (0, pg_core_1.varchar)('content_category', { length: 50 }),\n    contentUrl: (0, pg_core_1.text)('content_url'),\n    // Content Authority Metrics\n    contentLength: (0, pg_core_1.integer)('content_length'),\n    authorityScore: (0, pg_core_1.decimal)('authority_score', { precision: 3, scale: 2 }).default('0.00'),\n    aiCitationPotentialScore: (0, pg_core_1.decimal)('ai_citation_potential_score', { precision: 3, scale: 2 }).default('0.00'),\n    // Performance Tracking\n    viewCount: (0, pg_core_1.integer)('view_count').default(0),\n    engagementCount: (0, pg_core_1.integer)('engagement_count').default(0),\n    shareCount: (0, pg_core_1.integer)('share_count').default(0),\n    expertRecognitionSignals: (0, pg_core_1.integer)('expert_recognition_signals').default(0),\n    // Lead Generation Attribution\n    consultationInquiriesAttributed: (0, pg_core_1.integer)('consultation_inquiries_attributed').default(0),\n    leadConversionsAttributed: (0, pg_core_1.integer)('lead_conversions_attributed').default(0),\n    revenueAttributed: (0, pg_core_1.decimal)('revenue_attributed', { precision: 10, scale: 2 }).default('0.00'),\n    // Publication Status\n    publicationStatus: (0, pg_core_1.varchar)('publication_status', { length: 20 }).default('draft'),\n    publishedAt: (0, pg_core_1.timestamp)('published_at'),\n    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),\n    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()\n});\n// Proxy Assignments\nexports.proxyAssignments = (0, pg_core_1.pgTable)('proxy_assignments', {\n    id: (0, pg_core_1.uuid)('id').defaultRandom().primaryKey(),\n    personaId: (0, pg_core_1.uuid)('persona_id').references(() => exports.expertPersonas.id, { onDelete: 'cascade' }).unique(),\n    // Proxy Configuration\n    proxyProvider: (0, pg_core_1.varchar)('proxy_provider', { length: 50 }).default('proxy-cheap'),\n    proxyType: (0, pg_core_1.varchar)('proxy_type', { length: 20 }).default('residential'),\n    proxyLocation: (0, pg_core_1.varchar)('proxy_location', { length: 50 }).notNull(),\n    // Connection Details (Encrypted)\n    proxyHostEncrypted: (0, pg_core_1.text)('proxy_host_encrypted').notNull(),\n    proxyPortEncrypted: (0, pg_core_1.text)('proxy_port_encrypted').notNull(),\n    proxyUsernameEncrypted: (0, pg_core_1.text)('proxy_username_encrypted').notNull(),\n    proxyPasswordEncrypted: (0, pg_core_1.text)('proxy_password_encrypted').notNull(),\n    // Proxy Status\n    proxyStatus: (0, pg_core_1.varchar)('proxy_status', { length: 20 }).default('active'),\n    lastHealthCheck: (0, pg_core_1.timestamp)('last_health_check'),\n    healthCheckStatus: (0, pg_core_1.varchar)('health_check_status', { length: 20 }),\n    // Performance Metrics\n    connectionSuccessRate: (0, pg_core_1.decimal)('connection_success_rate', { precision: 5, scale: 2 }).default('0.00'),\n    averageResponseTime: (0, pg_core_1.integer)('average_response_time'),\n    // Metadata\n    assignedAt: (0, pg_core_1.timestamp)('assigned_at').defaultNow(),\n    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),\n    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()\n});\n// Indexes\nexports.expertPersonasNameIdx = (0, pg_core_1.index)('idx_expert_personas_name').on(exports.expertPersonas.expertName);\nexports.expertPersonasStatusIdx = (0, pg_core_1.index)('idx_expert_personas_status').on(exports.expertPersonas.expertStatus);\nexports.expertPersonasAuthorityIdx = (0, pg_core_1.index)('idx_expert_personas_authority').on(exports.expertPersonas.authorityLevel);\nexports.geoPlatformAccountsPersonaIdx = (0, pg_core_1.index)('idx_geo_platform_accounts_persona').on(exports.geoPlatformAccounts.personaId);\nexports.geoPlatformAccountsPlatformIdx = (0, pg_core_1.index)('idx_geo_platform_accounts_platform').on(exports.geoPlatformAccounts.platformType);\nexports.contentPublicationsPersonaIdx = (0, pg_core_1.index)('idx_content_publications_persona').on(exports.authorityContentPublications.personaId);\nexports.contentPublicationsPlatformIdx = (0, pg_core_1.index)('idx_content_publications_platform').on(exports.authorityContentPublications.platformAccountId);\nexports.proxyAssignmentsPersonaIdx = (0, pg_core_1.index)('idx_proxy_assignments_persona').on(exports.proxyAssignments.personaId);\n//# sourceMappingURL=schema.js.map","size_bytes":13020},"drizzle.config.ts":{"content":"import type { Config } from 'drizzle-kit';\nimport * as dotenv from 'dotenv';\n\ndotenv.config();\n\nexport default {\n  schema: './src/shared/schema.ts',\n  out: './drizzle',\n  driver: 'pg',\n  dbCredentials: {\n    connectionString: process.env.DATABASE_URL!,\n  },\n} satisfies Config;","size_bytes":277},"replit.md":{"content":"# GEO Expert Authority App\n\n## Project Overview\n\nThis is a Philippines real estate expert authority lead generation system designed to generate qualified consultation requests through AI citations and expert content positioning across multiple platforms.\n\n## Current Status\n\n**Successfully deployed and running** ✅\n\n- **Backend API**: Express.js with TypeScript running on port 3001\n- **Frontend**: React with TypeScript and Tailwind CSS running on port 5000\n- **Database**: PostgreSQL with Drizzle ORM schema implemented\n- **Workflows**: Configured and running both services concurrently\n\n## Architecture\n\n### Technology Stack\n- **Backend**: Node.js, Express.js, TypeScript, PostgreSQL, Drizzle ORM\n- **Frontend**: React 18, TypeScript, Vite, Tailwind CSS, React Query\n- **Database**: PostgreSQL with expert personas, platform accounts, and content tables\n- **Build System**: TypeScript compilation with Vite bundling\n\n### Key Components\n\n1. **Expert Personas Management**: Create and manage Philippines real estate expert profiles\n2. **GEO Platform Accounts**: Manage social media accounts across Medium, Reddit, Quora, Facebook, LinkedIn\n3. **Authority Content**: AI citation-optimized content creation and management\n4. **Lead Generation Tracking**: Consultation request and referral attribution\n\n## Database Schema\n\nCore tables implemented:\n- `admin_users` - System administrators\n- `expert_personas` - Philippines real estate expert profiles\n- `geo_platform_accounts` - Social media platform accounts\n- `authority_content_publications` - Expert content pieces\n- `proxy_assignments` - IP management for expert authenticity\n\n## API Endpoints\n\nBase URL: `/api`\n\n- **Expert Personas**: `/api/expert-personas`\n- **Platform Accounts**: `/api/geo-platform-accounts` \n- **Authority Content**: `/api/authority-content`\n\nAll endpoints support CRUD operations with proper validation and error handling.\n\n## Recent Changes\n\n**2024-09-14**: Initial project setup completed\n- Database schema created and migrated\n- Backend API with TypeScript and Express.js\n- React frontend with expert dashboard\n- Workflows configured for development environment\n- Deployment configuration set for production\n\n## User Preferences\n\n- Clean, professional interface optimized for expert authority building\n- Focus on Philippines real estate market specialization\n- AI citation optimization as primary growth strategy\n- Lead generation through expert consultation requests\n\n## Next Steps\n\n1. Implement expert persona creation forms\n2. Add platform account connection workflows\n3. Build content creation and optimization tools\n4. Integrate proxy management system\n5. Add analytics and performance tracking dashboards\n\n## Development\n\n- **Development**: `npm run dev` (runs both frontend and backend)\n- **Build**: `npm run build` \n- **Database**: `npm run db:push` for schema updates\n\n## Environment\n\n- **Node.js**: 20+\n- **Database**: PostgreSQL (configured via DATABASE_URL)\n- **Frontend Port**: 5000 (required for Replit proxy)\n- **Backend Port**: 3001","size_bytes":3028},"src/client/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}","size_bytes":79},"src/client/src/App.tsx":{"content":"import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\nimport { Dashboard } from './pages/Dashboard'\nimport { ExpertPersonas } from './pages/ExpertPersonas'\nimport { PlatformAccounts } from './pages/PlatformAccounts'\nimport { AuthorityContent } from './pages/AuthorityContent'\nimport { Navigation } from './components/Navigation'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <main className=\"container mx-auto px-4 py-8\">\n          <Routes>\n            <Route path=\"/\" element={<Dashboard />} />\n            <Route path=\"/expert-personas\" element={<ExpertPersonas />} />\n            <Route path=\"/platform-accounts\" element={<PlatformAccounts />} />\n            <Route path=\"/authority-content\" element={<AuthorityContent />} />\n          </Routes>\n        </main>\n      </div>\n    </Router>\n  )\n}\n\nexport default App","size_bytes":912},"src/client/src/components/Navigation.tsx":{"content":"import { Link, useLocation } from 'react-router-dom'\nimport { Users, Globe, FileText, Home } from 'lucide-react'\n\nexport function Navigation() {\n  const location = useLocation()\n  \n  const navItems = [\n    { path: '/', label: 'Dashboard', icon: Home },\n    { path: '/expert-personas', label: 'Expert Personas', icon: Users },\n    { path: '/platform-accounts', label: 'Platform Accounts', icon: Globe },\n    { path: '/authority-content', label: 'Content', icon: FileText },\n  ]\n  \n  return (\n    <nav className=\"bg-white border-b border-gray-200\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center space-x-8\">\n            <div className=\"font-bold text-xl text-philippines-blue\">\n              GEO Expert Authority\n            </div>\n            \n            <div className=\"flex space-x-4\">\n              {navItems.map((item) => {\n                const Icon = item.icon\n                const isActive = location.pathname === item.path\n                \n                return (\n                  <Link\n                    key={item.path}\n                    to={item.path}\n                    className={`flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium transition-colors ${\n                      isActive\n                        ? 'bg-philippines-blue text-white'\n                        : 'text-gray-700 hover:bg-gray-100'\n                    }`}\n                  >\n                    <Icon size={16} />\n                    <span>{item.label}</span>\n                  </Link>\n                )\n              })}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <span className=\"text-sm text-gray-600\">\n              Philippines Real Estate Expert System\n            </span>\n          </div>\n        </div>\n      </div>\n    </nav>\n  )\n}","size_bytes":1930},"src/client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  body {\n    font-family: system-ui, -apple-system, sans-serif;\n  }\n}\n\n@layer components {\n  .btn-primary {\n    @apply bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2;\n  }\n  \n  .btn-secondary {\n    @apply bg-gray-100 hover:bg-gray-200 text-gray-900 font-medium py-2 px-4 rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2;\n  }\n  \n  .card {\n    @apply bg-white rounded-lg border border-gray-200 shadow-sm;\n  }\n  \n  .form-input {\n    @apply w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500;\n  }\n  \n  .form-label {\n    @apply block text-sm font-medium text-gray-700 mb-2;\n  }\n}","size_bytes":900},"src/client/src/main.tsx":{"content":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport App from './App.tsx'\nimport './index.css'\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      refetchOnWindowFocus: false,\n    },\n  },\n})\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n)","size_bytes":553},"src/client/src/pages/AuthorityContent.tsx":{"content":"export function AuthorityContent() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold text-gray-900\">Authority Content</h1>\n        <p className=\"text-gray-600\">Manage AI citation-optimized expert content</p>\n      </div>\n      \n      <div className=\"card p-6 text-center\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Authority Content</h3>\n        <p className=\"text-gray-600 mb-4\">Create expert content to build authority and generate AI citations</p>\n        <button className=\"btn-primary\">Create Content</button>\n      </div>\n    </div>\n  )\n}","size_bytes":619},"src/client/src/pages/Dashboard.tsx":{"content":"import { Users, Globe, FileText, TrendingUp } from 'lucide-react'\n\nexport function Dashboard() {\n  const stats = [\n    {\n      title: 'Expert Personas',\n      value: '0',\n      icon: Users,\n      color: 'bg-blue-500',\n      description: 'Active real estate experts'\n    },\n    {\n      title: 'Platform Accounts', \n      value: '0',\n      icon: Globe,\n      color: 'bg-green-500',\n      description: 'Connected social accounts'\n    },\n    {\n      title: 'Content Published',\n      value: '0',\n      icon: FileText,\n      color: 'bg-purple-500',\n      description: 'Authority content pieces'\n    },\n    {\n      title: 'Monthly Consultations',\n      value: '0',\n      icon: TrendingUp,\n      color: 'bg-authority-gold',\n      description: 'Consultation requests'\n    }\n  ]\n  \n  return (\n    <div className=\"space-y-8\">\n      <div className=\"text-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          Philippines Real Estate Expert Authority Dashboard\n        </h1>\n        <p className=\"text-lg text-gray-600\">\n          AI Citation-Optimized Expert Authority Lead Generation System\n        </p>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {stats.map((stat) => {\n          const Icon = stat.icon\n          return (\n            <div key={stat.title} className=\"card p-6\">\n              <div className=\"flex items-center\">\n                <div className={`${stat.color} p-3 rounded-full`}>\n                  <Icon className=\"w-6 h-6 text-white\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">{stat.title}</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stat.value}</p>\n                </div>\n              </div>\n              <p className=\"mt-2 text-sm text-gray-500\">{stat.description}</p>\n            </div>\n          )\n        })}\n      </div>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        <div className=\"card p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            GEO Platform Strategy\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n              <div>\n                <span className=\"font-medium text-gray-900\">Medium</span>\n                <span className=\"ml-2 text-sm text-gray-600\">Phase 1 - Priority</span>\n              </div>\n              <span className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded\">\n                Ready to Setup\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n              <div>\n                <span className=\"font-medium text-gray-900\">Reddit</span>\n                <span className=\"ml-2 text-sm text-gray-600\">Phase 2 - High Priority</span>\n              </div>\n              <span className=\"px-2 py-1 bg-gray-100 text-gray-800 text-xs font-medium rounded\">\n                Pending\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n              <div>\n                <span className=\"font-medium text-gray-900\">Quora</span>\n                <span className=\"ml-2 text-sm text-gray-600\">Phase 3 - High Priority</span>\n              </div>\n              <span className=\"px-2 py-1 bg-gray-100 text-gray-800 text-xs font-medium rounded\">\n                Pending\n              </span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"card p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Expert Authority Status\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"text-center py-8\">\n              <div className=\"text-gray-400 mb-2\">\n                <Users className=\"w-12 h-12 mx-auto\" />\n              </div>\n              <h4 className=\"text-lg font-medium text-gray-900 mb-2\">\n                No Expert Personas Yet\n              </h4>\n              <p className=\"text-gray-600 mb-4\">\n                Create your first Philippines real estate expert to start building authority\n              </p>\n              <button className=\"btn-primary\">\n                Create Expert Persona\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":4457},"src/client/src/pages/ExpertPersonas.tsx":{"content":"import { ExpertDashboard } from '../components/ExpertDashboard';\n\nexport function ExpertPersonas() {\n  return <ExpertDashboard />;\n}","size_bytes":132},"src/client/src/pages/PlatformAccounts.tsx":{"content":"export function PlatformAccounts() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold text-gray-900\">Platform Accounts</h1>\n        <p className=\"text-gray-600\">Manage GEO platform accounts for expert authority building</p>\n      </div>\n      \n      <div className=\"card p-6 text-center\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Platform Accounts</h3>\n        <p className=\"text-gray-600 mb-4\">Connect platform accounts to start building expert presence</p>\n        <button className=\"btn-primary\">Connect Platform Account</button>\n      </div>\n    </div>\n  )\n}","size_bytes":637},"src/client/tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        'philippines-blue': '#0038a8',\n        'philippines-red': '#ce1126',\n        'authority-gold': '#ffd700',\n      }\n    },\n  },\n  plugins: [],\n}","size_bytes":324},"src/client/vite.config.ts":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport path from 'path'\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n  build: {\n    outDir: '../../dist/client'\n  },\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    allowedHosts: ['localhost', '127.0.0.1', '0.0.0.0', 'eb792006-89d8-4fe1-9b36-b543288e264f-00-3tiqrevepzk57.sisko.replit.dev'],\n    proxy: {\n      '/api': {\n        target: 'http://localhost:3001',\n        changeOrigin: true,\n        secure: false\n      }\n    }\n  },\n  preview: {\n    host: '0.0.0.0',\n    port: 5000\n  }\n})","size_bytes":659},"src/server/db/index.ts":{"content":"import { drizzle } from 'drizzle-orm/node-postgres';\nimport { Pool } from 'pg';\nimport * as schema from '../../shared/schema';\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\nexport const db = drizzle(pool, { schema });\n\nexport * from '../../shared/schema';","size_bytes":285},"src/server/index.ts":{"content":"import express from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport { config } from 'dotenv';\nimport path from 'path';\nimport { expertPersonasRouter } from './routes/expertPersonas';\nimport { geoPlatformAccountsRouter } from './routes/geoPlatformAccounts';\nimport { authorityContentRouter } from './routes/authorityContent';\nimport { webhooksRouter } from './routes/webhooks';\nimport { dashboardRouter } from './routes/dashboard';\nimport proxyAssignmentsRouter from './routes/proxyAssignments';\nimport { errorHandler } from './middleware/errorHandler';\nimport { captureRawBody } from './middleware/twilioSignatureValidation';\nimport { logger } from './services/logger';\nimport { db, expertPersonas } from './db';\n\nconfig();\n\n// Fail fast if DATABASE_URL is not set\nif (!process.env.DATABASE_URL) {\n  logger.error('DATABASE_URL environment variable is required');\n  process.exit(1);\n}\n\nconst app = express();\nconst port = process.env.PORT || (process.env.NODE_ENV === 'production' ? 5000 : 3001);\n\n// Security and CORS middleware\napp.use(helmet());\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production' \n    ? process.env.FRONTEND_URL || 'https://your-domain.com'\n    : ['http://localhost:5000', 'http://0.0.0.0:5000', 'http://127.0.0.1:5000', 'http://localhost:3000', 'http://0.0.0.0:3000', 'http://127.0.0.1:3000'],\n  credentials: true\n}));\n\n// Raw body capture for webhook signature validation (must be before express.json)\napp.use('/api/webhooks', captureRawBody);\n\n// Body parsing middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Request logging\napp.use((req, res, next) => {\n  logger.info(`${req.method} ${req.path}`, {\n    ip: req.ip,\n    userAgent: req.get('User-Agent')\n  });\n  next();\n});\n\n// Health check endpoint with database connectivity check\napp.get('/health', async (req, res) => {\n  try {\n    // Simple database connectivity check using existing table\n    await db.select().from(expertPersonas).limit(1);\n    \n    res.json({ \n      status: 'ok', \n      timestamp: new Date().toISOString(),\n      service: 'geo-expert-authority-app',\n      database: 'connected'\n    });\n  } catch (error) {\n    logger.error('Database health check failed:', error);\n    res.status(503).json({ \n      status: 'error', \n      timestamp: new Date().toISOString(),\n      service: 'geo-expert-authority-app',\n      database: 'disconnected',\n      error: 'Database connection failed'\n    });\n  }\n});\n\n// In production, serve static files from the built client\nif (process.env.NODE_ENV === 'production') {\n  const clientDistPath = path.join(__dirname, '..', 'client');\n  app.use(express.static(clientDistPath));\n  \n  // Handle client-side routing - serve index.html for non-API routes\n  app.get('*', (req, res, next) => {\n    if (req.path.startsWith('/api') || req.path.startsWith('/health')) {\n      next();\n    } else {\n      res.sendFile(path.join(clientDistPath, 'index.html'));\n    }\n  });\n}\n\n// API routes\napp.use('/api/expert-personas', expertPersonasRouter);\napp.use('/api/geo-platform-accounts', geoPlatformAccountsRouter);\napp.use('/api/authority-content', authorityContentRouter);\napp.use('/api/proxy-assignments', proxyAssignmentsRouter);\napp.use('/api/webhooks', webhooksRouter);\napp.use('/api/dashboard', dashboardRouter);\n\n// Error handling\napp.use(errorHandler);\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({ \n    error: 'Not Found',\n    message: `Route ${req.originalUrl} not found`,\n    timestamp: new Date().toISOString()\n  });\n});\n\napp.listen(port, () => {\n  logger.info(`🚀 Server running on port ${port}`);\n  logger.info(`📊 Health check available at http://localhost:${port}/health`);\n  logger.info(`🏗️  API endpoints available at http://localhost:${port}/api`);\n});\n\nexport default app;","size_bytes":3807},"src/server/middleware/errorHandler.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { logger } from '../services/logger';\n\nexport interface CustomError extends Error {\n  statusCode?: number;\n  code?: string;\n}\n\nexport const errorHandler = (\n  err: CustomError,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  logger.error('Error occurred:', {\n    error: err.message,\n    stack: err.stack,\n    url: req.url,\n    method: req.method,\n    statusCode: err.statusCode\n  });\n\n  const statusCode = err.statusCode || 500;\n  const message = err.message || 'Internal Server Error';\n\n  res.status(statusCode).json({\n    error: true,\n    message,\n    statusCode,\n    timestamp: new Date().toISOString(),\n    path: req.path\n  });\n};","size_bytes":715},"src/server/routes/authorityContent.ts":{"content":"import { Router, Request, Response, NextFunction } from 'express';\nimport { db, authorityContentPublications } from '../db';\nimport { eq, and } from 'drizzle-orm';\nimport { logger } from '../services/logger';\nimport { z } from 'zod';\n\nconst router = Router();\n\n// Validation schema\nconst createContentSchema = z.object({\n  personaId: z.string().uuid(),\n  platformAccountId: z.string().uuid(),\n  contentTitle: z.string().min(1),\n  contentType: z.enum(['article', 'answer', 'post', 'comment', 'guide']),\n  contentCategory: z.string().optional(),\n  contentUrl: z.string().url().optional(),\n  contentLength: z.number().int().min(0).optional(),\n  publicationStatus: z.enum(['draft', 'published', 'scheduled']).default('draft')\n});\n\n// Get content for a persona\nrouter.get('/persona/:personaId', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { personaId } = req.params;\n    const { status, platform } = req.query;\n    \n    let query = db.select().from(authorityContentPublications)\n      .where(eq(authorityContentPublications.personaId, personaId));\n    \n    if (status) {\n      query = query.where(\n        and(\n          eq(authorityContentPublications.personaId, personaId),\n          eq(authorityContentPublications.publicationStatus, status as string)\n        )\n      );\n    }\n    \n    const content = await query;\n    \n    logger.info(`Retrieved ${content.length} content items for persona: ${personaId}`);\n    res.json({\n      success: true,\n      data: content,\n      count: content.length\n    });\n  } catch (error) {\n    logger.error(`Error fetching content for persona ${req.params.personaId}:`, error);\n    next(error);\n  }\n});\n\n// Get all authority content\nrouter.get('/', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { status, type } = req.query;\n    \n    let query = db.select().from(authorityContentPublications);\n    \n    if (status) {\n      query = query.where(eq(authorityContentPublications.publicationStatus, status as string));\n    }\n    \n    const content = await query;\n    \n    logger.info(`Retrieved ${content.length} content items`);\n    res.json({\n      success: true,\n      data: content,\n      count: content.length\n    });\n  } catch (error) {\n    logger.error('Error fetching authority content:', error);\n    next(error);\n  }\n});\n\n// Get content by ID\nrouter.get('/:id', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { id } = req.params;\n    \n    const content = await db.select()\n      .from(authorityContentPublications)\n      .where(eq(authorityContentPublications.id, id))\n      .limit(1);\n    \n    if (content.length === 0) {\n      return res.status(404).json({\n        success: false,\n        message: 'Content not found'\n      });\n    }\n    \n    logger.info(`Retrieved content: ${id}`);\n    res.json({\n      success: true,\n      data: content[0]\n    });\n  } catch (error) {\n    logger.error(`Error fetching content ${req.params.id}:`, error);\n    next(error);\n  }\n});\n\n// Create new content\nrouter.post('/', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const validatedData = createContentSchema.parse(req.body);\n    \n    const result = await db.insert(authorityContentPublications)\n      .values(validatedData)\n      .returning();\n    \n    logger.info(`Created content: ${result[0].contentTitle} (${result[0].id})`);\n    res.status(201).json({\n      success: true,\n      data: result[0],\n      message: 'Content created successfully'\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        success: false,\n        message: 'Validation error',\n        errors: error.errors\n      });\n    }\n    \n    logger.error('Error creating content:', error);\n    next(error);\n  }\n});\n\n// Update content\nrouter.put('/:id', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { id } = req.params;\n    const updates = req.body;\n    \n    const result = await db.update(authorityContentPublications)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(authorityContentPublications.id, id))\n      .returning();\n    \n    if (result.length === 0) {\n      return res.status(404).json({\n        success: false,\n        message: 'Content not found'\n      });\n    }\n    \n    logger.info(`Updated content: ${id}`);\n    res.json({\n      success: true,\n      data: result[0],\n      message: 'Content updated successfully'\n    });\n  } catch (error) {\n    logger.error(`Error updating content ${req.params.id}:`, error);\n    next(error);\n  }\n});\n\n// Delete content\nrouter.delete('/:id', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { id } = req.params;\n    \n    const result = await db.delete(authorityContentPublications)\n      .where(eq(authorityContentPublications.id, id))\n      .returning();\n    \n    if (result.length === 0) {\n      return res.status(404).json({\n        success: false,\n        message: 'Content not found'\n      });\n    }\n    \n    logger.info(`Deleted content: ${id}`);\n    res.json({\n      success: true,\n      message: 'Content deleted successfully'\n    });\n  } catch (error) {\n    logger.error(`Error deleting content ${req.params.id}:`, error);\n    next(error);\n  }\n});\n\nexport { router as authorityContentRouter };","size_bytes":5302},"src/server/routes/expertPersonas.ts":{"content":"import { Router, Request, Response, NextFunction } from 'express';\nimport { db, expertPersonas, ExpertPersona, NewExpertPersona } from '../db';\nimport { eq } from 'drizzle-orm';\nimport { logger } from '../services/logger';\nimport { z } from 'zod';\n\nconst router = Router();\n\n// Validation schemas\nconst createExpertPersonaSchema = z.object({\n  expertName: z.string().min(1).max(100),\n  expertiseFocus: z.string().min(1).max(50),\n  targetBuyerSegments: z.array(z.string()),\n  primaryMarketLocation: z.string().min(1).max(50),\n  geoContentSpecializations: z.array(z.string()),\n  authorityBuildingTopics: z.array(z.string()),\n  citationWorthyExpertise: z.array(z.string()),\n  platformExpertiseFocus: z.object({\n    medium: z.object({\n      active: z.boolean(),\n      contentTypes: z.array(z.string())\n    }).optional(),\n    reddit: z.object({\n      active: z.boolean(),\n      subreddits: z.array(z.string())\n    }).optional(),\n    quora: z.object({\n      active: z.boolean(),\n      topics: z.array(z.string())\n    }).optional()\n  }),\n  contentPublicationSchedule: z.object({\n    frequency: z.string(),\n    timezone: z.string().default('Asia/Manila')\n  }),\n  expertVoiceCharacteristics: z.object({\n    tone: z.string(),\n    expertise_level: z.string(),\n    target_audience: z.string()\n  }),\n  browserFingerprintConfig: z.object({\n    userAgent: z.string().optional(),\n    viewport: z.object({\n      width: z.number(),\n      height: z.number()\n    }).optional()\n  })\n});\n\n// Get all expert personas\nrouter.get('/', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const personas = await db.select().from(expertPersonas);\n    \n    logger.info(`Retrieved ${personas.length} expert personas`);\n    res.json({\n      success: true,\n      data: personas,\n      count: personas.length\n    });\n  } catch (error) {\n    logger.error('Error fetching expert personas:', error);\n    next(error);\n  }\n});\n\n// Get expert persona by ID\nrouter.get('/:id', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { id } = req.params;\n    \n    const persona = await db.select()\n      .from(expertPersonas)\n      .where(eq(expertPersonas.id, id))\n      .limit(1);\n    \n    if (persona.length === 0) {\n      return res.status(404).json({\n        success: false,\n        message: 'Expert persona not found'\n      });\n    }\n    \n    logger.info(`Retrieved expert persona: ${id}`);\n    res.json({\n      success: true,\n      data: persona[0]\n    });\n  } catch (error) {\n    logger.error(`Error fetching expert persona ${req.params.id}:`, error);\n    next(error);\n  }\n});\n\n// Create new expert persona\nrouter.post('/', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const validatedData = createExpertPersonaSchema.parse(req.body);\n    \n    // Create encrypted placeholders for sensitive data\n    const newPersona: NewExpertPersona = {\n      ...validatedData,\n      professionalBackgroundEncrypted: 'encrypted_placeholder',\n      expertiseCredentialsEncrypted: 'encrypted_placeholder',\n      marketExperienceEncrypted: 'encrypted_placeholder',\n      personaEncryptionKeyId: `key_${Date.now()}`\n    };\n    \n    const result = await db.insert(expertPersonas)\n      .values(newPersona)\n      .returning();\n    \n    logger.info(`Created expert persona: ${result[0].expertName} (${result[0].id})`);\n    res.status(201).json({\n      success: true,\n      data: result[0],\n      message: 'Expert persona created successfully'\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        success: false,\n        message: 'Validation error',\n        errors: error.errors\n      });\n    }\n    \n    logger.error('Error creating expert persona:', error);\n    next(error);\n  }\n});\n\n// Update expert persona\nrouter.put('/:id', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { id } = req.params;\n    const updates = req.body;\n    \n    const result = await db.update(expertPersonas)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(expertPersonas.id, id))\n      .returning();\n    \n    if (result.length === 0) {\n      return res.status(404).json({\n        success: false,\n        message: 'Expert persona not found'\n      });\n    }\n    \n    logger.info(`Updated expert persona: ${id}`);\n    res.json({\n      success: true,\n      data: result[0],\n      message: 'Expert persona updated successfully'\n    });\n  } catch (error) {\n    logger.error(`Error updating expert persona ${req.params.id}:`, error);\n    next(error);\n  }\n});\n\n// Delete expert persona\nrouter.delete('/:id', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { id } = req.params;\n    \n    const result = await db.delete(expertPersonas)\n      .where(eq(expertPersonas.id, id))\n      .returning();\n    \n    if (result.length === 0) {\n      return res.status(404).json({\n        success: false,\n        message: 'Expert persona not found'\n      });\n    }\n    \n    logger.info(`Deleted expert persona: ${id}`);\n    res.json({\n      success: true,\n      message: 'Expert persona deleted successfully'\n    });\n  } catch (error) {\n    logger.error(`Error deleting expert persona ${req.params.id}:`, error);\n    next(error);\n  }\n});\n\nexport { router as expertPersonasRouter };","size_bytes":5286},"src/server/routes/geoPlatformAccounts.ts":{"content":"import { Router, Request, Response, NextFunction } from 'express';\nimport { db, geoPlatformAccounts, GeoPlatformAccount } from '../db';\nimport { eq } from 'drizzle-orm';\nimport { logger } from '../services/logger';\nimport { z } from 'zod';\n\nconst router = Router();\n\n// Validation schema\nconst createPlatformAccountSchema = z.object({\n  personaId: z.string().uuid(),\n  platformType: z.enum(['medium', 'reddit', 'quora', 'facebook', 'linkedin']),\n  platformPriority: z.number().int().min(1).max(10),\n  username: z.string().min(1).max(100),\n  displayName: z.string().max(100).optional(),\n  expertBio: z.string().optional(),\n  expertCredentials: z.string().optional(),\n  platformGeoSettings: z.object({\n    targetRegions: z.array(z.string()),\n    contentLanguage: z.string().default('en-PH'),\n    timezoneFocus: z.string().default('Asia/Manila')\n  }),\n  contentAuthorityStrategy: z.object({\n    contentTypes: z.array(z.string()),\n    publicationFrequency: z.string(),\n    expertiseAreas: z.array(z.string())\n  }),\n  expertEngagementApproach: z.object({\n    responseStyle: z.string(),\n    engagementLevel: z.enum(['low', 'medium', 'high']),\n    communityParticipation: z.boolean()\n  }),\n  citationOptimizationConfig: z.object({\n    keywordTargets: z.array(z.string()),\n    contentDepth: z.enum(['comprehensive', 'detailed', 'summary']),\n    authoritySignals: z.array(z.string())\n  })\n});\n\n// Get platform accounts for a persona\nrouter.get('/persona/:personaId', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { personaId } = req.params;\n    \n    const accounts = await db.select()\n      .from(geoPlatformAccounts)\n      .where(eq(geoPlatformAccounts.personaId, personaId));\n    \n    logger.info(`Retrieved ${accounts.length} platform accounts for persona: ${personaId}`);\n    res.json({\n      success: true,\n      data: accounts,\n      count: accounts.length\n    });\n  } catch (error) {\n    logger.error(`Error fetching platform accounts for persona ${req.params.personaId}:`, error);\n    next(error);\n  }\n});\n\n// Get all platform accounts\nrouter.get('/', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { platform, status } = req.query;\n    \n    let query = db.select().from(geoPlatformAccounts);\n    \n    if (platform) {\n      query = query.where(eq(geoPlatformAccounts.platformType, platform as string));\n    }\n    \n    const accounts = await query;\n    \n    logger.info(`Retrieved ${accounts.length} platform accounts`);\n    res.json({\n      success: true,\n      data: accounts,\n      count: accounts.length\n    });\n  } catch (error) {\n    logger.error('Error fetching platform accounts:', error);\n    next(error);\n  }\n});\n\n// Get platform account by ID\nrouter.get('/:id', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { id } = req.params;\n    \n    const account = await db.select()\n      .from(geoPlatformAccounts)\n      .where(eq(geoPlatformAccounts.id, id))\n      .limit(1);\n    \n    if (account.length === 0) {\n      return res.status(404).json({\n        success: false,\n        message: 'Platform account not found'\n      });\n    }\n    \n    logger.info(`Retrieved platform account: ${id}`);\n    res.json({\n      success: true,\n      data: account[0]\n    });\n  } catch (error) {\n    logger.error(`Error fetching platform account ${req.params.id}:`, error);\n    next(error);\n  }\n});\n\n// Create new platform account\nrouter.post('/', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const validatedData = createPlatformAccountSchema.parse(req.body);\n    \n    const newAccount = {\n      ...validatedData,\n      credentialsEncrypted: 'encrypted_placeholder', // Will be properly encrypted in production\n      accountStatus: 'building' as const,\n      platformAuthorityLevel: 'newcomer' as const,\n      expertVerificationStatus: 'unverified' as const\n    };\n    \n    const result = await db.insert(geoPlatformAccounts)\n      .values(newAccount)\n      .returning();\n    \n    logger.info(`Created platform account: ${result[0].username} on ${result[0].platformType} (${result[0].id})`);\n    res.status(201).json({\n      success: true,\n      data: result[0],\n      message: 'Platform account created successfully'\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        success: false,\n        message: 'Validation error',\n        errors: error.errors\n      });\n    }\n    \n    logger.error('Error creating platform account:', error);\n    next(error);\n  }\n});\n\n// Update platform account\nrouter.put('/:id', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { id } = req.params;\n    const updates = req.body;\n    \n    const result = await db.update(geoPlatformAccounts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(geoPlatformAccounts.id, id))\n      .returning();\n    \n    if (result.length === 0) {\n      return res.status(404).json({\n        success: false,\n        message: 'Platform account not found'\n      });\n    }\n    \n    logger.info(`Updated platform account: ${id}`);\n    res.json({\n      success: true,\n      data: result[0],\n      message: 'Platform account updated successfully'\n    });\n  } catch (error) {\n    logger.error(`Error updating platform account ${req.params.id}:`, error);\n    next(error);\n  }\n});\n\nexport { router as geoPlatformAccountsRouter };","size_bytes":5390},"src/server/services/logger.ts":{"content":"import winston from 'winston';\n\nconst logFormat = winston.format.combine(\n  winston.format.timestamp(),\n  winston.format.errors({ stack: true }),\n  winston.format.json()\n);\n\nexport const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: logFormat,\n  defaultMeta: { service: 'geo-expert-authority-app' },\n  transports: [\n    // Write all logs with importance level of 'error' or higher to 'error.log'\n    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),\n    // Write all logs with importance level of 'info' or higher to 'combined.log'\n    new winston.transports.File({ filename: 'logs/combined.log' })\n  ]\n});\n\n// If not in production, also log to the console\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.combine(\n      winston.format.colorize(),\n      winston.format.simple()\n    )\n  }));\n}","size_bytes":926},"src/shared/schema.d.ts":{"content":"export declare const adminUsers: import(\"drizzle-orm/pg-core\").PgTableWithColumns<{\n    name: \"admin_users\";\n    schema: undefined;\n    columns: {\n        id: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"id\";\n            tableName: \"admin_users\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        username: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"username\";\n            tableName: \"admin_users\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        email: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"email\";\n            tableName: \"admin_users\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        passwordHash: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"password_hash\";\n            tableName: \"admin_users\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        fullName: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"full_name\";\n            tableName: \"admin_users\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        role: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"role\";\n            tableName: \"admin_users\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        status: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"status\";\n            tableName: \"admin_users\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        lastLogin: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"last_login\";\n            tableName: \"admin_users\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        createdAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"created_at\";\n            tableName: \"admin_users\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        updatedAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"updated_at\";\n            tableName: \"admin_users\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n    };\n    dialect: \"pg\";\n}>;\nexport declare const expertPersonas: import(\"drizzle-orm/pg-core\").PgTableWithColumns<{\n    name: \"expert_personas\";\n    schema: undefined;\n    columns: {\n        id: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"id\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        adminUserId: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"admin_user_id\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        expertName: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_name\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        expertStatus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_status\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        expertiseFocus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expertise_focus\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        targetBuyerSegments: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"target_buyer_segments\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        authorityLevel: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"authority_level\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        professionalBackgroundEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"professional_background_encrypted\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        expertiseCredentialsEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expertise_credentials_encrypted\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        marketExperienceEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"market_experience_encrypted\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        primaryMarketLocation: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"primary_market_location\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        secondaryMarketAreas: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"secondary_market_areas\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        localMarketKnowledgeDepth: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"local_market_knowledge_depth\";\n            tableName: \"expert_personas\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        timezone: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"timezone\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        geoContentSpecializations: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"geo_content_specializations\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        authorityBuildingTopics: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"authority_building_topics\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        citationWorthyExpertise: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"citation_worthy_expertise\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        platformExpertiseFocus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"platform_expertise_focus\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        contentPublicationSchedule: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"content_publication_schedule\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        expertVoiceCharacteristics: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_voice_characteristics\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        personaEncryptionKeyId: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"persona_encryption_key_id\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        browserFingerprintConfig: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"browser_fingerprint_config\";\n            tableName: \"expert_personas\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        currentAuthorityScore: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"current_authority_score\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        estimatedAiCitations: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"estimated_ai_citations\";\n            tableName: \"expert_personas\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        expertRecognitionSignals: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_recognition_signals\";\n            tableName: \"expert_personas\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        thoughtLeadershipReach: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"thought_leadership_reach\";\n            tableName: \"expert_personas\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        monthlyConsultationRequests: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"monthly_consultation_requests\";\n            tableName: \"expert_personas\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        consultationToReferralRate: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"consultation_to_referral_rate\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        averageConsultationValue: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"average_consultation_value\";\n            tableName: \"expert_personas\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        createdAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"created_at\";\n            tableName: \"expert_personas\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        updatedAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"updated_at\";\n            tableName: \"expert_personas\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        lastExpertActivity: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"last_expert_activity\";\n            tableName: \"expert_personas\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n    };\n    dialect: \"pg\";\n}>;\nexport declare const geoPlatformAccounts: import(\"drizzle-orm/pg-core\").PgTableWithColumns<{\n    name: \"geo_platform_accounts\";\n    schema: undefined;\n    columns: {\n        id: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"id\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        personaId: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"persona_id\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        platformType: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"platform_type\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        platformPriority: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"platform_priority\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        geoOptimizationLevel: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"geo_optimization_level\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        username: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"username\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        displayName: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"display_name\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        expertBio: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_bio\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        expertCredentials: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_credentials\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        profileOptimizationScore: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"profile_optimization_score\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        credentialsEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"credentials_encrypted\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        authTokensEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"auth_tokens_encrypted\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        accountStatus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"account_status\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        platformAuthorityLevel: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"platform_authority_level\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        expertVerificationStatus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_verification_status\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        accountReputationScore: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"account_reputation_score\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        totalAuthorityContent: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"total_authority_content\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        averageContentEngagement: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"average_content_engagement\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        expertRecognitionSignals: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_recognition_signals\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        thoughtLeadershipIndicators: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"thought_leadership_indicators\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        platformGeoSettings: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"platform_geo_settings\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        contentAuthorityStrategy: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"content_authority_strategy\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        expertEngagementApproach: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_engagement_approach\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        citationOptimizationConfig: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"citation_optimization_config\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"json\";\n            columnType: \"PgJsonb\";\n            data: unknown;\n            driverParam: unknown;\n            notNull: true;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        monthlyExpertInquiries: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"monthly_expert_inquiries\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        consultationRequests: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"consultation_requests\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        authorityConversionRate: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"authority_conversion_rate\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        leadQualityFromAuthority: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"lead_quality_from_authority\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        createdAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"created_at\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        updatedAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"updated_at\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        lastActivity: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"last_activity\";\n            tableName: \"geo_platform_accounts\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n    };\n    dialect: \"pg\";\n}>;\nexport declare const authorityContentPublications: import(\"drizzle-orm/pg-core\").PgTableWithColumns<{\n    name: \"authority_content_publications\";\n    schema: undefined;\n    columns: {\n        id: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"id\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        personaId: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"persona_id\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        platformAccountId: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"platform_account_id\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        contentTitle: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"content_title\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        contentType: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"content_type\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        contentCategory: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"content_category\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        contentUrl: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"content_url\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        contentLength: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"content_length\";\n            tableName: \"authority_content_publications\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        authorityScore: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"authority_score\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        aiCitationPotentialScore: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"ai_citation_potential_score\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        viewCount: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"view_count\";\n            tableName: \"authority_content_publications\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        engagementCount: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"engagement_count\";\n            tableName: \"authority_content_publications\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        shareCount: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"share_count\";\n            tableName: \"authority_content_publications\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        expertRecognitionSignals: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"expert_recognition_signals\";\n            tableName: \"authority_content_publications\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        consultationInquiriesAttributed: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"consultation_inquiries_attributed\";\n            tableName: \"authority_content_publications\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        leadConversionsAttributed: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"lead_conversions_attributed\";\n            tableName: \"authority_content_publications\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        revenueAttributed: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"revenue_attributed\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        publicationStatus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"publication_status\";\n            tableName: \"authority_content_publications\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        publishedAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"published_at\";\n            tableName: \"authority_content_publications\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        createdAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"created_at\";\n            tableName: \"authority_content_publications\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        updatedAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"updated_at\";\n            tableName: \"authority_content_publications\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n    };\n    dialect: \"pg\";\n}>;\nexport declare const proxyAssignments: import(\"drizzle-orm/pg-core\").PgTableWithColumns<{\n    name: \"proxy_assignments\";\n    schema: undefined;\n    columns: {\n        id: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"id\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        personaId: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"persona_id\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgUUID\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        proxyProvider: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_provider\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        proxyType: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_type\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        proxyLocation: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_location\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        proxyHostEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_host_encrypted\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        proxyPortEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_port_encrypted\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        proxyUsernameEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_username_encrypted\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        proxyPasswordEncrypted: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_password_encrypted\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgText\";\n            data: string;\n            driverParam: string;\n            notNull: true;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        proxyStatus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"proxy_status\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        lastHealthCheck: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"last_health_check\";\n            tableName: \"proxy_assignments\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        healthCheckStatus: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"health_check_status\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgVarchar\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: false;\n            enumValues: [string, ...string[]];\n            baseColumn: never;\n        }, {}, {}>;\n        connectionSuccessRate: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"connection_success_rate\";\n            tableName: \"proxy_assignments\";\n            dataType: \"string\";\n            columnType: \"PgNumeric\";\n            data: string;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        averageResponseTime: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"average_response_time\";\n            tableName: \"proxy_assignments\";\n            dataType: \"number\";\n            columnType: \"PgInteger\";\n            data: number;\n            driverParam: string | number;\n            notNull: false;\n            hasDefault: false;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        assignedAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"assigned_at\";\n            tableName: \"proxy_assignments\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        createdAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"created_at\";\n            tableName: \"proxy_assignments\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n        updatedAt: import(\"drizzle-orm/pg-core\").PgColumn<{\n            name: \"updated_at\";\n            tableName: \"proxy_assignments\";\n            dataType: \"date\";\n            columnType: \"PgTimestamp\";\n            data: Date;\n            driverParam: string;\n            notNull: false;\n            hasDefault: true;\n            enumValues: undefined;\n            baseColumn: never;\n        }, {}, {}>;\n    };\n    dialect: \"pg\";\n}>;\nexport declare const expertPersonasNameIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport declare const expertPersonasStatusIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport declare const expertPersonasAuthorityIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport declare const geoPlatformAccountsPersonaIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport declare const geoPlatformAccountsPlatformIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport declare const contentPublicationsPersonaIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport declare const contentPublicationsPlatformIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport declare const proxyAssignmentsPersonaIdx: import(\"drizzle-orm/pg-core\").IndexBuilder;\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type NewAdminUser = typeof adminUsers.$inferInsert;\nexport type ExpertPersona = typeof expertPersonas.$inferSelect;\nexport type NewExpertPersona = typeof expertPersonas.$inferInsert;\nexport type GeoPlatformAccount = typeof geoPlatformAccounts.$inferSelect;\nexport type NewGeoPlatformAccount = typeof geoPlatformAccounts.$inferInsert;\nexport type AuthorityContentPublication = typeof authorityContentPublications.$inferSelect;\nexport type NewAuthorityContentPublication = typeof authorityContentPublications.$inferInsert;\nexport type ProxyAssignment = typeof proxyAssignments.$inferSelect;\nexport type NewProxyAssignment = typeof proxyAssignments.$inferInsert;\n//# sourceMappingURL=schema.d.ts.map","size_bytes":50231},"src/shared/schema.js":{"content":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.proxyAssignmentsPersonaIdx = exports.contentPublicationsPlatformIdx = exports.contentPublicationsPersonaIdx = exports.geoPlatformAccountsPlatformIdx = exports.geoPlatformAccountsPersonaIdx = exports.expertPersonasAuthorityIdx = exports.expertPersonasStatusIdx = exports.expertPersonasNameIdx = exports.proxyAssignments = exports.authorityContentPublications = exports.geoPlatformAccounts = exports.expertPersonas = exports.adminUsers = void 0;\nconst pg_core_1 = require(\"drizzle-orm/pg-core\");\n// Admin Users Table\nexports.adminUsers = (0, pg_core_1.pgTable)('admin_users', {\n    id: (0, pg_core_1.uuid)('id').defaultRandom().primaryKey(),\n    username: (0, pg_core_1.varchar)('username', { length: 50 }).notNull().unique(),\n    email: (0, pg_core_1.varchar)('email', { length: 255 }).notNull().unique(),\n    passwordHash: (0, pg_core_1.text)('password_hash').notNull(),\n    fullName: (0, pg_core_1.varchar)('full_name', { length: 100 }),\n    role: (0, pg_core_1.varchar)('role', { length: 20 }).default('admin'),\n    status: (0, pg_core_1.varchar)('status', { length: 20 }).default('active'),\n    lastLogin: (0, pg_core_1.timestamp)('last_login'),\n    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),\n    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()\n});\n// Expert Personas Table (Authority-Focused Real Estate Experts)\nexports.expertPersonas = (0, pg_core_1.pgTable)('expert_personas', {\n    id: (0, pg_core_1.uuid)('id').defaultRandom().primaryKey(),\n    adminUserId: (0, pg_core_1.uuid)('admin_user_id').references(() => exports.adminUsers.id, { onDelete: 'cascade' }),\n    // Core Expert Identity\n    expertName: (0, pg_core_1.varchar)('expert_name', { length: 100 }).notNull(),\n    expertStatus: (0, pg_core_1.varchar)('expert_status', { length: 20 }).default('developing'),\n    // Real Estate Expertise Specialization\n    expertiseFocus: (0, pg_core_1.varchar)('expertise_focus', { length: 50 }).notNull(),\n    targetBuyerSegments: (0, pg_core_1.jsonb)('target_buyer_segments').notNull(),\n    authorityLevel: (0, pg_core_1.varchar)('authority_level', { length: 20 }).default('emerging'),\n    // Expert Profile (Encrypted)\n    professionalBackgroundEncrypted: (0, pg_core_1.text)('professional_background_encrypted').notNull(),\n    expertiseCredentialsEncrypted: (0, pg_core_1.text)('expertise_credentials_encrypted').notNull(),\n    marketExperienceEncrypted: (0, pg_core_1.text)('market_experience_encrypted').notNull(),\n    // Geographic Expertise (Philippines Focus)\n    primaryMarketLocation: (0, pg_core_1.varchar)('primary_market_location', { length: 50 }).notNull(),\n    secondaryMarketAreas: (0, pg_core_1.jsonb)('secondary_market_areas').default([]),\n    localMarketKnowledgeDepth: (0, pg_core_1.integer)('local_market_knowledge_depth').default(1),\n    timezone: (0, pg_core_1.varchar)('timezone', { length: 50 }).default('Asia/Manila'),\n    // GEO Content Authority Configuration\n    geoContentSpecializations: (0, pg_core_1.jsonb)('geo_content_specializations').notNull(),\n    authorityBuildingTopics: (0, pg_core_1.jsonb)('authority_building_topics').notNull(),\n    citationWorthyExpertise: (0, pg_core_1.jsonb)('citation_worthy_expertise').notNull(),\n    // Platform Authority Strategy\n    platformExpertiseFocus: (0, pg_core_1.jsonb)('platform_expertise_focus').notNull(),\n    contentPublicationSchedule: (0, pg_core_1.jsonb)('content_publication_schedule').notNull(),\n    expertVoiceCharacteristics: (0, pg_core_1.jsonb)('expert_voice_characteristics').notNull(),\n    // Security Configuration\n    personaEncryptionKeyId: (0, pg_core_1.varchar)('persona_encryption_key_id', { length: 255 }).notNull(),\n    browserFingerprintConfig: (0, pg_core_1.jsonb)('browser_fingerprint_config').notNull(),\n    // Authority Building Performance\n    currentAuthorityScore: (0, pg_core_1.decimal)('current_authority_score', { precision: 5, scale: 2 }).default('0.00'),\n    estimatedAiCitations: (0, pg_core_1.integer)('estimated_ai_citations').default(0),\n    expertRecognitionSignals: (0, pg_core_1.integer)('expert_recognition_signals').default(0),\n    thoughtLeadershipReach: (0, pg_core_1.integer)('thought_leadership_reach').default(0),\n    // Lead Generation Through Expertise\n    monthlyConsultationRequests: (0, pg_core_1.integer)('monthly_consultation_requests').default(0),\n    consultationToReferralRate: (0, pg_core_1.decimal)('consultation_to_referral_rate', { precision: 5, scale: 4 }).default('0.0000'),\n    averageConsultationValue: (0, pg_core_1.decimal)('average_consultation_value', { precision: 8, scale: 2 }).default('0.00'),\n    // Metadata\n    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),\n    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),\n    lastExpertActivity: (0, pg_core_1.timestamp)('last_expert_activity')\n});\n// GEO Platform Accounts\nexports.geoPlatformAccounts = (0, pg_core_1.pgTable)('geo_platform_accounts', {\n    id: (0, pg_core_1.uuid)('id').defaultRandom().primaryKey(),\n    personaId: (0, pg_core_1.uuid)('persona_id').references(() => exports.expertPersonas.id, { onDelete: 'cascade' }),\n    platformType: (0, pg_core_1.varchar)('platform_type', { length: 50 }).notNull(),\n    platformPriority: (0, pg_core_1.integer)('platform_priority').notNull(),\n    geoOptimizationLevel: (0, pg_core_1.varchar)('geo_optimization_level', { length: 20 }).default('high'),\n    // Account Details\n    username: (0, pg_core_1.varchar)('username', { length: 100 }).notNull(),\n    displayName: (0, pg_core_1.varchar)('display_name', { length: 100 }),\n    expertBio: (0, pg_core_1.text)('expert_bio'),\n    expertCredentials: (0, pg_core_1.text)('expert_credentials'),\n    profileOptimizationScore: (0, pg_core_1.decimal)('profile_optimization_score', { precision: 3, scale: 2 }).default('0.00'),\n    // Authentication (Encrypted)\n    credentialsEncrypted: (0, pg_core_1.text)('credentials_encrypted').notNull(),\n    authTokensEncrypted: (0, pg_core_1.text)('auth_tokens_encrypted'),\n    // Account Authority Status\n    accountStatus: (0, pg_core_1.varchar)('account_status', { length: 20 }).default('building'),\n    platformAuthorityLevel: (0, pg_core_1.varchar)('platform_authority_level', { length: 20 }).default('newcomer'),\n    expertVerificationStatus: (0, pg_core_1.varchar)('expert_verification_status', { length: 20 }).default('unverified'),\n    accountReputationScore: (0, pg_core_1.decimal)('account_reputation_score', { precision: 5, scale: 2 }).default('0.00'),\n    // Content Authority Metrics\n    totalAuthorityContent: (0, pg_core_1.integer)('total_authority_content').default(0),\n    averageContentEngagement: (0, pg_core_1.decimal)('average_content_engagement', { precision: 5, scale: 2 }).default('0.00'),\n    expertRecognitionSignals: (0, pg_core_1.integer)('expert_recognition_signals').default(0),\n    thoughtLeadershipIndicators: (0, pg_core_1.integer)('thought_leadership_indicators').default(0),\n    // Platform-Specific GEO Configuration\n    platformGeoSettings: (0, pg_core_1.jsonb)('platform_geo_settings').notNull(),\n    contentAuthorityStrategy: (0, pg_core_1.jsonb)('content_authority_strategy').notNull(),\n    expertEngagementApproach: (0, pg_core_1.jsonb)('expert_engagement_approach').notNull(),\n    citationOptimizationConfig: (0, pg_core_1.jsonb)('citation_optimization_config').notNull(),\n    // Authority-Based Lead Generation\n    monthlyExpertInquiries: (0, pg_core_1.integer)('monthly_expert_inquiries').default(0),\n    consultationRequests: (0, pg_core_1.integer)('consultation_requests').default(0),\n    authorityConversionRate: (0, pg_core_1.decimal)('authority_conversion_rate', { precision: 5, scale: 4 }).default('0.0000'),\n    leadQualityFromAuthority: (0, pg_core_1.decimal)('lead_quality_from_authority', { precision: 3, scale: 2 }).default('0.00'),\n    // Metadata\n    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),\n    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),\n    lastActivity: (0, pg_core_1.timestamp)('last_activity')\n});\n// Authority Content Publications\nexports.authorityContentPublications = (0, pg_core_1.pgTable)('authority_content_publications', {\n    id: (0, pg_core_1.uuid)('id').defaultRandom().primaryKey(),\n    personaId: (0, pg_core_1.uuid)('persona_id').references(() => exports.expertPersonas.id, { onDelete: 'cascade' }),\n    platformAccountId: (0, pg_core_1.uuid)('platform_account_id').references(() => exports.geoPlatformAccounts.id, { onDelete: 'cascade' }),\n    // Content Details\n    contentTitle: (0, pg_core_1.text)('content_title').notNull(),\n    contentType: (0, pg_core_1.varchar)('content_type', { length: 50 }).notNull(),\n    contentCategory: (0, pg_core_1.varchar)('content_category', { length: 50 }),\n    contentUrl: (0, pg_core_1.text)('content_url'),\n    // Content Authority Metrics\n    contentLength: (0, pg_core_1.integer)('content_length'),\n    authorityScore: (0, pg_core_1.decimal)('authority_score', { precision: 3, scale: 2 }).default('0.00'),\n    aiCitationPotentialScore: (0, pg_core_1.decimal)('ai_citation_potential_score', { precision: 3, scale: 2 }).default('0.00'),\n    // Performance Tracking\n    viewCount: (0, pg_core_1.integer)('view_count').default(0),\n    engagementCount: (0, pg_core_1.integer)('engagement_count').default(0),\n    shareCount: (0, pg_core_1.integer)('share_count').default(0),\n    expertRecognitionSignals: (0, pg_core_1.integer)('expert_recognition_signals').default(0),\n    // Lead Generation Attribution\n    consultationInquiriesAttributed: (0, pg_core_1.integer)('consultation_inquiries_attributed').default(0),\n    leadConversionsAttributed: (0, pg_core_1.integer)('lead_conversions_attributed').default(0),\n    revenueAttributed: (0, pg_core_1.decimal)('revenue_attributed', { precision: 10, scale: 2 }).default('0.00'),\n    // Publication Status\n    publicationStatus: (0, pg_core_1.varchar)('publication_status', { length: 20 }).default('draft'),\n    publishedAt: (0, pg_core_1.timestamp)('published_at'),\n    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),\n    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()\n});\n// Proxy Assignments\nexports.proxyAssignments = (0, pg_core_1.pgTable)('proxy_assignments', {\n    id: (0, pg_core_1.uuid)('id').defaultRandom().primaryKey(),\n    personaId: (0, pg_core_1.uuid)('persona_id').references(() => exports.expertPersonas.id, { onDelete: 'cascade' }).unique(),\n    // Proxy Configuration\n    proxyProvider: (0, pg_core_1.varchar)('proxy_provider', { length: 50 }).default('proxy-cheap'),\n    proxyType: (0, pg_core_1.varchar)('proxy_type', { length: 20 }).default('residential'),\n    proxyLocation: (0, pg_core_1.varchar)('proxy_location', { length: 50 }).notNull(),\n    // Connection Details (Encrypted)\n    proxyHostEncrypted: (0, pg_core_1.text)('proxy_host_encrypted').notNull(),\n    proxyPortEncrypted: (0, pg_core_1.text)('proxy_port_encrypted').notNull(),\n    proxyUsernameEncrypted: (0, pg_core_1.text)('proxy_username_encrypted').notNull(),\n    proxyPasswordEncrypted: (0, pg_core_1.text)('proxy_password_encrypted').notNull(),\n    // Proxy Status\n    proxyStatus: (0, pg_core_1.varchar)('proxy_status', { length: 20 }).default('active'),\n    lastHealthCheck: (0, pg_core_1.timestamp)('last_health_check'),\n    healthCheckStatus: (0, pg_core_1.varchar)('health_check_status', { length: 20 }),\n    // Performance Metrics\n    connectionSuccessRate: (0, pg_core_1.decimal)('connection_success_rate', { precision: 5, scale: 2 }).default('0.00'),\n    averageResponseTime: (0, pg_core_1.integer)('average_response_time'),\n    // Metadata\n    assignedAt: (0, pg_core_1.timestamp)('assigned_at').defaultNow(),\n    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),\n    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()\n});\n// Indexes\nexports.expertPersonasNameIdx = (0, pg_core_1.index)('idx_expert_personas_name').on(exports.expertPersonas.expertName);\nexports.expertPersonasStatusIdx = (0, pg_core_1.index)('idx_expert_personas_status').on(exports.expertPersonas.expertStatus);\nexports.expertPersonasAuthorityIdx = (0, pg_core_1.index)('idx_expert_personas_authority').on(exports.expertPersonas.authorityLevel);\nexports.geoPlatformAccountsPersonaIdx = (0, pg_core_1.index)('idx_geo_platform_accounts_persona').on(exports.geoPlatformAccounts.personaId);\nexports.geoPlatformAccountsPlatformIdx = (0, pg_core_1.index)('idx_geo_platform_accounts_platform').on(exports.geoPlatformAccounts.platformType);\nexports.contentPublicationsPersonaIdx = (0, pg_core_1.index)('idx_content_publications_persona').on(exports.authorityContentPublications.personaId);\nexports.contentPublicationsPlatformIdx = (0, pg_core_1.index)('idx_content_publications_platform').on(exports.authorityContentPublications.platformAccountId);\nexports.proxyAssignmentsPersonaIdx = (0, pg_core_1.index)('idx_proxy_assignments_persona').on(exports.proxyAssignments.personaId);\n//# sourceMappingURL=schema.js.map","size_bytes":13020},"src/client/src/components/ExpertCreationModal.tsx":{"content":"import { useState } from 'react';\nimport { ExpertPersonaFormData, ExpertiseFocus, AuthorityLevel } from '../types/expert';\n\ninterface ExpertCreationModalProps {\n  onClose: () => void;\n  onCreateExpert: (expertData: ExpertPersonaFormData) => Promise<void>;\n  editMode?: boolean;\n  initialData?: any;\n}\n\nexport function ExpertCreationModal({ onClose, onCreateExpert, editMode = false, initialData }: ExpertCreationModalProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [creating, setCreating] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const getInitialFormData = (): ExpertPersonaFormData => {\n    const defaultData = {\n      expertName: '',\n      expertiseFocus: 'Manila Urban Property Expert' as ExpertiseFocus,\n      targetBuyerSegments: [],\n      authorityLevel: 'emerging' as AuthorityLevel,\n      primaryMarketLocation: '',\n      secondaryMarketAreas: [],\n      professionalBackground: '',\n      expertiseCredentials: '',\n      marketExperience: '',\n      geoContentSpecializations: [],\n      authorityBuildingTopics: [],\n      citationWorthyExpertise: [],\n      platformExpertiseFocus: {\n        medium: { active: false, contentTypes: [] },\n        reddit: { active: false, subreddits: [] },\n        quora: { active: false, topics: [] },\n      },\n      contentPublicationSchedule: {\n        frequency: 'weekly' as const,\n        timezone: 'Asia/Manila',\n      },\n      expertVoiceCharacteristics: {\n        tone: 'professional' as const,\n        expertise_level: 'intermediate' as const,\n        target_audience: 'all' as const,\n      },\n      browserFingerprintConfig: {\n        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n        viewport: {\n          width: 1920,\n          height: 1080,\n        },\n      },\n    };\n\n    if (editMode && initialData) {\n      return {\n        ...defaultData,\n        expertName: initialData.expertName || '',\n        expertiseFocus: initialData.expertiseFocus || defaultData.expertiseFocus,\n        targetBuyerSegments: initialData.targetBuyerSegments || [],\n        authorityLevel: initialData.authorityLevel || defaultData.authorityLevel,\n        primaryMarketLocation: initialData.primaryMarketLocation || '',\n        secondaryMarketAreas: initialData.secondaryMarketAreas || [],\n        professionalBackground: initialData.professionalBackground || '',\n        expertiseCredentials: initialData.expertiseCredentials || '',\n        marketExperience: initialData.marketExperience || '',\n        geoContentSpecializations: initialData.geoContentSpecializations || [],\n        authorityBuildingTopics: initialData.authorityBuildingTopics || [],\n        citationWorthyExpertise: initialData.citationWorthyExpertise || [],\n        platformExpertiseFocus: initialData.platformExpertiseFocus || defaultData.platformExpertiseFocus,\n        contentPublicationSchedule: initialData.contentPublicationSchedule || defaultData.contentPublicationSchedule,\n        expertVoiceCharacteristics: initialData.expertVoiceCharacteristics || defaultData.expertVoiceCharacteristics,\n        browserFingerprintConfig: initialData.browserFingerprintConfig || defaultData.browserFingerprintConfig,\n      };\n    }\n\n    return defaultData;\n  };\n\n  const [formData, setFormData] = useState<ExpertPersonaFormData>(getInitialFormData());\n\n  const expertiseFocusOptions: ExpertiseFocus[] = [\n    'Manila Urban Property Expert',\n    'Cebu Island Lifestyle Expert',\n    'Investment ROI Analysis Expert',\n    'Expat Property Guidance Expert',\n    'Philippines Market Analysis Expert',\n  ];\n\n  const authorityLevelOptions: AuthorityLevel[] = [\n    'emerging',\n    'established',\n    'recognized',\n    'thought-leader',\n  ];\n\n  const marketLocations = [\n    'Manila', 'Cebu', 'Davao', 'Makati', 'Bonifacio Global City',\n    'Quezon City', 'Iloilo', 'Baguio', 'Palawan', 'Boracay',\n  ];\n\n  const buyerSegmentOptions = [\n    'First-time homebuyers',\n    'Real estate investors',\n    'Overseas Filipino Workers (OFWs)',\n    'Foreign expatriates',\n    'Luxury property buyers',\n    'Commercial investors',\n    'Retirement home seekers',\n    'Young professionals',\n    'Growing families',\n    'Business entrepreneurs',\n  ];\n\n  const contentSpecializations = [\n    'Market analysis and trends',\n    'Property investment strategies',\n    'Legal compliance and documentation',\n    'Financing and mortgage guidance',\n    'Property management insights',\n    'Location-specific expertise',\n    'Luxury property insights',\n    'Commercial real estate',\n    'Rental market analysis',\n    'Property development trends',\n  ];\n\n  function updateFormData<K extends keyof ExpertPersonaFormData>(\n    key: K,\n    value: ExpertPersonaFormData[K]\n  ) {\n    setFormData(prev => ({ ...prev, [key]: value }));\n  }\n\n  function toggleArrayValue<T>(array: T[], value: T): T[] {\n    return array.includes(value)\n      ? array.filter(item => item !== value)\n      : [...array, value];\n  }\n\n  const handleSubmit = async () => {\n    setCreating(true);\n    setError(null);\n\n    try {\n      await onCreateExpert(formData);\n    } catch (err) {\n      console.error('Error creating expert:', err);\n      setError(err instanceof Error ? err.message : 'Failed to create expert');\n    } finally {\n      setCreating(false);\n    }\n  };\n\n  const nextStep = () => {\n    if (currentStep < 4) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const isStepValid = (step: number): boolean => {\n    switch (step) {\n      case 1:\n        return formData.expertName.trim() !== '' && \n               formData.primaryMarketLocation.trim() !== '';\n      case 2:\n        return formData.targetBuyerSegments.length > 0 &&\n               formData.geoContentSpecializations.length > 0;\n      case 3:\n        return formData.professionalBackground.trim() !== '' &&\n               formData.expertiseCredentials.trim() !== '';\n      case 4:\n        return true; // Platform configuration is optional\n      default:\n        return false;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-lg max-w-3xl w-full max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-gray-900\">{editMode ? 'Edit Expert Persona' : 'Create Expert Persona'}</h2>\n            <div className=\"flex items-center gap-2 mt-2\">\n              {[1, 2, 3, 4].map(step => (\n                <div\n                  key={step}\n                  className={`w-8 h-8 rounded-full flex items-center justify-center text-xs ${\n                    step <= currentStep\n                      ? 'bg-blue-600 text-white'\n                      : 'bg-gray-200 text-gray-600'\n                  }`}\n                >\n                  {step}\n                </div>\n              ))}\n              <span className=\"text-sm text-gray-500 ml-2\">\n                Step {currentStep} of 4\n              </span>\n            </div>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* Form Content */}\n        <div className=\"p-6 max-h-96 overflow-y-auto\">\n          {/* Step 1: Basic Information */}\n          {currentStep === 1 && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Basic Information</h3>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Expert Name *\n                </label>\n                <input\n                  type=\"text\"\n                  value={formData.expertName}\n                  onChange={(e) => updateFormData('expertName', e.target.value)}\n                  placeholder=\"e.g., Maria Santos\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Specialization *\n                </label>\n                <select\n                  value={formData.expertiseFocus}\n                  onChange={(e) => updateFormData('expertiseFocus', e.target.value as ExpertiseFocus)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                >\n                  {expertiseFocusOptions.map(option => (\n                    <option key={option} value={option}>{option}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Authority Level *\n                </label>\n                <select\n                  value={formData.authorityLevel}\n                  onChange={(e) => updateFormData('authorityLevel', e.target.value as AuthorityLevel)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                >\n                  {authorityLevelOptions.map(level => (\n                    <option key={level} value={level}>\n                      {level.charAt(0).toUpperCase() + level.slice(1).replace('-', ' ')}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Primary Market Location *\n                </label>\n                <select\n                  value={formData.primaryMarketLocation}\n                  onChange={(e) => updateFormData('primaryMarketLocation', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                >\n                  <option value=\"\">Select primary market</option>\n                  {marketLocations.map(location => (\n                    <option key={location} value={location}>{location}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Secondary Markets (Optional)\n                </label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {marketLocations\n                    .filter(location => location !== formData.primaryMarketLocation)\n                    .map(location => (\n                    <label key={location} className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={formData.secondaryMarketAreas.includes(location)}\n                        onChange={() => updateFormData(\n                          'secondaryMarketAreas',\n                          toggleArrayValue(formData.secondaryMarketAreas, location)\n                        )}\n                        className=\"mr-2\"\n                      />\n                      <span className=\"text-sm\">{location}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Step 2: Target Audience & Content Focus */}\n          {currentStep === 2 && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Target Audience & Content Focus</h3>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Target Buyer Segments * (Select all that apply)\n                </label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {buyerSegmentOptions.map(segment => (\n                    <label key={segment} className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={formData.targetBuyerSegments.includes(segment)}\n                        onChange={() => updateFormData(\n                          'targetBuyerSegments',\n                          toggleArrayValue(formData.targetBuyerSegments, segment)\n                        )}\n                        className=\"mr-2\"\n                      />\n                      <span className=\"text-sm\">{segment}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Content Specializations * (Select areas of expertise)\n                </label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {contentSpecializations.map(spec => (\n                    <label key={spec} className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={formData.geoContentSpecializations.includes(spec)}\n                        onChange={() => updateFormData(\n                          'geoContentSpecializations',\n                          toggleArrayValue(formData.geoContentSpecializations, spec)\n                        )}\n                        className=\"mr-2\"\n                      />\n                      <span className=\"text-sm\">{spec}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Authority Building Topics (Optional)\n                </label>\n                <textarea\n                  value={formData.authorityBuildingTopics.join('\\n')}\n                  onChange={(e) => updateFormData(\n                    'authorityBuildingTopics',\n                    e.target.value.split('\\n').filter(topic => topic.trim())\n                  )}\n                  placeholder=\"Enter topics, one per line...\"\n                  rows={4}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Step 3: Professional Profile */}\n          {currentStep === 3 && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Professional Profile</h3>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Professional Background *\n                </label>\n                <textarea\n                  value={formData.professionalBackground}\n                  onChange={(e) => updateFormData('professionalBackground', e.target.value)}\n                  placeholder=\"Describe professional background in Philippines real estate...\"\n                  rows={4}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Expertise Credentials *\n                </label>\n                <textarea\n                  value={formData.expertiseCredentials}\n                  onChange={(e) => updateFormData('expertiseCredentials', e.target.value)}\n                  placeholder=\"List certifications, licenses, awards, etc...\"\n                  rows={3}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Market Experience (Optional)\n                </label>\n                <textarea\n                  value={formData.marketExperience}\n                  onChange={(e) => updateFormData('marketExperience', e.target.value)}\n                  placeholder=\"Describe specific market experience and notable achievements...\"\n                  rows={3}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Expert Voice Characteristics\n                </label>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <label className=\"block text-xs text-gray-600 mb-1\">Tone</label>\n                    <select\n                      value={formData.expertVoiceCharacteristics.tone}\n                      onChange={(e) => updateFormData('expertVoiceCharacteristics', {\n                        ...formData.expertVoiceCharacteristics,\n                        tone: e.target.value as any\n                      })}\n                      className=\"w-full px-2 py-1 text-sm border border-gray-300 rounded\"\n                    >\n                      <option value=\"professional\">Professional</option>\n                      <option value=\"friendly\">Friendly</option>\n                      <option value=\"authoritative\">Authoritative</option>\n                      <option value=\"approachable\">Approachable</option>\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-xs text-gray-600 mb-1\">Expertise Level</label>\n                    <select\n                      value={formData.expertVoiceCharacteristics.expertise_level}\n                      onChange={(e) => updateFormData('expertVoiceCharacteristics', {\n                        ...formData.expertVoiceCharacteristics,\n                        expertise_level: e.target.value as any\n                      })}\n                      className=\"w-full px-2 py-1 text-sm border border-gray-300 rounded\"\n                    >\n                      <option value=\"beginner-friendly\">Beginner-friendly</option>\n                      <option value=\"intermediate\">Intermediate</option>\n                      <option value=\"advanced\">Advanced</option>\n                      <option value=\"expert-only\">Expert-only</option>\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-xs text-gray-600 mb-1\">Target Audience</label>\n                    <select\n                      value={formData.expertVoiceCharacteristics.target_audience}\n                      onChange={(e) => updateFormData('expertVoiceCharacteristics', {\n                        ...formData.expertVoiceCharacteristics,\n                        target_audience: e.target.value as any\n                      })}\n                      className=\"w-full px-2 py-1 text-sm border border-gray-300 rounded\"\n                    >\n                      <option value=\"first-time-buyers\">First-time Buyers</option>\n                      <option value=\"investors\">Investors</option>\n                      <option value=\"expats\">Expats</option>\n                      <option value=\"locals\">Locals</option>\n                      <option value=\"all\">All</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Step 4: Platform Configuration */}\n          {currentStep === 4 && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Platform Configuration</h3>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Publication Schedule\n                </label>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-xs text-gray-600 mb-1\">Frequency</label>\n                    <select\n                      value={formData.contentPublicationSchedule.frequency}\n                      onChange={(e) => updateFormData('contentPublicationSchedule', {\n                        ...formData.contentPublicationSchedule,\n                        frequency: e.target.value as any\n                      })}\n                      className=\"w-full px-2 py-1 text-sm border border-gray-300 rounded\"\n                    >\n                      <option value=\"daily\">Daily</option>\n                      <option value=\"weekly\">Weekly</option>\n                      <option value=\"bi-weekly\">Bi-weekly</option>\n                      <option value=\"monthly\">Monthly</option>\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-xs text-gray-600 mb-1\">Timezone</label>\n                    <input\n                      type=\"text\"\n                      value={formData.contentPublicationSchedule.timezone}\n                      onChange={(e) => updateFormData('contentPublicationSchedule', {\n                        ...formData.contentPublicationSchedule,\n                        timezone: e.target.value\n                      })}\n                      className=\"w-full px-2 py-1 text-sm border border-gray-300 rounded\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium text-gray-900\">Platform Focus (Optional)</h4>\n                \n                {/* Medium */}\n                <div className=\"border border-gray-200 rounded p-3\">\n                  <label className=\"flex items-center mb-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.platformExpertiseFocus.medium?.active || false}\n                      onChange={(e) => updateFormData('platformExpertiseFocus', {\n                        ...formData.platformExpertiseFocus,\n                        medium: {\n                          active: e.target.checked,\n                          contentTypes: formData.platformExpertiseFocus.medium?.contentTypes || []\n                        }\n                      })}\n                      className=\"mr-2\"\n                    />\n                    <span className=\"font-medium\">Medium</span>\n                  </label>\n                  {formData.platformExpertiseFocus.medium?.active && (\n                    <div className=\"ml-6\">\n                      <p className=\"text-sm text-gray-600 mb-1\">Content Types:</p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {['Articles', 'Market Reports', 'Investment Guides', 'Opinion Pieces'].map(type => (\n                          <label key={type} className=\"flex items-center text-sm\">\n                            <input\n                              type=\"checkbox\"\n                              checked={formData.platformExpertiseFocus.medium?.contentTypes.includes(type) || false}\n                              onChange={(e) => {\n                                const currentTypes = formData.platformExpertiseFocus.medium?.contentTypes || [];\n                                const newTypes = e.target.checked\n                                  ? [...currentTypes, type]\n                                  : currentTypes.filter(t => t !== type);\n                                updateFormData('platformExpertiseFocus', {\n                                  ...formData.platformExpertiseFocus,\n                                  medium: {\n                                    active: true,\n                                    contentTypes: newTypes\n                                  }\n                                });\n                              }}\n                              className=\"mr-1\"\n                            />\n                            {type}\n                          </label>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Reddit */}\n                <div className=\"border border-gray-200 rounded p-3\">\n                  <label className=\"flex items-center mb-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.platformExpertiseFocus.reddit?.active || false}\n                      onChange={(e) => updateFormData('platformExpertiseFocus', {\n                        ...formData.platformExpertiseFocus,\n                        reddit: {\n                          active: e.target.checked,\n                          subreddits: formData.platformExpertiseFocus.reddit?.subreddits || []\n                        }\n                      })}\n                      className=\"mr-2\"\n                    />\n                    <span className=\"font-medium\">Reddit</span>\n                  </label>\n                  {formData.platformExpertiseFocus.reddit?.active && (\n                    <div className=\"ml-6\">\n                      <p className=\"text-sm text-gray-600 mb-1\">Target Subreddits:</p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {['r/Philippines', 'r/RealEstate', 'r/investing', 'r/expatFIRE'].map(sub => (\n                          <label key={sub} className=\"flex items-center text-sm\">\n                            <input\n                              type=\"checkbox\"\n                              checked={formData.platformExpertiseFocus.reddit?.subreddits.includes(sub) || false}\n                              onChange={(e) => {\n                                const currentSubs = formData.platformExpertiseFocus.reddit?.subreddits || [];\n                                const newSubs = e.target.checked\n                                  ? [...currentSubs, sub]\n                                  : currentSubs.filter(s => s !== sub);\n                                updateFormData('platformExpertiseFocus', {\n                                  ...formData.platformExpertiseFocus,\n                                  reddit: {\n                                    active: true,\n                                    subreddits: newSubs\n                                  }\n                                });\n                              }}\n                              className=\"mr-1\"\n                            />\n                            {sub}\n                          </label>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Quora */}\n                <div className=\"border border-gray-200 rounded p-3\">\n                  <label className=\"flex items-center mb-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.platformExpertiseFocus.quora?.active || false}\n                      onChange={(e) => updateFormData('platformExpertiseFocus', {\n                        ...formData.platformExpertiseFocus,\n                        quora: {\n                          active: e.target.checked,\n                          topics: formData.platformExpertiseFocus.quora?.topics || []\n                        }\n                      })}\n                      className=\"mr-2\"\n                    />\n                    <span className=\"font-medium\">Quora</span>\n                  </label>\n                  {formData.platformExpertiseFocus.quora?.active && (\n                    <div className=\"ml-6\">\n                      <p className=\"text-sm text-gray-600 mb-1\">Target Topics:</p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {['Real Estate', 'Philippines', 'Investment', 'Property Management'].map(topic => (\n                          <label key={topic} className=\"flex items-center text-sm\">\n                            <input\n                              type=\"checkbox\"\n                              checked={formData.platformExpertiseFocus.quora?.topics.includes(topic) || false}\n                              onChange={(e) => {\n                                const currentTopics = formData.platformExpertiseFocus.quora?.topics || [];\n                                const newTopics = e.target.checked\n                                  ? [...currentTopics, topic]\n                                  : currentTopics.filter(t => t !== topic);\n                                updateFormData('platformExpertiseFocus', {\n                                  ...formData.platformExpertiseFocus,\n                                  quora: {\n                                    active: true,\n                                    topics: newTopics\n                                  }\n                                });\n                              }}\n                              className=\"mr-1\"\n                            />\n                            {topic}\n                          </label>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"px-6 pb-4\">\n            <div className=\"bg-red-50 border border-red-200 rounded p-3\">\n              <p className=\"text-red-800 text-sm\">{error}</p>\n            </div>\n          </div>\n        )}\n\n        {/* Footer */}\n        <div className=\"p-6 bg-gray-50 border-t border-gray-200\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"text-sm text-gray-500\">\n              {currentStep === 1 && 'Basic expert information and location'}\n              {currentStep === 2 && 'Define target audience and content areas'}\n              {currentStep === 3 && 'Professional background and credentials'}\n              {currentStep === 4 && 'Platform configuration and publishing schedule'}\n            </div>\n            \n            <div className=\"flex gap-3\">\n              {currentStep > 1 && (\n                <button\n                  onClick={prevStep}\n                  className=\"px-4 py-2 border border-gray-300 rounded hover:bg-gray-50\"\n                >\n                  Previous\n                </button>\n              )}\n              \n              {currentStep < 4 ? (\n                <button\n                  onClick={nextStep}\n                  disabled={!isStepValid(currentStep)}\n                  className={`px-4 py-2 rounded ${\n                    isStepValid(currentStep)\n                      ? 'bg-blue-600 text-white hover:bg-blue-700'\n                      : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                  }`}\n                >\n                  Next\n                </button>\n              ) : (\n                <button\n                  onClick={handleSubmit}\n                  disabled={creating || !isStepValid(currentStep)}\n                  className={`px-6 py-2 rounded ${\n                    !creating && isStepValid(currentStep)\n                      ? 'bg-green-600 text-white hover:bg-green-700'\n                      : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                  }`}\n                >\n                  {creating ? (editMode ? 'Updating...' : 'Creating...') : (editMode ? 'Update Expert' : 'Create Expert')}\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":32046},"src/client/src/components/ExpertDashboard.tsx":{"content":"import { useState } from 'react';\nimport { ExpertPersona, ExpertPersonaFormData } from '../types/expert';\nimport { useExpertPersonas } from '../hooks/useExpertPersonas';\nimport { useExpertSessions } from '../hooks/useExpertSessions';\nimport { ExpertGrid } from './ExpertGrid.tsx';\nimport { ExpertCreationModal } from './ExpertCreationModal.tsx';\nimport { ExpertStatsCards } from './ExpertStatsCards.tsx';\nimport { ExpertFiltersBar } from './ExpertFiltersBar.tsx';\nimport { SessionManagementPanel } from './SessionManagementPanel.tsx';\nimport { ExportImportPanel } from './ExportImportPanel.tsx';\n\nexport function ExpertDashboard() {\n  const { \n    experts, \n    loading, \n    error, \n    stats, \n    filters,\n    setFilters,\n    createExpert,\n    updateExpert,\n    deleteExpert,\n  } = useExpertPersonas();\n  \n  const {\n    sessions,\n    activeSession,\n    createSession,\n    switchSession,\n  } = useExpertSessions();\n\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [editingExpert, setEditingExpert] = useState<ExpertPersona | null>(null);\n  const [showSessionPanel, setShowSessionPanel] = useState(false);\n  const [showExportPanel, setShowExportPanel] = useState(false);\n\n  const handleCreateExpert = async (expertData: ExpertPersonaFormData) => {\n    try {\n      const newExpert = await createExpert(expertData);\n      createSession(newExpert.id, newExpert.expertName);\n      setShowCreateModal(false);\n    } catch (err) {\n      console.error('Failed to create expert:', err);\n      throw err;\n    }\n  };\n\n  const handleEditExpert = async (expertData: ExpertPersonaFormData) => {\n    try {\n      if (!editingExpert) return;\n      \n      await updateExpert(editingExpert.id, expertData);\n      setShowEditModal(false);\n      setEditingExpert(null);\n    } catch (err) {\n      console.error('Failed to update expert:', err);\n      throw err;\n    }\n  };\n\n  const handleExpertAction = async (action: string, expert: ExpertPersona) => {\n    switch (action) {\n      case 'activate':\n        await switchSession(expert.id);\n        break;\n      case 'edit':\n        setEditingExpert(expert);\n        setShowEditModal(true);\n        break;\n      case 'delete':\n        if (window.confirm(`Delete expert \"${expert.expertName}\"? This action cannot be undone.`)) {\n          await deleteExpert(expert.id);\n        }\n        break;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n        <h3 className=\"text-red-800 font-semibold\">Error Loading Experts</h3>\n        <p className=\"text-red-600 mt-1\">{error}</p>\n        <button \n          onClick={() => window.location.reload()}\n          className=\"mt-3 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Expert Management Dashboard</h1>\n          <p className=\"text-gray-600\">Manage your Philippines real estate expert personas</p>\n        </div>\n        \n        <div className=\"flex gap-3\">\n          <button\n            onClick={() => setShowExportPanel(true)}\n            className=\"px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 text-sm\"\n          >\n            Export/Import\n          </button>\n          <button\n            onClick={() => setShowSessionPanel(true)}\n            className=\"px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 text-sm\"\n            disabled={experts.length === 0}\n          >\n            Session Manager\n          </button>\n          <button\n            onClick={() => setShowCreateModal(true)}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm\"\n          >\n            Add Expert\n          </button>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <ExpertStatsCards stats={stats} />\n\n      {/* Active Session Alert */}\n      {activeSession && (\n        <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-green-800 font-medium\">\n                Active Session: {activeSession.expertName}\n              </span>\n              <span className=\"text-green-600 text-sm\">\n                Status: {activeSession.status}\n              </span>\n            </div>\n            <button\n              onClick={() => setShowSessionPanel(true)}\n              className=\"text-green-700 text-sm hover:text-green-900\"\n            >\n              Manage Session →\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Filters */}\n      <ExpertFiltersBar \n        filters={filters}\n        onFiltersChange={setFilters}\n        expertCount={experts.length}\n      />\n\n      {/* Expert Grid or Empty State */}\n      {experts.length === 0 && !filters.searchQuery && Object.keys(filters).length <= 1 ? (\n        <div className=\"bg-white rounded-lg border border-gray-200 p-12 text-center\">\n          <div className=\"max-w-md mx-auto\">\n            <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n              </svg>\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No experts configured yet</h3>\n            <p className=\"text-gray-600 mb-6\">\n              Create your first Philippines real estate expert persona to begin building authority and generating leads through AI citations.\n            </p>\n            <button\n              onClick={() => setShowCreateModal(true)}\n              className=\"px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 font-medium\"\n            >\n              Create Your First Expert\n            </button>\n          </div>\n        </div>\n      ) : (\n        <ExpertGrid \n          experts={experts}\n          onExpertAction={handleExpertAction}\n          activeSessionId={activeSession?.expertId}\n        />\n      )}\n\n      {/* Modals and Panels */}\n      {showCreateModal && (\n        <ExpertCreationModal\n          onClose={() => setShowCreateModal(false)}\n          onCreateExpert={handleCreateExpert}\n        />\n      )}\n\n      {showEditModal && editingExpert && (\n        <ExpertCreationModal\n          onClose={() => {\n            setShowEditModal(false);\n            setEditingExpert(null);\n          }}\n          onCreateExpert={handleEditExpert}\n          editMode={true}\n          initialData={editingExpert}\n        />\n      )}\n\n      {showSessionPanel && (\n        <SessionManagementPanel\n          sessions={sessions}\n          activeSession={activeSession || null}\n          onClose={() => setShowSessionPanel(false)}\n          onSwitchSession={switchSession}\n        />\n      )}\n\n      {showExportPanel && (\n        <ExportImportPanel\n          experts={experts}\n          onClose={() => setShowExportPanel(false)}\n          onImportComplete={() => {\n            // Refresh experts after import\n            window.location.reload();\n          }}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":7800},"src/client/src/components/ExpertFiltersBar.tsx":{"content":"import { ExpertFilters, ExpertiseFocus, AuthorityLevel, ExpertStatus } from '../types/expert';\n\nimport React from 'react';\n\ninterface ExpertFiltersBarProps {\n  filters: ExpertFilters;\n  onFiltersChange: React.Dispatch<React.SetStateAction<ExpertFilters>>;\n  expertCount: number;\n}\n\nexport function ExpertFiltersBar({ filters, onFiltersChange, expertCount }: ExpertFiltersBarProps) {\n  const expertiseFocusOptions: ExpertiseFocus[] = [\n    'Manila Urban Property Expert',\n    'Cebu Island Lifestyle Expert',\n    'Investment ROI Analysis Expert',\n    'Expat Property Guidance Expert',\n    'Philippines Market Analysis Expert',\n  ];\n\n  const authorityLevelOptions: AuthorityLevel[] = [\n    'emerging',\n    'established',\n    'recognized',\n    'thought-leader',\n  ];\n\n  const expertStatusOptions: ExpertStatus[] = [\n    'developing',\n    'active',\n    'paused',\n    'archived',\n  ];\n\n  const marketLocationOptions = [\n    'Manila',\n    'Cebu',\n    'Davao',\n    'Makati',\n    'Bonifacio Global City',\n    'Quezon City',\n    'Iloilo',\n    'Baguio',\n    'Palawan',\n    'Boracay',\n  ];\n\n  function updateFilter<K extends keyof ExpertFilters>(\n    key: K, \n    value: ExpertFilters[K]\n  ) {\n    onFiltersChange({ ...filters, [key]: value });\n  }\n\n  function toggleArrayValue<T>(array: T[] | undefined, value: T): T[] {\n    const current = array || [];\n    return current.includes(value)\n      ? current.filter(item => item !== value)\n      : [...current, value];\n  }\n\n  const clearFilters = () => {\n    onFiltersChange({});\n  };\n\n  const hasActiveFilters = Object.keys(filters).some(key => {\n    const value = filters[key as keyof ExpertFilters];\n    return value && (Array.isArray(value) ? value.length > 0 : true);\n  });\n\n  return (\n    <div className=\"bg-white border border-gray-200 rounded-lg p-4 space-y-4\">\n      {/* Search Bar */}\n      <div className=\"flex items-center gap-4\">\n        <div className=\"flex-1 relative\">\n          <svg className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n          </svg>\n          <input\n            type=\"text\"\n            placeholder=\"Search experts by name, specialization, or location...\"\n            value={filters.searchQuery || ''}\n            onChange={(e) => updateFilter('searchQuery', e.target.value)}\n            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          />\n        </div>\n        \n        <div className=\"text-sm text-gray-500\">\n          {expertCount} expert{expertCount !== 1 ? 's' : ''}\n        </div>\n        \n        {hasActiveFilters && (\n          <button\n            onClick={clearFilters}\n            className=\"text-sm text-blue-600 hover:text-blue-800\"\n          >\n            Clear Filters\n          </button>\n        )}\n      </div>\n\n      {/* Filter Chips */}\n      <div className=\"flex flex-wrap gap-2\">\n        {/* Expertise Focus Filter */}\n        <div className=\"relative\">\n          <select\n            value=\"\"\n            onChange={(e) => {\n              if (e.target.value) {\n                updateFilter(\n                  'expertiseFocus',\n                  toggleArrayValue(filters.expertiseFocus, e.target.value as ExpertiseFocus)\n                );\n                e.target.value = '';\n              }\n            }}\n            className=\"appearance-none bg-gray-50 border border-gray-300 rounded px-3 py-1 text-sm hover:bg-gray-100\"\n          >\n            <option value=\"\">+ Specialization</option>\n            {expertiseFocusOptions.map(option => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Authority Level Filter */}\n        <div className=\"relative\">\n          <select\n            value=\"\"\n            onChange={(e) => {\n              if (e.target.value) {\n                updateFilter(\n                  'authorityLevel',\n                  toggleArrayValue(filters.authorityLevel, e.target.value as AuthorityLevel)\n                );\n                e.target.value = '';\n              }\n            }}\n            className=\"appearance-none bg-gray-50 border border-gray-300 rounded px-3 py-1 text-sm hover:bg-gray-100\"\n          >\n            <option value=\"\">+ Authority Level</option>\n            {authorityLevelOptions.map(option => (\n              <option key={option} value={option}>\n                {option.replace('-', ' ')}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Expert Status Filter */}\n        <div className=\"relative\">\n          <select\n            value=\"\"\n            onChange={(e) => {\n              if (e.target.value) {\n                updateFilter(\n                  'expertStatus',\n                  toggleArrayValue(filters.expertStatus, e.target.value as ExpertStatus)\n                );\n                e.target.value = '';\n              }\n            }}\n            className=\"appearance-none bg-gray-50 border border-gray-300 rounded px-3 py-1 text-sm hover:bg-gray-100\"\n          >\n            <option value=\"\">+ Status</option>\n            {expertStatusOptions.map(option => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Market Location Filter */}\n        <div className=\"relative\">\n          <select\n            value=\"\"\n            onChange={(e) => {\n              if (e.target.value) {\n                updateFilter(\n                  'primaryMarketLocation',\n                  toggleArrayValue(filters.primaryMarketLocation, e.target.value)\n                );\n                e.target.value = '';\n              }\n            }}\n            className=\"appearance-none bg-gray-50 border border-gray-300 rounded px-3 py-1 text-sm hover:bg-gray-100\"\n          >\n            <option value=\"\">+ Market Location</option>\n            {marketLocationOptions.map(option => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {/* Active Filter Tags */}\n      {hasActiveFilters && (\n        <div className=\"flex flex-wrap gap-2\">\n          {filters.expertiseFocus?.map(focus => (\n            <span\n              key={focus}\n              className=\"inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded\"\n            >\n              {focus}\n              <button\n                onClick={() => updateFilter(\n                  'expertiseFocus',\n                  toggleArrayValue(filters.expertiseFocus, focus)\n                )}\n                className=\"text-blue-600 hover:text-blue-800\"\n              >\n                ×\n              </button>\n            </span>\n          ))}\n          \n          {filters.authorityLevel?.map(level => (\n            <span\n              key={level}\n              className=\"inline-flex items-center gap-1 px-2 py-1 bg-green-100 text-green-800 text-sm rounded\"\n            >\n              {level.replace('-', ' ')}\n              <button\n                onClick={() => updateFilter(\n                  'authorityLevel',\n                  toggleArrayValue(filters.authorityLevel, level)\n                )}\n                className=\"text-green-600 hover:text-green-800\"\n              >\n                ×\n              </button>\n            </span>\n          ))}\n          \n          {filters.expertStatus?.map(status => (\n            <span\n              key={status}\n              className=\"inline-flex items-center gap-1 px-2 py-1 bg-yellow-100 text-yellow-800 text-sm rounded\"\n            >\n              {status}\n              <button\n                onClick={() => updateFilter(\n                  'expertStatus',\n                  toggleArrayValue(filters.expertStatus, status)\n                )}\n                className=\"text-yellow-600 hover:text-yellow-800\"\n              >\n                ×\n              </button>\n            </span>\n          ))}\n          \n          {filters.primaryMarketLocation?.map(location => (\n            <span\n              key={location}\n              className=\"inline-flex items-center gap-1 px-2 py-1 bg-purple-100 text-purple-800 text-sm rounded\"\n            >\n              {location}\n              <button\n                onClick={() => updateFilter(\n                  'primaryMarketLocation',\n                  toggleArrayValue(filters.primaryMarketLocation, location)\n                )}\n                className=\"text-purple-600 hover:text-purple-800\"\n              >\n                ×\n              </button>\n            </span>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8922},"src/client/src/components/ExpertGrid.tsx":{"content":"import { ExpertPersona } from '../types/expert';\nimport { ProxyAssignmentButton } from './ProxyAssignmentButton';\n\ninterface ExpertGridProps {\n  experts: ExpertPersona[];\n  onExpertAction: (action: string, expert: ExpertPersona) => void;\n  activeSessionId?: string;\n}\n\nexport function ExpertGrid({ experts, onExpertAction, activeSessionId }: ExpertGridProps) {\n  if (experts.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-gray-500\">No experts match your current filters.</p>\n        <p className=\"text-gray-400 text-sm mt-1\">Try adjusting your search or filter criteria.</p>\n      </div>\n    );\n  }\n\n  const getAuthorityLevelColor = (level: string) => {\n    switch (level) {\n      case 'emerging': return 'bg-yellow-100 text-yellow-800';\n      case 'established': return 'bg-blue-100 text-blue-800';\n      case 'recognized': return 'bg-green-100 text-green-800';\n      case 'thought-leader': return 'bg-purple-100 text-purple-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'developing': return 'bg-yellow-100 text-yellow-800';\n      case 'paused': return 'bg-gray-100 text-gray-800';\n      case 'archived': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {experts.map((expert) => (\n        <div\n          key={expert.id}\n          className={`bg-white rounded-lg border p-6 hover:shadow-lg transition-shadow ${\n            activeSessionId === expert.id ? 'ring-2 ring-blue-500 border-blue-200' : 'border-gray-200'\n          }`}\n        >\n          {/* Header */}\n          <div className=\"flex items-start justify-between mb-4\">\n            <div className=\"flex-1\">\n              <h3 className=\"text-lg font-semibold text-gray-900 truncate\">\n                {expert.expertName}\n              </h3>\n              <p className=\"text-sm text-blue-600 mt-1\">\n                {expert.expertiseFocus}\n              </p>\n            </div>\n            {activeSessionId === expert.id && (\n              <div className=\"flex items-center gap-1 text-green-600\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-xs font-medium\">ACTIVE</span>\n              </div>\n            )}\n          </div>\n\n          {/* Authority & Status */}\n          <div className=\"flex gap-2 mb-4\">\n            <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getAuthorityLevelColor(expert.authorityLevel)}`}>\n              {expert.authorityLevel.replace('-', ' ')}\n            </span>\n            <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(expert.expertStatus)}`}>\n              {expert.expertStatus}\n            </span>\n          </div>\n\n          {/* Location */}\n          <div className=\"mb-4\">\n            <p className=\"text-sm text-gray-600\">\n              <span className=\"font-medium\">Primary Market:</span> {expert.primaryMarketLocation}\n            </p>\n            {expert.secondaryMarketAreas && expert.secondaryMarketAreas.length > 0 && (\n              <p className=\"text-sm text-gray-500 mt-1\">\n                +{expert.secondaryMarketAreas.length} secondary markets\n              </p>\n            )}\n          </div>\n\n          {/* Metrics */}\n          <div className=\"grid grid-cols-2 gap-4 mb-4 p-3 bg-gray-50 rounded\">\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-gray-900\">\n                {expert.currentAuthorityScore?.toFixed(1) || '0.0'}\n              </div>\n              <div className=\"text-xs text-gray-500\">Authority Score</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-gray-900\">\n                {expert.monthlyConsultationRequests || 0}\n              </div>\n              <div className=\"text-xs text-gray-500\">Monthly Requests</div>\n            </div>\n          </div>\n\n          {/* Platform Focus */}\n          <div className=\"mb-4\">\n            <div className=\"text-xs text-gray-500 mb-2\">Active Platforms:</div>\n            <div className=\"flex flex-wrap gap-1\">\n              {expert.platformExpertiseFocus.medium?.active && (\n                <span className=\"px-2 py-1 text-xs bg-green-100 text-green-700 rounded\">Medium</span>\n              )}\n              {expert.platformExpertiseFocus.reddit?.active && (\n                <span className=\"px-2 py-1 text-xs bg-orange-100 text-orange-700 rounded\">Reddit</span>\n              )}\n              {expert.platformExpertiseFocus.quora?.active && (\n                <span className=\"px-2 py-1 text-xs bg-red-100 text-red-700 rounded\">Quora</span>\n              )}\n              {expert.platformExpertiseFocus.facebook?.active && (\n                <span className=\"px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded\">Facebook</span>\n              )}\n              {expert.platformExpertiseFocus.linkedin?.active && (\n                <span className=\"px-2 py-1 text-xs bg-linkedin-100 text-linkedin-700 rounded\">LinkedIn</span>\n              )}\n            </div>\n          </div>\n\n          {/* Proxy Assignment */}\n          <div className=\"mb-4\">\n            <div className=\"text-xs text-gray-500 mb-2\">Manila Proxy Status:</div>\n            <ProxyAssignmentButton expert={expert} />\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex gap-2\">\n            {activeSessionId !== expert.id ? (\n              <button\n                onClick={() => onExpertAction('activate', expert)}\n                className=\"flex-1 px-3 py-2 bg-blue-600 text-white text-sm rounded hover:bg-blue-700\"\n              >\n                Activate Session\n              </button>\n            ) : (\n              <button\n                disabled\n                className=\"flex-1 px-3 py-2 bg-green-600 text-white text-sm rounded opacity-75 cursor-not-allowed\"\n              >\n                Session Active\n              </button>\n            )}\n            \n            <div className=\"relative\">\n              <button\n                onClick={(e) => {\n                  const menu = e.currentTarget.nextElementSibling as HTMLElement;\n                  menu.classList.toggle('hidden');\n                }}\n                className=\"px-3 py-2 border border-gray-300 rounded hover:bg-gray-50\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z\" />\n                </svg>\n              </button>\n              \n              <div className=\"hidden absolute right-0 mt-2 w-32 bg-white border border-gray-200 rounded-md shadow-lg z-10\">\n                <button\n                  onClick={() => onExpertAction('edit', expert)}\n                  className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                >\n                  Edit\n                </button>\n                <button\n                  onClick={() => onExpertAction('delete', expert)}\n                  className=\"block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50\"\n                >\n                  Delete\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}","size_bytes":7603},"src/client/src/components/ExpertStatsCards.tsx":{"content":"import { DashboardStats } from '../types/expert';\n\ninterface ExpertStatsCardsProps {\n  stats: DashboardStats;\n}\n\nexport function ExpertStatsCards({ stats }: ExpertStatsCardsProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {/* Total Experts */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <div className=\"flex items-center\">\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-gray-500\">Total Experts</p>\n            <p className=\"text-2xl font-semibold text-gray-900\">{stats.totalExperts}</p>\n          </div>\n          <div className=\"flex-shrink-0\">\n            <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n              <svg className=\"w-4 h-4 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Active Experts */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <div className=\"flex items-center\">\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-gray-500\">Active Experts</p>\n            <p className=\"text-2xl font-semibold text-gray-900\">{stats.activeExperts}</p>\n            {stats.totalExperts > 0 && (\n              <p className=\"text-xs text-gray-400 mt-1\">\n                {Math.round((stats.activeExperts / stats.totalExperts) * 100)}% of total\n              </p>\n            )}\n          </div>\n          <div className=\"flex-shrink-0\">\n            <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\n              <svg className=\"w-4 h-4 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Active Sessions */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <div className=\"flex items-center\">\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-gray-500\">Active Sessions</p>\n            <p className=\"text-2xl font-semibold text-gray-900\">{stats.activeSessions}</p>\n            <div className=\"flex items-center gap-1 mt-1\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-xs text-green-600\">Live</span>\n            </div>\n          </div>\n          <div className=\"flex-shrink-0\">\n            <div className=\"w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center\">\n              <svg className=\"w-4 h-4 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Consultation Requests */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <div className=\"flex items-center\">\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-gray-500\">Monthly Requests</p>\n            <p className=\"text-2xl font-semibold text-gray-900\">{stats.totalConsultationRequests}</p>\n            <p className=\"text-xs text-gray-400 mt-1\">\n              Avg Authority: {stats.averageAuthorityScore.toFixed(1)}\n            </p>\n          </div>\n          <div className=\"flex-shrink-0\">\n            <div className=\"w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center\">\n              <svg className=\"w-4 h-4 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Authority Levels Breakdown */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6 md:col-span-2 lg:col-span-4\">\n        <h3 className=\"text-sm font-medium text-gray-500 mb-4\">Authority Levels Distribution</h3>\n        <div className=\"grid grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-lg font-semibold text-yellow-600\">{stats.authorityLevels.emerging}</div>\n            <div className=\"text-xs text-gray-500\">Emerging</div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n              <div \n                className=\"bg-yellow-500 h-2 rounded-full\" \n                style={{ \n                  width: stats.totalExperts > 0 \n                    ? `${(stats.authorityLevels.emerging / stats.totalExperts) * 100}%` \n                    : '0%' \n                }}\n              ></div>\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-lg font-semibold text-blue-600\">{stats.authorityLevels.established}</div>\n            <div className=\"text-xs text-gray-500\">Established</div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n              <div \n                className=\"bg-blue-500 h-2 rounded-full\" \n                style={{ \n                  width: stats.totalExperts > 0 \n                    ? `${(stats.authorityLevels.established / stats.totalExperts) * 100}%` \n                    : '0%' \n                }}\n              ></div>\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-lg font-semibold text-green-600\">{stats.authorityLevels.recognized}</div>\n            <div className=\"text-xs text-gray-500\">Recognized</div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n              <div \n                className=\"bg-green-500 h-2 rounded-full\" \n                style={{ \n                  width: stats.totalExperts > 0 \n                    ? `${(stats.authorityLevels.recognized / stats.totalExperts) * 100}%` \n                    : '0%' \n                }}\n              ></div>\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-lg font-semibold text-purple-600\">{stats.authorityLevels['thought-leader']}</div>\n            <div className=\"text-xs text-gray-500\">Thought Leader</div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n              <div \n                className=\"bg-purple-500 h-2 rounded-full\" \n                style={{ \n                  width: stats.totalExperts > 0 \n                    ? `${(stats.authorityLevels['thought-leader'] / stats.totalExperts) * 100}%` \n                    : '0%' \n                }}\n              ></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7477},"src/client/src/components/ExportImportPanel.tsx":{"content":"import { useState } from 'react';\nimport { ExpertPersona, ExpertExportData, ExpertImportResult } from '../types/expert';\n\ninterface ExportImportPanelProps {\n  experts: ExpertPersona[];\n  onClose: () => void;\n  onImportComplete: () => void;\n}\n\nexport function ExportImportPanel({ experts, onClose, onImportComplete }: ExportImportPanelProps) {\n  const [importFile, setImportFile] = useState<File | null>(null);\n  const [importing, setImporting] = useState(false);\n  const [importResult, setImportResult] = useState<ExpertImportResult | null>(null);\n  const [importError, setImportError] = useState<string | null>(null);\n\n  const handleExport = () => {\n    const exportData: ExpertExportData = {\n      experts: experts,\n      exportDate: new Date().toISOString(),\n      version: '1.0.0',\n    };\n\n    const dataStr = JSON.stringify(exportData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(dataBlob);\n    link.download = `expert-personas-${new Date().toISOString().split('T')[0]}.json`;\n    \n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    URL.revokeObjectURL(link.href);\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== 'application/json') {\n        setImportError('Please select a valid JSON file.');\n        return;\n      }\n      setImportFile(file);\n      setImportError(null);\n      setImportResult(null);\n    }\n  };\n\n  const handleImport = async () => {\n    if (!importFile) {\n      setImportError('Please select a file to import.');\n      return;\n    }\n\n    setImporting(true);\n    setImportError(null);\n\n    try {\n      const fileContent = await importFile.text();\n      const importData: ExpertExportData = JSON.parse(fileContent);\n\n      // Validate the imported data structure\n      if (!importData.experts || !Array.isArray(importData.experts)) {\n        throw new Error('Invalid file format: Missing experts array');\n      }\n\n      let imported = 0;\n      let skipped = 0;\n      const errors: string[] = [];\n\n      // Import each expert\n      for (const expert of importData.experts) {\n        try {\n          // Prepare expert data for API (remove database-specific fields)\n          const expertData = {\n            expertName: expert.expertName,\n            expertiseFocus: expert.expertiseFocus,\n            targetBuyerSegments: expert.targetBuyerSegments,\n            authorityLevel: expert.authorityLevel,\n            primaryMarketLocation: expert.primaryMarketLocation,\n            secondaryMarketAreas: expert.secondaryMarketAreas || [],\n            geoContentSpecializations: expert.geoContentSpecializations,\n            authorityBuildingTopics: expert.authorityBuildingTopics,\n            citationWorthyExpertise: expert.citationWorthyExpertise,\n            platformExpertiseFocus: expert.platformExpertiseFocus,\n            contentPublicationSchedule: expert.contentPublicationSchedule,\n            expertVoiceCharacteristics: expert.expertVoiceCharacteristics,\n            browserFingerprintConfig: expert.browserFingerprintConfig || {\n              viewport: { width: 1920, height: 1080 }\n            },\n            // Add required encrypted fields with placeholder values\n            professionalBackgroundEncrypted: 'imported_profile',\n            expertiseCredentialsEncrypted: 'imported_credentials', \n            marketExperienceEncrypted: 'imported_experience',\n            personaEncryptionKeyId: 'imported_key_' + Date.now(),\n          };\n\n          const response = await fetch('/api/expert-personas', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(expertData),\n          });\n\n          if (response.ok) {\n            imported++;\n          } else {\n            const errorData = await response.json();\n            // Check if it's a duplicate\n            if (response.status === 409 || errorData.message?.includes('duplicate')) {\n              skipped++;\n            } else {\n              errors.push(`${expert.expertName}: ${errorData.message || 'Import failed'}`);\n            }\n          }\n        } catch (error) {\n          errors.push(`${expert.expertName}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      setImportResult({ imported, skipped, errors });\n      \n      if (imported > 0) {\n        // Small delay to let user see the result, then refresh\n        setTimeout(() => {\n          onImportComplete();\n        }, 2000);\n      }\n\n    } catch (error) {\n      console.error('Import error:', error);\n      setImportError(error instanceof Error ? error.message : 'Failed to import file');\n    } finally {\n      setImporting(false);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-gray-900\">Export / Import Experts</h2>\n            <p className=\"text-gray-600 text-sm mt-1\">\n              Backup your expert personas or import from another system\n            </p>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Export Section */}\n          <div className=\"border border-gray-200 rounded-lg p-4\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-3\">Export Experts</h3>\n            <p className=\"text-gray-600 text-sm mb-4\">\n              Download all your expert personas as a JSON file for backup or migration.\n            </p>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-sm text-gray-500\">\n                {experts.length} expert{experts.length !== 1 ? 's' : ''} available for export\n              </div>\n              <button\n                onClick={handleExport}\n                disabled={experts.length === 0}\n                className={`px-4 py-2 rounded text-sm ${\n                  experts.length > 0\n                    ? 'bg-blue-600 text-white hover:bg-blue-700'\n                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                }`}\n              >\n                Download JSON\n              </button>\n            </div>\n          </div>\n\n          {/* Import Section */}\n          <div className=\"border border-gray-200 rounded-lg p-4\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-3\">Import Experts</h3>\n            <p className=\"text-gray-600 text-sm mb-4\">\n              Upload a JSON file containing expert personas to import them into your system.\n            </p>\n\n            {/* File Selection */}\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Select JSON File\n              </label>\n              <input\n                type=\"file\"\n                accept=\".json,application/json\"\n                onChange={handleFileSelect}\n                className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\n              />\n            </div>\n\n            {/* Import Button */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-sm text-gray-500\">\n                {importFile ? `Selected: ${importFile.name}` : 'No file selected'}\n              </div>\n              <button\n                onClick={handleImport}\n                disabled={!importFile || importing}\n                className={`px-4 py-2 rounded text-sm ${\n                  importFile && !importing\n                    ? 'bg-green-600 text-white hover:bg-green-700'\n                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                }`}\n              >\n                {importing ? 'Importing...' : 'Import Experts'}\n              </button>\n            </div>\n\n            {/* Import Error */}\n            {importError && (\n              <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded\">\n                <p className=\"text-red-800 text-sm\">{importError}</p>\n              </div>\n            )}\n\n            {/* Import Result */}\n            {importResult && (\n              <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded\">\n                <h4 className=\"font-medium text-blue-900 mb-2\">Import Complete!</h4>\n                <div className=\"text-sm text-blue-800 space-y-1\">\n                  <p>✅ Imported: {importResult.imported} experts</p>\n                  {importResult.skipped > 0 && (\n                    <p>⚠️ Skipped: {importResult.skipped} experts (duplicates)</p>\n                  )}\n                  {importResult.errors.length > 0 && (\n                    <div>\n                      <p>❌ Errors: {importResult.errors.length}</p>\n                      <ul className=\"mt-1 ml-4 text-xs\">\n                        {importResult.errors.slice(0, 3).map((error, idx) => (\n                          <li key={idx}>• {error}</li>\n                        ))}\n                        {importResult.errors.length > 3 && (\n                          <li>• ... and {importResult.errors.length - 3} more</li>\n                        )}\n                      </ul>\n                    </div>\n                  )}\n                </div>\n                {importResult.imported > 0 && (\n                  <p className=\"text-xs text-blue-600 mt-2\">\n                    Refreshing dashboard in a moment...\n                  </p>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Tips */}\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <h4 className=\"font-medium text-gray-900 mb-2\">💡 Tips</h4>\n            <ul className=\"text-sm text-gray-600 space-y-1\">\n              <li>• Export files include all expert data and can be used for backup</li>\n              <li>• Import will skip experts with duplicate names to prevent conflicts</li>\n              <li>• Large import files may take a moment to process</li>\n              <li>• Encrypted fields will be regenerated during import for security</li>\n            </ul>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-6 bg-gray-50 border-t border-gray-200\">\n          <div className=\"flex justify-end\">\n            <button\n              onClick={onClose}\n              className=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11349},"src/client/src/components/SessionManagementPanel.tsx":{"content":"import { useState } from 'react';\nimport { ExpertSession } from '../types/expert';\n\ninterface SessionManagementPanelProps {\n  sessions: ExpertSession[];\n  activeSession: ExpertSession | null;\n  onClose: () => void;\n  onSwitchSession: (expertId: string) => Promise<void>;\n}\n\nexport function SessionManagementPanel({\n  sessions,\n  activeSession,\n  onClose,\n  onSwitchSession,\n}: SessionManagementPanelProps) {\n  const [switchingTo, setSwitchingTo] = useState<string | null>(null);\n\n  const handleSwitchSession = async (expertId: string) => {\n    if (switchingTo) return; // Prevent multiple simultaneous switches\n    \n    setSwitchingTo(expertId);\n    try {\n      await onSwitchSession(expertId);\n    } catch (error) {\n      console.error('Failed to switch session:', error);\n    } finally {\n      setSwitchingTo(null);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'text-green-600 bg-green-100';\n      case 'ready': return 'text-blue-600 bg-blue-100';\n      case 'switching': return 'text-yellow-600 bg-yellow-100';\n      case 'inactive': return 'text-gray-600 bg-gray-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getPlatformStatusIcon = (status: string) => {\n    switch (status) {\n      case 'healthy': return '🟢';\n      case 'warning': return '🟡';\n      case 'error': return '🔴';\n      case 'disconnected': return '⚫';\n      default: return '⚫';\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-gray-900\">Session Management</h2>\n            <p className=\"text-gray-600 text-sm mt-1\">\n              Manage expert sessions and platform connections\n            </p>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* Active Session Status */}\n        {activeSession && (\n          <div className=\"p-6 bg-green-50 border-b border-gray-200\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n              <h3 className=\"font-semibold text-green-800\">\n                Active Session: {activeSession.expertName}\n              </h3>\n              <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(activeSession.status)}`}>\n                {activeSession.status.toUpperCase()}\n              </span>\n            </div>\n            \n            {/* Platform Connections */}\n            <div className=\"mt-4\">\n              <p className=\"text-sm text-green-700 mb-2\">Platform Connections:</p>\n              <div className=\"flex flex-wrap gap-2\">\n                {activeSession.platformConnections.map(conn => (\n                  <div key={conn.platform} className=\"flex items-center gap-1 text-sm\">\n                    <span>{getPlatformStatusIcon(conn.status)}</span>\n                    <span className=\"capitalize\">{conn.platform}</span>\n                    {conn.lastCheck && (\n                      <span className=\"text-gray-500 text-xs\">\n                        ({new Date(conn.lastCheck).toLocaleTimeString()})\n                      </span>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Proxy Status */}\n            {activeSession.proxyStatus && (\n              <div className=\"mt-3\">\n                <p className=\"text-sm text-green-700\">\n                  Proxy: {activeSession.proxyStatus.assigned ? (\n                    <span className=\"text-green-600\">\n                      ✅ Assigned ({activeSession.proxyStatus.location || 'Unknown'})\n                    </span>\n                  ) : (\n                    <span className=\"text-yellow-600\">⚠️ Not Assigned</span>\n                  )}\n                </p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Sessions List */}\n        <div className=\"p-6 max-h-96 overflow-y-auto\">\n          <h3 className=\"font-semibold text-gray-900 mb-4\">All Sessions</h3>\n          \n          {sessions.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-500\">No expert sessions available.</p>\n              <p className=\"text-gray-400 text-sm mt-1\">Create an expert to start a session.</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {sessions.map((session) => (\n                <div\n                  key={session.expertId}\n                  className={`border rounded-lg p-4 ${\n                    activeSession?.expertId === session.expertId\n                      ? 'border-green-200 bg-green-50'\n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3\">\n                        <h4 className=\"font-medium text-gray-900\">{session.expertName}</h4>\n                        <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(session.status)}`}>\n                          {session.status.toUpperCase()}\n                        </span>\n                      </div>\n                      \n                      <div className=\"mt-2 flex items-center gap-4 text-sm text-gray-600\">\n                        <span>\n                          Platforms: {session.platformConnections.filter(p => p.connected).length}/{session.platformConnections.length}\n                        </span>\n                        {session.lastActivity && (\n                          <span>\n                            Last Activity: {new Date(session.lastActivity).toLocaleString()}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-2\">\n                      {activeSession?.expertId !== session.expertId ? (\n                        <button\n                          onClick={() => handleSwitchSession(session.expertId)}\n                          disabled={switchingTo !== null || session.status === 'switching'}\n                          className={`px-3 py-1 text-sm rounded ${\n                            switchingTo === session.expertId\n                              ? 'bg-yellow-100 text-yellow-700 cursor-not-allowed'\n                              : 'bg-blue-600 text-white hover:bg-blue-700'\n                          }`}\n                        >\n                          {switchingTo === session.expertId ? 'Switching...' : 'Activate'}\n                        </button>\n                      ) : (\n                        <span className=\"px-3 py-1 text-sm bg-green-100 text-green-700 rounded\">\n                          Active\n                        </span>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Platform Status Details */}\n                  <div className=\"mt-3 flex flex-wrap gap-2\">\n                    {session.platformConnections.map(conn => (\n                      <div\n                        key={conn.platform}\n                        className={`flex items-center gap-1 px-2 py-1 text-xs rounded ${\n                          conn.connected ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-600'\n                        }`}\n                      >\n                        <span>{getPlatformStatusIcon(conn.status)}</span>\n                        <span className=\"capitalize\">{conn.platform}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-6 bg-gray-50 border-t border-gray-200\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"text-sm text-gray-600\">\n              {sessions.length} session{sessions.length !== 1 ? 's' : ''} total\n            </div>\n            <button\n              onClick={onClose}\n              className=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8910},"src/client/src/hooks/useExpertPersonas.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { ExpertPersona, ExpertPersonaFormData, ExpertFilters, DashboardStats } from '../types/expert';\n\n// API base URL for expert personas\nconst API_BASE = '/api/expert-personas';\n\nexport function useExpertPersonas() {\n  const [experts, setExperts] = useState<ExpertPersona[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [filters, setFilters] = useState<ExpertFilters>({});\n\n  // Fetch all expert personas\n  const fetchExperts = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch(API_BASE);\n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch expert personas');\n      }\n      \n      setExperts(data.data || []);\n    } catch (err) {\n      console.error('Error fetching experts:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch experts');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Create new expert persona\n  const createExpert = async (expertData: ExpertPersonaFormData): Promise<ExpertPersona> => {\n    try {\n      const response = await fetch(API_BASE, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(expertData),\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to create expert persona');\n      }\n      \n      const newExpert = data.data;\n      setExperts(prev => [...prev, newExpert]);\n      \n      return newExpert;\n    } catch (err) {\n      console.error('Error creating expert:', err);\n      throw err;\n    }\n  };\n\n  // Update expert persona\n  const updateExpert = async (id: string, updates: Partial<ExpertPersonaFormData>): Promise<ExpertPersona> => {\n    try {\n      const response = await fetch(`${API_BASE}/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updates),\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to update expert persona');\n      }\n      \n      const updatedExpert = data.data;\n      setExperts(prev => prev.map(expert => \n        expert.id === id ? updatedExpert : expert\n      ));\n      \n      return updatedExpert;\n    } catch (err) {\n      console.error('Error updating expert:', err);\n      throw err;\n    }\n  };\n\n  // Delete expert persona\n  const deleteExpert = async (id: string): Promise<void> => {\n    try {\n      const response = await fetch(`${API_BASE}/${id}`, {\n        method: 'DELETE',\n      });\n      \n      if (!response.ok) {\n        const data = await response.json();\n        throw new Error(data.message || 'Failed to delete expert persona');\n      }\n      \n      setExperts(prev => prev.filter(expert => expert.id !== id));\n    } catch (err) {\n      console.error('Error deleting expert:', err);\n      throw err;\n    }\n  };\n\n  // Get filtered experts\n  const filteredExperts = experts.filter(expert => {\n    if (filters.expertiseFocus?.length && !filters.expertiseFocus.includes(expert.expertiseFocus as any)) {\n      return false;\n    }\n    \n    if (filters.authorityLevel?.length && !filters.authorityLevel.includes(expert.authorityLevel)) {\n      return false;\n    }\n    \n    if (filters.expertStatus?.length && !filters.expertStatus.includes(expert.expertStatus)) {\n      return false;\n    }\n    \n    if (filters.primaryMarketLocation?.length && !filters.primaryMarketLocation.includes(expert.primaryMarketLocation)) {\n      return false;\n    }\n    \n    if (filters.searchQuery) {\n      const query = filters.searchQuery.toLowerCase();\n      return expert.expertName.toLowerCase().includes(query) ||\n             expert.expertiseFocus.toLowerCase().includes(query) ||\n             expert.primaryMarketLocation.toLowerCase().includes(query);\n    }\n    \n    return true;\n  });\n\n  // Calculate dashboard stats\n  const stats: DashboardStats = {\n    totalExperts: experts.length,\n    activeExperts: experts.filter(e => e.expertStatus === 'active').length,\n    activeSessions: experts.filter(e => e.expertStatus === 'active').length, // For now, same as active experts\n    authorityLevels: {\n      emerging: experts.filter(e => e.authorityLevel === 'emerging').length,\n      established: experts.filter(e => e.authorityLevel === 'established').length,\n      recognized: experts.filter(e => e.authorityLevel === 'recognized').length,\n      'thought-leader': experts.filter(e => e.authorityLevel === 'thought-leader').length,\n    },\n    totalConsultationRequests: experts.reduce((sum, e) => sum + (e.monthlyConsultationRequests || 0), 0),\n    averageAuthorityScore: experts.length > 0 \n      ? experts.reduce((sum, e) => sum + (e.currentAuthorityScore || 0), 0) / experts.length \n      : 0,\n  };\n\n  // Initialize - fetch experts on mount\n  useEffect(() => {\n    fetchExperts();\n  }, [fetchExperts]);\n\n  return {\n    experts: filteredExperts,\n    allExperts: experts,\n    loading,\n    error,\n    filters,\n    stats,\n    setFilters,\n    fetchExperts,\n    createExpert,\n    updateExpert,\n    deleteExpert,\n  };\n}","size_bytes":5350},"src/client/src/hooks/useExpertSessions.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { ExpertSession, SessionStatus, PlatformConnectionStatus, ProxyStatus } from '../types/expert';\n\n// Session management hook with local storage persistence\nexport function useExpertSessions() {\n  const [sessions, setSessions] = useState<ExpertSession[]>([]);\n  const [activeSessionId, setActiveSessionId] = useState<string | null>(null);\n\n  // Load sessions from localStorage on mount\n  useEffect(() => {\n    const savedSessions = localStorage.getItem('expert-sessions');\n    const savedActiveSession = localStorage.getItem('active-session-id');\n    \n    if (savedSessions) {\n      try {\n        const parsedSessions = JSON.parse(savedSessions);\n        setSessions(parsedSessions);\n      } catch (err) {\n        console.error('Failed to parse saved sessions:', err);\n      }\n    }\n    \n    if (savedActiveSession) {\n      setActiveSessionId(savedActiveSession);\n    }\n  }, []);\n\n  // Save sessions to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('expert-sessions', JSON.stringify(sessions));\n  }, [sessions]);\n\n  // Save active session ID whenever it changes\n  useEffect(() => {\n    if (activeSessionId) {\n      localStorage.setItem('active-session-id', activeSessionId);\n    } else {\n      localStorage.removeItem('active-session-id');\n    }\n  }, [activeSessionId]);\n\n  // Create a new session for an expert\n  const createSession = useCallback((expertId: string, expertName: string) => {\n    const existingSession = sessions.find(s => s.expertId === expertId);\n    if (existingSession) {\n      return existingSession;\n    }\n\n    const newSession: ExpertSession = {\n      expertId,\n      expertName,\n      status: 'inactive',\n      platformConnections: [\n        { platform: 'medium', connected: false, status: 'disconnected' },\n        { platform: 'reddit', connected: false, status: 'disconnected' },\n        { platform: 'quora', connected: false, status: 'disconnected' },\n        { platform: 'facebook', connected: false, status: 'disconnected' },\n        { platform: 'linkedin', connected: false, status: 'disconnected' },\n      ],\n      proxyStatus: {\n        assigned: false,\n        status: 'inactive',\n      },\n    };\n\n    setSessions(prev => [...prev, newSession]);\n    return newSession;\n  }, [sessions]);\n\n  // Switch to a different expert session\n  const switchSession = useCallback(async (expertId: string): Promise<void> => {\n    return new Promise((resolve) => {\n      // Set current active session to switching\n      if (activeSessionId) {\n        setSessions(prev => prev.map(session => \n          session.expertId === activeSessionId \n            ? { ...session, status: 'switching' as SessionStatus }\n            : session\n        ));\n      }\n\n      // Set new session to switching\n      setSessions(prev => prev.map(session => \n        session.expertId === expertId \n          ? { ...session, status: 'switching' as SessionStatus }\n          : session\n      ));\n\n      // Simulate session switch delay\n      setTimeout(() => {\n        // Deactivate old session\n        if (activeSessionId) {\n          setSessions(prev => prev.map(session => \n            session.expertId === activeSessionId \n              ? { ...session, status: 'inactive' as SessionStatus }\n              : session\n          ));\n        }\n\n        // Activate new session\n        setSessions(prev => prev.map(session => \n          session.expertId === expertId \n            ? { \n                ...session, \n                status: 'active' as SessionStatus,\n                startTime: new Date().toISOString(),\n                lastActivity: new Date().toISOString(),\n              }\n            : session\n        ));\n\n        setActiveSessionId(expertId);\n        resolve();\n      }, 1500); // Simulate switch time\n    });\n  }, [activeSessionId]);\n\n  // Update session status\n  const updateSessionStatus = useCallback((expertId: string, status: SessionStatus) => {\n    setSessions(prev => prev.map(session => \n      session.expertId === expertId \n        ? { \n            ...session, \n            status,\n            lastActivity: new Date().toISOString(),\n          }\n        : session\n    ));\n  }, []);\n\n  // Update platform connection status\n  const updatePlatformConnection = useCallback((\n    expertId: string, \n    platform: string, \n    connected: boolean, \n    status: PlatformConnectionStatus['status']\n  ) => {\n    setSessions(prev => prev.map(session => \n      session.expertId === expertId \n        ? {\n            ...session,\n            platformConnections: session.platformConnections.map(conn =>\n              conn.platform === platform\n                ? { ...conn, connected, status, lastCheck: new Date().toISOString() }\n                : conn\n            ),\n            lastActivity: new Date().toISOString(),\n          }\n        : session\n    ));\n  }, []);\n\n  // Update proxy status\n  const updateProxyStatus = useCallback((expertId: string, proxyStatus: Partial<ProxyStatus>) => {\n    setSessions(prev => prev.map(session => \n      session.expertId === expertId \n        ? {\n            ...session,\n            proxyStatus: { \n              assigned: false,\n              status: 'inactive' as const,\n              ...session.proxyStatus, \n              ...proxyStatus \n            },\n            lastActivity: new Date().toISOString(),\n          }\n        : session\n    ));\n  }, []);\n\n  // End session\n  const endSession = useCallback((expertId: string) => {\n    setSessions(prev => prev.map(session => \n      session.expertId === expertId \n        ? { ...session, status: 'inactive' as SessionStatus }\n        : session\n    ));\n    \n    if (activeSessionId === expertId) {\n      setActiveSessionId(null);\n    }\n  }, [activeSessionId]);\n\n  // Get session by expert ID\n  const getSession = useCallback((expertId: string) => {\n    return sessions.find(session => session.expertId === expertId);\n  }, [sessions]);\n\n  // Get active session\n  const activeSession = activeSessionId ? getSession(activeSessionId) : null;\n\n  // Clear all sessions (for testing/reset)\n  const clearAllSessions = useCallback(() => {\n    setSessions([]);\n    setActiveSessionId(null);\n    localStorage.removeItem('expert-sessions');\n    localStorage.removeItem('active-session-id');\n  }, []);\n\n  return {\n    sessions,\n    activeSession,\n    activeSessionId,\n    createSession,\n    switchSession,\n    updateSessionStatus,\n    updatePlatformConnection,\n    updateProxyStatus,\n    endSession,\n    getSession,\n    clearAllSessions,\n  };\n}","size_bytes":6520},"src/client/src/types/expert.ts":{"content":"// Expert Persona Types and Interfaces\n\nexport interface ExpertPersona {\n  id: string;\n  adminUserId?: string;\n  expertName: string;\n  expertStatus: 'developing' | 'active' | 'paused' | 'archived';\n  expertiseFocus: string;\n  targetBuyerSegments: string[];\n  authorityLevel: 'emerging' | 'established' | 'recognized' | 'thought-leader';\n  \n  // Profile data (stored as encrypted in DB, but shown as plain text in UI)\n  professionalBackground?: string;\n  expertiseCredentials?: string;\n  marketExperience?: string;\n  \n  // Geographic expertise\n  primaryMarketLocation: string;\n  secondaryMarketAreas: string[];\n  localMarketKnowledgeDepth: number;\n  timezone: string;\n  \n  // Content and authority configuration\n  geoContentSpecializations: string[];\n  authorityBuildingTopics: string[];\n  citationWorthyExpertise: string[];\n  \n  // Platform strategy\n  platformExpertiseFocus: PlatformExpertiseFocus;\n  contentPublicationSchedule: ContentPublicationSchedule;\n  expertVoiceCharacteristics: ExpertVoiceCharacteristics;\n  \n  // Security and browser config\n  personaEncryptionKeyId: string;\n  browserFingerprintConfig: BrowserFingerprintConfig;\n  \n  // Performance metrics\n  currentAuthorityScore: number;\n  estimatedAiCitations: number;\n  expertRecognitionSignals: number;\n  thoughtLeadershipReach: number;\n  monthlyConsultationRequests: number;\n  consultationToReferralRate: number;\n  averageConsultationValue: number;\n  \n  // Timestamps\n  createdAt: string;\n  updatedAt: string;\n  lastExpertActivity?: string;\n}\n\nexport interface PlatformExpertiseFocus {\n  medium?: {\n    active: boolean;\n    contentTypes: string[];\n  };\n  reddit?: {\n    active: boolean;\n    subreddits: string[];\n  };\n  quora?: {\n    active: boolean;\n    topics: string[];\n  };\n  facebook?: {\n    active: boolean;\n    groups: string[];\n  };\n  linkedin?: {\n    active: boolean;\n    contentTypes: string[];\n  };\n}\n\nexport interface ContentPublicationSchedule {\n  frequency: 'daily' | 'weekly' | 'bi-weekly' | 'monthly';\n  timezone: string;\n  preferredTimes?: string[];\n}\n\nexport interface ExpertVoiceCharacteristics {\n  tone: 'professional' | 'friendly' | 'authoritative' | 'approachable';\n  expertise_level: 'beginner-friendly' | 'intermediate' | 'advanced' | 'expert-only';\n  target_audience: 'first-time-buyers' | 'investors' | 'expats' | 'locals' | 'all';\n}\n\nexport interface BrowserFingerprintConfig {\n  userAgent?: string;\n  viewport?: {\n    width: number;\n    height: number;\n  };\n  timezone?: string;\n  language?: string;\n}\n\n// Form-specific types for creation/editing\nexport interface ExpertPersonaFormData {\n  expertName: string;\n  expertiseFocus: ExpertiseFocus;\n  targetBuyerSegments: string[];\n  authorityLevel: AuthorityLevel;\n  primaryMarketLocation: string;\n  secondaryMarketAreas: string[];\n  professionalBackground: string;\n  expertiseCredentials: string;\n  marketExperience: string;\n  geoContentSpecializations: string[];\n  authorityBuildingTopics: string[];\n  citationWorthyExpertise: string[];\n  platformExpertiseFocus: PlatformExpertiseFocus;\n  contentPublicationSchedule: ContentPublicationSchedule;\n  expertVoiceCharacteristics: ExpertVoiceCharacteristics;\n  browserFingerprintConfig: BrowserFingerprintConfig;\n}\n\n// Philippines Real Estate Specializations\nexport type ExpertiseFocus = \n  | 'Manila Urban Property Expert'\n  | 'Cebu Island Lifestyle Expert' \n  | 'Investment ROI Analysis Expert'\n  | 'Expat Property Guidance Expert'\n  | 'Philippines Market Analysis Expert';\n\nexport type AuthorityLevel = \n  | 'emerging'\n  | 'established' \n  | 'recognized'\n  | 'thought-leader';\n\nexport type ExpertStatus = \n  | 'developing'\n  | 'active'\n  | 'paused'\n  | 'archived';\n\n// Session Management Types\nexport interface ExpertSession {\n  expertId: string;\n  expertName: string;\n  status: SessionStatus;\n  startTime?: string;\n  lastActivity?: string;\n  platformConnections: PlatformConnectionStatus[];\n  proxyStatus?: ProxyStatus;\n}\n\nexport type SessionStatus = \n  | 'inactive'\n  | 'ready'\n  | 'active'\n  | 'switching';\n\nexport interface PlatformConnectionStatus {\n  platform: 'medium' | 'reddit' | 'quora' | 'facebook' | 'linkedin';\n  connected: boolean;\n  status: 'healthy' | 'warning' | 'error' | 'disconnected';\n  lastCheck?: string;\n}\n\nexport interface ProxyStatus {\n  assigned: boolean;\n  location?: string;\n  status: 'active' | 'inactive' | 'error';\n  provider?: 'proxy-cheap' | 'other';\n}\n\n// Dashboard Stats\nexport interface DashboardStats {\n  totalExperts: number;\n  activeExperts: number;\n  activeSessions: number;\n  authorityLevels: {\n    emerging: number;\n    established: number;\n    recognized: number;\n    'thought-leader': number;\n  };\n  totalConsultationRequests: number;\n  averageAuthorityScore: number;\n}\n\n// Filter and Search Types\nexport interface ExpertFilters {\n  expertiseFocus?: ExpertiseFocus[];\n  authorityLevel?: AuthorityLevel[];\n  expertStatus?: ExpertStatus[];\n  primaryMarketLocation?: string[];\n  searchQuery?: string;\n}\n\n// Export/Import Types\nexport interface ExpertExportData {\n  experts: ExpertPersona[];\n  exportDate: string;\n  version: string;\n}\n\nexport interface ExpertImportResult {\n  imported: number;\n  skipped: number;\n  errors: string[];\n}","size_bytes":5165},"src/server/proxy-cheap-client.ts":{"content":"import crypto from 'crypto';\n// Simple logger implementation\nconst logger = {\n  info: (message: string, ...args: any[]) => console.log(`[INFO] ${message}`, ...args),\n  error: (message: string, ...args: any[]) => console.error(`[ERROR] ${message}`, ...args),\n  warn: (message: string, ...args: any[]) => console.warn(`[WARN] ${message}`, ...args)\n};\n\n// Proxy-Cheap API Types\nexport interface ProxyCheapConfig {\n  apiKey: string;\n  baseUrl: string;\n  timeout?: number;\n  retryAttempts?: number;\n  rateLimitDelay?: number;\n}\n\nexport interface ProxyLocation {\n  country: string;\n  city?: string;\n  region?: string;\n  provider?: string;\n}\n\nexport interface ProxyCredentials {\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n  protocol: 'http' | 'https' | 'socks5';\n}\n\nexport interface ProxyDetails {\n  id: string;\n  status: 'active' | 'inactive' | 'suspended' | 'expired';\n  credentials: ProxyCredentials;\n  location: ProxyLocation;\n  createdAt: string;\n  expiresAt: string;\n  trafficUsage: {\n    used: number;\n    limit: number;\n    unit: 'MB' | 'GB';\n  };\n  cost: {\n    daily: number;\n    monthly: number;\n    currency: 'USD';\n  };\n}\n\nexport interface ProxyUsageStats {\n  proxyId: string;\n  period: 'daily' | 'weekly' | 'monthly';\n  requests: number;\n  bandwidth: number;\n  uptime: number;\n  averageResponseTime: number;\n  successRate: number;\n}\n\nexport interface GeoLocation {\n  ip: string;\n  country: string;\n  countryCode: string;\n  city: string;\n  region: string;\n  latitude: number;\n  longitude: number;\n  timezone: string;\n  isp: string;\n  type: 'residential' | 'datacenter' | 'mobile';\n}\n\nexport interface ProxyTestResult {\n  success: boolean;\n  responseTime: number;\n  ip: string;\n  location: GeoLocation;\n  error?: string;\n  timestamp: string;\n}\n\n// Rate Limiting Helper\nclass RateLimiter {\n  private requests: number[] = [];\n  private maxRequests: number;\n  private windowMs: number;\n\n  constructor(maxRequests: number = 100, windowMs: number = 60000) {\n    this.maxRequests = maxRequests;\n    this.windowMs = windowMs;\n  }\n\n  async waitIfNeeded(): Promise<void> {\n    const now = Date.now();\n    this.requests = this.requests.filter(time => now - time < this.windowMs);\n    \n    if (this.requests.length >= this.maxRequests) {\n      const oldestRequest = Math.min(...this.requests);\n      const waitTime = this.windowMs - (now - oldestRequest);\n      if (waitTime > 0) {\n        logger.info(`Rate limit reached, waiting ${waitTime}ms`);\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n      }\n    }\n    \n    this.requests.push(now);\n  }\n}\n\n// Custom Error Classes\nexport class ProxyCheapAPIError extends Error {\n  constructor(\n    message: string,\n    public statusCode?: number,\n    public response?: any\n  ) {\n    super(message);\n    this.name = 'ProxyCheapAPIError';\n  }\n}\n\nexport class ProxyCheapConnectionError extends Error {\n  constructor(message: string, public originalError?: Error) {\n    super(message);\n    this.name = 'ProxyCheapConnectionError';\n  }\n}\n\n// Main Proxy-Cheap API Client\nexport class ProxyCheapClient {\n  private config: Required<ProxyCheapConfig>;\n  private rateLimiter: RateLimiter;\n\n  constructor(config: ProxyCheapConfig) {\n    this.config = {\n      apiKey: config.apiKey,\n      baseUrl: config.baseUrl.replace(/\\/$/, ''), // Remove trailing slash\n      timeout: config.timeout || 30000,\n      retryAttempts: config.retryAttempts || 3,\n      rateLimitDelay: config.rateLimitDelay || 1000\n    };\n    \n    this.rateLimiter = new RateLimiter(100, 60000); // 100 requests per minute\n    \n    if (!this.config.apiKey) {\n      throw new Error('Proxy-Cheap API key is required');\n    }\n  }\n\n  // Private API Request Helper\n  private async makeRequest(\n    endpoint: string,\n    options: {\n      method?: 'GET' | 'POST' | 'DELETE' | 'PUT';\n      body?: any;\n      headers?: Record<string, string>;\n      retryCount?: number;\n    } = {}\n  ): Promise<any> {\n    const {\n      method = 'GET',\n      body,\n      headers = {},\n      retryCount = 0\n    } = options;\n\n    await this.rateLimiter.waitIfNeeded();\n\n    const url = `${this.config.baseUrl}${endpoint}`;\n    const requestId = crypto.randomBytes(4).toString('hex');\n    \n    logger.info(`[${requestId}] Making ${method} request to ${endpoint}`);\n\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.config.timeout);\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n          'Content-Type': 'application/json',\n          'User-Agent': 'GEO-Expert-Authority-App/1.0',\n          ...headers\n        },\n        body: body ? JSON.stringify(body) : undefined,\n        signal: controller.signal\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({})) as any;\n        throw new ProxyCheapAPIError(\n          errorData.message || `HTTP ${response.status}: ${response.statusText}`,\n          response.status,\n          errorData\n        );\n      }\n\n      const data = await response.json();\n      logger.info(`[${requestId}] Request successful`);\n      return data;\n\n    } catch (error) {\n      logger.error(`[${requestId}] Request failed:`, error as any);\n\n      if (error instanceof ProxyCheapAPIError) {\n        throw error;\n      }\n\n      if ((error as Error).name === 'AbortError') {\n        throw new ProxyCheapConnectionError('Request timeout');\n      }\n\n      // Retry logic for connection errors\n      if (retryCount < this.config.retryAttempts) {\n        logger.info(`[${requestId}] Retrying request (${retryCount + 1}/${this.config.retryAttempts})`);\n        await new Promise(resolve => setTimeout(resolve, this.config.rateLimitDelay * (retryCount + 1)));\n        return this.makeRequest(endpoint, { ...options, retryCount: retryCount + 1 });\n      }\n\n      throw new ProxyCheapConnectionError('Failed to connect to Proxy-Cheap API', error as Error);\n    }\n  }\n\n  // Core API Functions\n\n  /**\n   * Create a new proxy with Philippines location preference\n   */\n  async createProxy(location: ProxyLocation, options: {\n    duration?: number; // days\n    bandwidth?: number; // GB\n    type?: 'residential' | 'datacenter';\n  } = {}): Promise<ProxyDetails> {\n    const payload = {\n      location: {\n        country: location.country,\n        city: location.city,\n        region: location.region\n      },\n      type: options.type || 'residential',\n      duration: options.duration || 30,\n      bandwidth: options.bandwidth || 10\n    };\n\n    logger.info('Creating new proxy with location:', location);\n    const response = await this.makeRequest('/api/v1/proxies', {\n      method: 'POST',\n      body: payload\n    });\n\n    return this.formatProxyDetails(response.data);\n  }\n\n  /**\n   * Delete/release a proxy\n   */\n  async deleteProxy(proxyId: string): Promise<boolean> {\n    logger.info(`Deleting proxy: ${proxyId}`);\n    await this.makeRequest(`/api/v1/proxies/${proxyId}`, {\n      method: 'DELETE'\n    });\n    return true;\n  }\n\n  /**\n   * Get proxy status and details\n   */\n  async getProxyStatus(proxyId: string): Promise<ProxyDetails> {\n    logger.info(`Getting status for proxy: ${proxyId}`);\n    const response = await this.makeRequest(`/api/v1/proxies/${proxyId}`);\n    return this.formatProxyDetails(response.data);\n  }\n\n  /**\n   * Test proxy connection and get geolocation\n   */\n  async testProxyConnection(credentials: ProxyCredentials): Promise<ProxyTestResult> {\n    const startTime = Date.now();\n    \n    try {\n      logger.info(`Testing proxy connection: ${credentials.host}:${credentials.port}`);\n      \n      // Test connection through the proxy\n      const testResponse = await this.makeRequest('/api/v1/proxy/test', {\n        method: 'POST',\n        body: {\n          host: credentials.host,\n          port: credentials.port,\n          username: credentials.username,\n          password: credentials.password,\n          protocol: credentials.protocol\n        }\n      });\n\n      const responseTime = Date.now() - startTime;\n      \n      return {\n        success: true,\n        responseTime,\n        ip: testResponse.ip,\n        location: testResponse.location,\n        timestamp: new Date().toISOString()\n      };\n\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      \n      return {\n        success: false,\n        responseTime,\n        ip: '',\n        location: {} as GeoLocation,\n        error: (error as Error).message,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  /**\n   * Get proxy usage statistics\n   */\n  async getProxyUsageStats(proxyId: string, period: 'daily' | 'weekly' | 'monthly' = 'daily'): Promise<ProxyUsageStats> {\n    logger.info(`Getting usage stats for proxy ${proxyId} (${period})`);\n    const response = await this.makeRequest(`/api/v1/proxies/${proxyId}/stats?period=${period}`);\n    \n    return {\n      proxyId,\n      period,\n      requests: response.data.requests || 0,\n      bandwidth: response.data.bandwidth || 0,\n      uptime: response.data.uptime || 0,\n      averageResponseTime: response.data.averageResponseTime || 0,\n      successRate: response.data.successRate || 0\n    };\n  }\n\n  /**\n   * Get IP geolocation information\n   */\n  async getIpGeolocation(ip: string): Promise<GeoLocation> {\n    logger.info(`Getting geolocation for IP: ${ip}`);\n    const response = await this.makeRequest(`/api/v1/geolocation/${ip}`);\n    \n    return {\n      ip,\n      country: response.data.country,\n      countryCode: response.data.countryCode,\n      city: response.data.city,\n      region: response.data.region,\n      latitude: response.data.latitude,\n      longitude: response.data.longitude,\n      timezone: response.data.timezone,\n      isp: response.data.isp,\n      type: response.data.type || 'residential'\n    };\n  }\n\n  /**\n   * Validate Philippines location for proxy\n   */\n  async validatePhilippinesLocation(credentials: ProxyCredentials): Promise<{\n    isValid: boolean;\n    location: GeoLocation | null;\n    reason?: string;\n  }> {\n    try {\n      const testResult = await this.testProxyConnection(credentials);\n      \n      if (!testResult.success) {\n        return {\n          isValid: false,\n          location: null,\n          reason: 'Proxy connection failed'\n        };\n      }\n\n      const location = testResult.location;\n      const isPhilippines = location.countryCode === 'PH' || \n                           location.country.toLowerCase().includes('philippines');\n\n      return {\n        isValid: isPhilippines,\n        location,\n        reason: isPhilippines ? undefined : `Proxy located in ${location.country}, not Philippines`\n      };\n\n    } catch (error) {\n      return {\n        isValid: false,\n        location: null,\n        reason: `Validation failed: ${(error as Error).message}`\n      };\n    }\n  }\n\n  /**\n   * Get account usage and billing information\n   */\n  async getAccountUsage(): Promise<{\n    currentUsage: number;\n    monthlyLimit: number;\n    billingPeriod: string;\n    activeProxies: number;\n    totalCost: number;\n  }> {\n    logger.info('Getting account usage information');\n    const response = await this.makeRequest('/api/v1/account/usage');\n    \n    return {\n      currentUsage: response.data.currentUsage || 0,\n      monthlyLimit: response.data.monthlyLimit || 0,\n      billingPeriod: response.data.billingPeriod,\n      activeProxies: response.data.activeProxies || 0,\n      totalCost: response.data.totalCost || 0\n    };\n  }\n\n  // Helper Methods\n  private formatProxyDetails(rawData: any): ProxyDetails {\n    return {\n      id: rawData.id,\n      status: rawData.status || 'inactive',\n      credentials: {\n        host: rawData.host,\n        port: rawData.port,\n        username: rawData.username,\n        password: rawData.password,\n        protocol: rawData.protocol || 'http'\n      },\n      location: {\n        country: rawData.location?.country || '',\n        city: rawData.location?.city,\n        region: rawData.location?.region,\n        provider: rawData.location?.provider\n      },\n      createdAt: rawData.createdAt,\n      expiresAt: rawData.expiresAt,\n      trafficUsage: {\n        used: rawData.usage?.used || 0,\n        limit: rawData.usage?.limit || 0,\n        unit: rawData.usage?.unit || 'GB'\n      },\n      cost: {\n        daily: rawData.cost?.daily || 0,\n        monthly: rawData.cost?.monthly || 0,\n        currency: 'USD'\n      }\n    };\n  }\n\n  /**\n   * Health check for the Proxy-Cheap API\n   */\n  async healthCheck(): Promise<boolean> {\n    try {\n      await this.makeRequest('/api/v1/health');\n      return true;\n    } catch (error) {\n      logger.error('Proxy-Cheap API health check failed:', error as any);\n      return false;\n    }\n  }\n}\n\n// Factory function to create client instance\nexport function createProxyCheapClient(): ProxyCheapClient {\n  const apiKey = process.env.PROXY_CHEAP_API_KEY;\n  const baseUrl = process.env.PROXY_CHEAP_BASE_URL || 'https://api.proxy-cheap.com';\n\n  if (!apiKey) {\n    throw new Error('PROXY_CHEAP_API_KEY environment variable is required');\n  }\n\n  return new ProxyCheapClient({\n    apiKey,\n    baseUrl,\n    timeout: 30000,\n    retryAttempts: 3,\n    rateLimitDelay: 1000\n  });\n}","size_bytes":13228},"src/shared/schema.ts":{"content":"import { pgTable, uuid, varchar, text, jsonb, integer, decimal, boolean, timestamp, index } from 'drizzle-orm/pg-core';\n// import { createInsertSchema, createSelectSchema } from 'drizzle-zod';\nimport { z } from 'zod';\n\n// Admin Users Table\nexport const adminUsers = pgTable('admin_users', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  username: varchar('username', { length: 50 }).notNull().unique(),\n  email: varchar('email', { length: 255 }).notNull().unique(),\n  passwordHash: text('password_hash').notNull(),\n  fullName: varchar('full_name', { length: 100 }),\n  role: varchar('role', { length: 20 }).default('admin'),\n  status: varchar('status', { length: 20 }).default('active'),\n  lastLogin: timestamp('last_login'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow()\n});\n\n// Expert Personas Table (Authority-Focused Real Estate Experts)\nexport const expertPersonas = pgTable('expert_personas', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  adminUserId: uuid('admin_user_id').references(() => adminUsers.id, { onDelete: 'cascade' }),\n  \n  // Core Expert Identity\n  expertName: varchar('expert_name', { length: 100 }).notNull(),\n  expertStatus: varchar('expert_status', { length: 20 }).default('developing'),\n  \n  // Real Estate Expertise Specialization\n  expertiseFocus: varchar('expertise_focus', { length: 50 }).notNull(),\n  targetBuyerSegments: jsonb('target_buyer_segments').notNull(),\n  authorityLevel: varchar('authority_level', { length: 20 }).default('emerging'),\n  \n  // Expert Profile (Encrypted)\n  professionalBackgroundEncrypted: text('professional_background_encrypted').notNull(),\n  expertiseCredentialsEncrypted: text('expertise_credentials_encrypted').notNull(),\n  marketExperienceEncrypted: text('market_experience_encrypted').notNull(),\n  \n  // Geographic Expertise (Philippines Focus)\n  primaryMarketLocation: varchar('primary_market_location', { length: 50 }).notNull(),\n  secondaryMarketAreas: jsonb('secondary_market_areas').default([]),\n  localMarketKnowledgeDepth: integer('local_market_knowledge_depth').default(1),\n  timezone: varchar('timezone', { length: 50 }).default('Asia/Manila'),\n  \n  // GEO Content Authority Configuration\n  geoContentSpecializations: jsonb('geo_content_specializations').notNull(),\n  authorityBuildingTopics: jsonb('authority_building_topics').notNull(),\n  citationWorthyExpertise: jsonb('citation_worthy_expertise').notNull(),\n  \n  // Platform Authority Strategy\n  platformExpertiseFocus: jsonb('platform_expertise_focus').notNull(),\n  contentPublicationSchedule: jsonb('content_publication_schedule').notNull(),\n  expertVoiceCharacteristics: jsonb('expert_voice_characteristics').notNull(),\n  \n  // Security Configuration\n  personaEncryptionKeyId: varchar('persona_encryption_key_id', { length: 255 }).notNull(),\n  browserFingerprintConfig: jsonb('browser_fingerprint_config').notNull(),\n  \n  // Authority Building Performance\n  currentAuthorityScore: decimal('current_authority_score', { precision: 5, scale: 2 }).default('0.00'),\n  estimatedAiCitations: integer('estimated_ai_citations').default(0),\n  expertRecognitionSignals: integer('expert_recognition_signals').default(0),\n  thoughtLeadershipReach: integer('thought_leadership_reach').default(0),\n  \n  // Lead Generation Through Expertise\n  monthlyConsultationRequests: integer('monthly_consultation_requests').default(0),\n  consultationToReferralRate: decimal('consultation_to_referral_rate', { precision: 5, scale: 4 }).default('0.0000'),\n  averageConsultationValue: decimal('average_consultation_value', { precision: 8, scale: 2 }).default('0.00'),\n  \n  // Metadata\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n  lastExpertActivity: timestamp('last_expert_activity')\n});\n\n// GEO Platform Accounts\nexport const geoPlatformAccounts = pgTable('geo_platform_accounts', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  personaId: uuid('persona_id').references(() => expertPersonas.id, { onDelete: 'cascade' }),\n  platformType: varchar('platform_type', { length: 50 }).notNull(),\n  platformPriority: integer('platform_priority').notNull(),\n  geoOptimizationLevel: varchar('geo_optimization_level', { length: 20 }).default('high'),\n  \n  // Account Details\n  username: varchar('username', { length: 100 }).notNull(),\n  displayName: varchar('display_name', { length: 100 }),\n  expertBio: text('expert_bio'),\n  expertCredentials: text('expert_credentials'),\n  profileOptimizationScore: decimal('profile_optimization_score', { precision: 3, scale: 2 }).default('0.00'),\n  \n  // Authentication (Encrypted)\n  credentialsEncrypted: text('credentials_encrypted').notNull(),\n  authTokensEncrypted: text('auth_tokens_encrypted'),\n  \n  // Account Authority Status\n  accountStatus: varchar('account_status', { length: 20 }).default('building'),\n  platformAuthorityLevel: varchar('platform_authority_level', { length: 20 }).default('newcomer'),\n  expertVerificationStatus: varchar('expert_verification_status', { length: 20 }).default('unverified'),\n  accountReputationScore: decimal('account_reputation_score', { precision: 5, scale: 2 }).default('0.00'),\n  \n  // Content Authority Metrics\n  totalAuthorityContent: integer('total_authority_content').default(0),\n  averageContentEngagement: decimal('average_content_engagement', { precision: 5, scale: 2 }).default('0.00'),\n  expertRecognitionSignals: integer('expert_recognition_signals').default(0),\n  thoughtLeadershipIndicators: integer('thought_leadership_indicators').default(0),\n  \n  // Platform-Specific GEO Configuration\n  platformGeoSettings: jsonb('platform_geo_settings').notNull(),\n  contentAuthorityStrategy: jsonb('content_authority_strategy').notNull(),\n  expertEngagementApproach: jsonb('expert_engagement_approach').notNull(),\n  citationOptimizationConfig: jsonb('citation_optimization_config').notNull(),\n  \n  // Authority-Based Lead Generation\n  monthlyExpertInquiries: integer('monthly_expert_inquiries').default(0),\n  consultationRequests: integer('consultation_requests').default(0),\n  authorityConversionRate: decimal('authority_conversion_rate', { precision: 5, scale: 4 }).default('0.0000'),\n  leadQualityFromAuthority: decimal('lead_quality_from_authority', { precision: 3, scale: 2 }).default('0.00'),\n  \n  // Metadata\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n  lastActivity: timestamp('last_activity')\n});\n\n// Authority Content Publications\nexport const authorityContentPublications = pgTable('authority_content_publications', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  personaId: uuid('persona_id').references(() => expertPersonas.id, { onDelete: 'cascade' }),\n  platformAccountId: uuid('platform_account_id').references(() => geoPlatformAccounts.id, { onDelete: 'cascade' }),\n  \n  // Content Details\n  contentTitle: text('content_title').notNull(),\n  contentType: varchar('content_type', { length: 50 }).notNull(),\n  contentCategory: varchar('content_category', { length: 50 }),\n  contentUrl: text('content_url'),\n  \n  // Content Authority Metrics\n  contentLength: integer('content_length'),\n  authorityScore: decimal('authority_score', { precision: 3, scale: 2 }).default('0.00'),\n  aiCitationPotentialScore: decimal('ai_citation_potential_score', { precision: 3, scale: 2 }).default('0.00'),\n  \n  // Performance Tracking\n  viewCount: integer('view_count').default(0),\n  engagementCount: integer('engagement_count').default(0),\n  shareCount: integer('share_count').default(0),\n  expertRecognitionSignals: integer('expert_recognition_signals').default(0),\n  \n  // Lead Generation Attribution\n  consultationInquiriesAttributed: integer('consultation_inquiries_attributed').default(0),\n  leadConversionsAttributed: integer('lead_conversions_attributed').default(0),\n  revenueAttributed: decimal('revenue_attributed', { precision: 10, scale: 2 }).default('0.00'),\n  \n  // Publication Status\n  publicationStatus: varchar('publication_status', { length: 20 }).default('draft'),\n  publishedAt: timestamp('published_at'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow()\n});\n\n// Proxy Assignments\nexport const proxyAssignments = pgTable('proxy_assignments', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  personaId: uuid('persona_id').references(() => expertPersonas.id, { onDelete: 'cascade' }).unique(),\n  \n  // Proxy-Cheap Integration\n  proxyCheapId: varchar('proxy_cheap_id', { length: 100 }),\n  proxyProvider: varchar('proxy_provider', { length: 50 }).default('proxy-cheap'),\n  proxyType: varchar('proxy_type', { length: 20 }).default('residential'),\n  proxyLocation: varchar('proxy_location', { length: 50 }).notNull(),\n  \n  // Assignment Workflow Status\n  assignmentStatus: varchar('assignment_status', { length: 20 }).default('unassigned'), // unassigned, requesting, testing, active, failed, maintenance\n  \n  // Connection Details (Encrypted)\n  proxyHostEncrypted: text('proxy_host_encrypted'),\n  proxyPortEncrypted: text('proxy_port_encrypted'),\n  proxyUsernameEncrypted: text('proxy_username_encrypted'),\n  proxyPasswordEncrypted: text('proxy_password_encrypted'),\n  proxyCredentialsEncrypted: text('proxy_credentials_encrypted'), // Full credentials JSON encrypted\n  \n  // Geographic Validation (Philippines Focus)\n  detectedCountry: varchar('detected_country', { length: 3 }), // ISO country code\n  detectedCity: varchar('detected_city', { length: 100 }),\n  detectedRegion: varchar('detected_region', { length: 100 }),\n  isPhilippinesVerified: boolean('is_philippines_verified').default(false),\n  geoValidationLastCheck: timestamp('geo_validation_last_check'),\n  \n  // IP Reputation & Security\n  ipReputationScore: decimal('ip_reputation_score', { precision: 3, scale: 2 }),\n  isResidentialVerified: boolean('is_residential_verified').default(false),\n  blacklistCheckStatus: varchar('blacklist_check_status', { length: 20 }), // clean, flagged, unknown\n  lastReputationCheck: timestamp('last_reputation_check'),\n  \n  // Health Monitoring\n  proxyStatus: varchar('proxy_status', { length: 20 }).default('inactive'), // inactive, active, failed, maintenance\n  lastHealthCheck: timestamp('last_health_check'),\n  healthCheckStatus: varchar('health_check_status', { length: 20 }), // healthy, degraded, failed\n  consecutiveFailures: integer('consecutive_failures').default(0),\n  \n  // Performance Metrics\n  connectionSuccessRate: decimal('connection_success_rate', { precision: 5, scale: 2 }).default('0.00'),\n  averageResponseTime: integer('average_response_time'),\n  bandwidthUsageMb: decimal('bandwidth_usage_mb', { precision: 10, scale: 2 }).default('0.00'),\n  totalRequests: integer('total_requests').default(0),\n  failedRequests: integer('failed_requests').default(0),\n  \n  // Cost Management\n  monthlyCostUsd: decimal('monthly_cost_usd', { precision: 6, scale: 2 }),\n  dailyCostUsd: decimal('daily_cost_usd', { precision: 6, scale: 2 }),\n  projectedMonthlyCost: decimal('projected_monthly_cost', { precision: 6, scale: 2 }),\n  costTrackingStartDate: timestamp('cost_tracking_start_date'),\n  lastCostUpdate: timestamp('last_cost_update'),\n  \n  // Security & Encryption\n  encryptionKeyId: varchar('encryption_key_id', { length: 255 }),\n  \n  // Audit Trail\n  assignmentReason: text('assignment_reason'),\n  lastStatusChange: timestamp('last_status_change'),\n  statusChangeReason: text('status_change_reason'),\n  \n  // Metadata\n  assignedAt: timestamp('assigned_at'),\n  activatedAt: timestamp('activated_at'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow()\n});\n\n// Expert Phone Numbers Table (Twilio Integration)\nexport const expertPhoneNumbers = pgTable('expert_phone_numbers', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  personaId: uuid('persona_id').references(() => expertPersonas.id, { onDelete: 'cascade' }),\n  \n  // Twilio Phone Configuration\n  twilioPhoneNumber: varchar('twilio_phone_number', { length: 20 }).notNull().unique(), // +63XXXXXXXXXX\n  twilioPhoneSid: varchar('twilio_phone_sid', { length: 255 }).notNull().unique(),\n  phoneNumberStatus: varchar('phone_number_status', { length: 20 }).default('provisioning'), // provisioning, active, suspended, failed\n  \n  // Phone Number Details\n  countryCode: varchar('country_code', { length: 3 }).default('PH'),\n  friendlyName: varchar('friendly_name', { length: 100 }),\n  phoneNumberType: varchar('phone_number_type', { length: 20 }), // local, mobile, toll-free\n  capabilities: jsonb('capabilities').notNull(), // voice, sms, mms capabilities\n  \n  // Expert Assignment\n  assignmentStatus: varchar('assignment_status', { length: 20 }).default('assigned'), // assigned, unassigned, reserved\n  assignedAt: timestamp('assigned_at').defaultNow(),\n  \n  // Cost Management\n  monthlyCostUsd: decimal('monthly_cost_usd', { precision: 6, scale: 2 }),\n  usageThisMonth: decimal('usage_this_month', { precision: 8, scale: 4 }).default('0.0000'),\n  \n  // Verification Configuration\n  webhookUrl: varchar('webhook_url', { length: 500 }),\n  verificationEnabled: boolean('verification_enabled').default(true),\n  \n  // Security & Encryption\n  encryptionKeyId: varchar('encryption_key_id', { length: 255 }),\n  \n  // Health Monitoring\n  lastHealthCheck: timestamp('last_health_check'),\n  healthStatus: varchar('health_status', { length: 20 }).default('unknown'), // healthy, degraded, failed, unknown\n  consecutiveFailures: integer('consecutive_failures').default(0),\n  \n  // Metadata\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n  lastActivity: timestamp('last_activity')\n});\n\n// SMS Verification Sessions Table\nexport const smsVerificationSessions = pgTable('sms_verification_sessions', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  personaId: uuid('persona_id').references(() => expertPersonas.id, { onDelete: 'cascade' }),\n  phoneNumberId: uuid('phone_number_id').references(() => expertPhoneNumbers.id, { onDelete: 'cascade' }),\n  \n  // Platform Context\n  platformType: varchar('platform_type', { length: 50 }).notNull(), // medium, reddit, quora, facebook, linkedin\n  platformAction: varchar('platform_action', { length: 50 }).notNull(), // signup, login, phone_verification, 2fa_setup\n  \n  // Session Management\n  sessionStatus: varchar('session_status', { length: 20 }).default('active'), // active, completed, expired, failed\n  sessionStartedAt: timestamp('session_started_at').defaultNow(),\n  sessionExpiredAt: timestamp('session_expired_at'),\n  \n  // Expected Verification\n  expectedCodePattern: varchar('expected_code_pattern', { length: 50 }), // 4-digit, 6-digit, 8-digit, alphanumeric\n  maxRetries: integer('max_retries').default(3),\n  attemptsRemaining: integer('attempts_remaining').default(3),\n  \n  // Session Metadata\n  userAgent: text('user_agent'),\n  ipAddress: varchar('ip_address', { length: 45 }),\n  sessionNotes: text('session_notes'),\n  \n  // Metadata\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n  completedAt: timestamp('completed_at')\n});\n\n// SMS Messages Table (Incoming Verification SMS)\nexport const smsMessages = pgTable('sms_messages', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  sessionId: uuid('session_id').references(() => smsVerificationSessions.id, { onDelete: 'cascade' }),\n  phoneNumberId: uuid('phone_number_id').references(() => expertPhoneNumbers.id, { onDelete: 'cascade' }),\n  \n  // Twilio Message Details\n  twilioMessageSid: varchar('twilio_message_sid', { length: 255 }).notNull().unique(),\n  fromPhoneNumber: varchar('from_phone_number', { length: 20 }).notNull(),\n  toPhoneNumber: varchar('to_phone_number', { length: 20 }).notNull(),\n  \n  // Message Content\n  messageBody: text('message_body').notNull(),\n  messageDirection: varchar('message_direction', { length: 10 }).default('inbound'), // inbound, outbound\n  messageStatus: varchar('message_status', { length: 20 }), // received, delivered, failed, etc.\n  \n  // Verification Code Extraction\n  verificationCode: varchar('verification_code', { length: 20 }),\n  codeConfidence: decimal('code_confidence', { precision: 3, scale: 2 }), // 0.00-1.00 confidence score\n  codePattern: varchar('code_pattern', { length: 50 }), // detected pattern type\n  \n  // Platform Detection\n  detectedPlatform: varchar('detected_platform', { length: 50 }),\n  platformConfidence: decimal('platform_confidence', { precision: 3, scale: 2 }),\n  \n  // Processing Status\n  processingStatus: varchar('processing_status', { length: 20 }).default('pending'), // pending, processed, failed, ignored\n  processingNotes: text('processing_notes'),\n  deliveredToDashboard: boolean('delivered_to_dashboard').default(false),\n  \n  // Metadata\n  receivedAt: timestamp('received_at').defaultNow(),\n  processedAt: timestamp('processed_at'),\n  createdAt: timestamp('created_at').defaultNow()\n});\n\n// Verification Codes Table (Parsed and Validated Codes)\nexport const verificationCodes = pgTable('verification_codes', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  sessionId: uuid('session_id').references(() => smsVerificationSessions.id, { onDelete: 'cascade' }),\n  messageId: uuid('message_id').references(() => smsMessages.id, { onDelete: 'cascade' }),\n  \n  // Code Details\n  verificationCode: varchar('verification_code', { length: 20 }).notNull(),\n  codeType: varchar('code_type', { length: 20 }).notNull(), // numeric, alphanumeric, mixed\n  codeLength: integer('code_length').notNull(),\n  \n  // Validation\n  isValid: boolean('is_valid').default(true),\n  validationScore: decimal('validation_score', { precision: 3, scale: 2 }),\n  \n  // Platform Context\n  platformType: varchar('platform_type', { length: 50 }).notNull(),\n  codeUsageType: varchar('code_usage_type', { length: 50 }), // phone_verification, 2fa, login, signup\n  \n  // Status Tracking\n  codeStatus: varchar('code_status', { length: 20 }).default('active'), // active, used, expired, invalid\n  usedAt: timestamp('used_at'),\n  expiresAt: timestamp('expires_at'),\n  \n  // Dashboard Delivery\n  sentToDashboard: boolean('sent_to_dashboard').default(false),\n  dashboardDeliveryAt: timestamp('dashboard_delivery_at'),\n  viewedByUser: boolean('viewed_by_user').default(false),\n  viewedAt: timestamp('viewed_at'),\n  \n  // Metadata\n  extractedAt: timestamp('extracted_at').defaultNow(),\n  createdAt: timestamp('created_at').defaultNow()\n});\n\n// SMS Webhook Events Table (Audit Trail)\nexport const smsWebhookEvents = pgTable('sms_webhook_events', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  \n  // Webhook Details\n  webhookEventType: varchar('webhook_event_type', { length: 50 }).notNull(), // message_received, delivery_status, etc.\n  twilioEventSid: varchar('twilio_event_sid', { length: 255 }),\n  \n  // Request Details\n  requestBody: jsonb('request_body').notNull(),\n  requestHeaders: jsonb('request_headers'),\n  sourceIp: varchar('source_ip', { length: 45 }),\n  \n  // Processing Status\n  processingStatus: varchar('processing_status', { length: 20 }).default('pending'), // pending, processed, failed\n  processingError: text('processing_error'),\n  processingDuration: integer('processing_duration'), // milliseconds\n  \n  // Associated Records\n  messageId: uuid('message_id').references(() => smsMessages.id),\n  sessionId: uuid('session_id').references(() => smsVerificationSessions.id),\n  \n  // Metadata\n  receivedAt: timestamp('received_at').defaultNow(),\n  processedAt: timestamp('processed_at'),\n  createdAt: timestamp('created_at').defaultNow()\n});\n\n// Indexes\nexport const expertPersonasNameIdx = index('idx_expert_personas_name').on(expertPersonas.expertName);\nexport const expertPersonasStatusIdx = index('idx_expert_personas_status').on(expertPersonas.expertStatus);\nexport const expertPersonasAuthorityIdx = index('idx_expert_personas_authority').on(expertPersonas.authorityLevel);\n\nexport const geoPlatformAccountsPersonaIdx = index('idx_geo_platform_accounts_persona').on(geoPlatformAccounts.personaId);\nexport const geoPlatformAccountsPlatformIdx = index('idx_geo_platform_accounts_platform').on(geoPlatformAccounts.platformType);\n\nexport const contentPublicationsPersonaIdx = index('idx_content_publications_persona').on(authorityContentPublications.personaId);\nexport const contentPublicationsPlatformIdx = index('idx_content_publications_platform').on(authorityContentPublications.platformAccountId);\n\nexport const proxyAssignmentsPersonaIdx = index('idx_proxy_assignments_persona').on(proxyAssignments.personaId);\n\n// Twilio SMS Indexes\nexport const expertPhoneNumbersPersonaIdx = index('idx_expert_phone_numbers_persona').on(expertPhoneNumbers.personaId);\nexport const expertPhoneNumbersStatusIdx = index('idx_expert_phone_numbers_status').on(expertPhoneNumbers.phoneNumberStatus);\nexport const expertPhoneNumbersTwilioNumberIdx = index('idx_expert_phone_numbers_twilio').on(expertPhoneNumbers.twilioPhoneNumber);\n\nexport const smsVerificationSessionsPersonaIdx = index('idx_sms_verification_sessions_persona').on(smsVerificationSessions.personaId);\nexport const smsVerificationSessionsPhoneIdx = index('idx_sms_verification_sessions_phone').on(smsVerificationSessions.phoneNumberId);\nexport const smsVerificationSessionsStatusIdx = index('idx_sms_verification_sessions_status').on(smsVerificationSessions.sessionStatus);\n\nexport const smsMessagesSessionIdx = index('idx_sms_messages_session').on(smsMessages.sessionId);\nexport const smsMessagesPhoneIdx = index('idx_sms_messages_phone').on(smsMessages.phoneNumberId);\nexport const smsMessagesTwilioSidIdx = index('idx_sms_messages_twilio_sid').on(smsMessages.twilioMessageSid);\n\nexport const verificationCodesSessionIdx = index('idx_verification_codes_session').on(verificationCodes.sessionId);\nexport const verificationCodesStatusIdx = index('idx_verification_codes_status').on(verificationCodes.codeStatus);\n\nexport const smsWebhookEventsTypeIdx = index('idx_sms_webhook_events_type').on(smsWebhookEvents.webhookEventType);\n\n// Zod schemas - will add later once drizzle-zod is properly configured\n// export const insertAdminUserSchema = createInsertSchema(adminUsers);\n// export const selectAdminUserSchema = createSelectSchema(adminUsers);\n\n// Types\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type NewAdminUser = typeof adminUsers.$inferInsert;\n\nexport type ExpertPersona = typeof expertPersonas.$inferSelect;\nexport type NewExpertPersona = typeof expertPersonas.$inferInsert;\n\nexport type GeoPlatformAccount = typeof geoPlatformAccounts.$inferSelect;\nexport type NewGeoPlatformAccount = typeof geoPlatformAccounts.$inferInsert;\n\nexport type AuthorityContentPublication = typeof authorityContentPublications.$inferSelect;\nexport type NewAuthorityContentPublication = typeof authorityContentPublications.$inferInsert;\n\nexport type ProxyAssignment = typeof proxyAssignments.$inferSelect;\nexport type NewProxyAssignment = typeof proxyAssignments.$inferInsert;\n\nexport type ExpertPhoneNumber = typeof expertPhoneNumbers.$inferSelect;\nexport type NewExpertPhoneNumber = typeof expertPhoneNumbers.$inferInsert;\n\nexport type SmsVerificationSession = typeof smsVerificationSessions.$inferSelect;\nexport type NewSmsVerificationSession = typeof smsVerificationSessions.$inferInsert;\n\nexport type SmsMessage = typeof smsMessages.$inferSelect;\nexport type NewSmsMessage = typeof smsMessages.$inferInsert;\n\nexport type VerificationCode = typeof verificationCodes.$inferSelect;\nexport type NewVerificationCode = typeof verificationCodes.$inferInsert;\n\nexport type SmsWebhookEvent = typeof smsWebhookEvents.$inferSelect;\nexport type NewSmsWebhookEvent = typeof smsWebhookEvents.$inferInsert;","size_bytes":23658},"src/server/encryption-service.ts":{"content":"import crypto from 'crypto';\n\n// Encryption Configuration\nconst ALGORITHM = 'aes-256-gcm';\nconst KEY_LENGTH = 32; // 256 bits\nconst IV_LENGTH = 12; // 96 bits for GCM (12 bytes recommended)\nconst TAG_LENGTH = 16; // 128 bits\nconst SALT_LENGTH = 32; // 256 bits\n\n// Types for encryption\nexport interface EncryptedData {\n  encryptedData: string; // Base64 encoded\n  iv: string; // Base64 encoded\n  tag: string; // Base64 encoded\n  keyId: string; // Expert-specific key identifier\n}\n\nexport interface DecryptedCredentials {\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n  protocol: string;\n  metadata?: Record<string, any>;\n}\n\n// Custom Error Classes\nexport class EncryptionError extends Error {\n  constructor(message: string, public code?: string) {\n    super(message);\n    this.name = 'EncryptionError';\n  }\n}\n\nexport class DecryptionError extends Error {\n  constructor(message: string, public code?: string) {\n    super(message);\n    this.name = 'DecryptionError';\n  }\n}\n\nexport class KeyManagementError extends Error {\n  constructor(message: string, public code?: string) {\n    super(message);\n    this.name = 'KeyManagementError';\n  }\n}\n\n// Expert-specific key management\nclass ExpertKeyManager {\n  private keys: Map<string, Buffer> = new Map();\n  private masterKey: Buffer;\n\n  constructor() {\n    // Initialize master key from environment - REQUIRED for production\n    const masterKeyEnv = process.env.MASTER_ENCRYPTION_KEY;\n    if (!masterKeyEnv) {\n      throw new KeyManagementError(\n        'MASTER_ENCRYPTION_KEY environment variable is required. ' +\n        'Generate with: openssl rand -base64 32'\n      );\n    }\n    \n    this.masterKey = Buffer.from(masterKeyEnv, 'base64');\n    if (this.masterKey.length !== KEY_LENGTH) {\n      throw new KeyManagementError(\n        `Invalid master key length. Expected ${KEY_LENGTH} bytes, got ${this.masterKey.length}. ` +\n        'Generate with: openssl rand -base64 32'\n      );\n    }\n  }\n\n  /**\n   * Generate expert-specific encryption key using deterministic derivation\n   */\n  generateExpertKey(expertId: string): string {\n    // Use deterministic key ID for persistence across restarts\n    const keyId = `expert_${expertId}`;\n    \n    // Only generate if not already exists\n    if (!this.keys.has(keyId)) {\n      // Derive expert-specific key using PBKDF2 (deterministic)\n      const expertKey = crypto.pbkdf2Sync(\n        this.masterKey,\n        Buffer.from(`expert_salt_${expertId}`, 'utf8'), // Deterministic salt\n        100000, // iterations\n        KEY_LENGTH,\n        'sha256'\n      );\n\n      // Store the key\n      this.keys.set(keyId, expertKey);\n    }\n    \n    return keyId;\n  }\n\n  /**\n   * Retrieve expert-specific encryption key (derive on-demand if not found)\n   */\n  getExpertKey(keyId: string): Buffer {\n    let key = this.keys.get(keyId);\n    if (!key) {\n      // Derive key on-demand from keyId (handles cold starts)\n      const expertId = this.extractExpertIdFromKeyId(keyId);\n      if (!expertId) {\n        throw new KeyManagementError(`Invalid key ID format: ${keyId}`);\n      }\n      \n      // Regenerate the key using deterministic derivation\n      key = crypto.pbkdf2Sync(\n        this.masterKey,\n        Buffer.from(`expert_salt_${expertId}`, 'utf8'),\n        100000,\n        KEY_LENGTH,\n        'sha256'\n      );\n      \n      // Cache the derived key\n      this.keys.set(keyId, key);\n    }\n    return key;\n  }\n\n  /**\n   * Extract expertId from keyId for on-demand key derivation\n   */\n  private extractExpertIdFromKeyId(keyId: string): string | null {\n    if (!keyId.startsWith('expert_')) {\n      return null;\n    }\n    return keyId.substring(7); // Remove 'expert_' prefix\n  }\n\n  /**\n   * Rotate expert key (generate new key for expert)\n   */\n  rotateExpertKey(expertId: string, oldKeyId?: string): string {\n    const newKeyId = this.generateExpertKey(expertId);\n    \n    // Mark old key for deletion (if provided)\n    if (oldKeyId) {\n      this.keys.delete(oldKeyId);\n    }\n    \n    return newKeyId;\n  }\n\n  /**\n   * Validate key ID format and accessibility\n   */\n  validateKeyId(keyId: string): boolean {\n    // Validate format first\n    if (!keyId.startsWith('expert_')) {\n      return false;\n    }\n    \n    // Check if we can derive/access the key\n    try {\n      this.getExpertKey(keyId);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Clean up unused keys (should be called periodically)\n   */\n  cleanupUnusedKeys(activeKeyIds: string[]): void {\n    const allKeys = Array.from(this.keys.keys());\n    const unusedKeys = allKeys.filter(keyId => !activeKeyIds.includes(keyId));\n    \n    unusedKeys.forEach(keyId => {\n      this.keys.delete(keyId);\n    });\n    \n    console.log(`🔐 Cleaned up ${unusedKeys.length} unused encryption keys`);\n  }\n}\n\n// Main Encryption Service\nexport class EncryptionService {\n  private keyManager: ExpertKeyManager;\n\n  constructor() {\n    this.keyManager = new ExpertKeyManager();\n  }\n\n  /**\n   * Encrypt proxy credentials for specific expert\n   */\n  async encryptProxyCredentials(\n    credentials: DecryptedCredentials,\n    expertId: string,\n    keyId?: string\n  ): Promise<EncryptedData> {\n    try {\n      // Generate or use existing key\n      const currentKeyId = keyId || this.keyManager.generateExpertKey(expertId);\n      const encryptionKey = this.keyManager.getExpertKey(currentKeyId);\n\n      // Prepare data for encryption\n      const dataToEncrypt = JSON.stringify(credentials);\n      const iv = crypto.randomBytes(IV_LENGTH);\n\n      // Create cipher with proper GCM implementation\n      const cipher = crypto.createCipheriv(ALGORITHM, encryptionKey, iv);\n\n      // Encrypt data\n      let encrypted = cipher.update(dataToEncrypt, 'utf8', 'base64');\n      encrypted += cipher.final('base64');\n\n      // Get authentication tag\n      const tag = cipher.getAuthTag();\n\n      return {\n        encryptedData: encrypted,\n        iv: iv.toString('base64'),\n        tag: tag.toString('base64'),\n        keyId: currentKeyId\n      };\n\n    } catch (error) {\n      throw new EncryptionError(\n        `Failed to encrypt proxy credentials: ${(error as Error).message}`,\n        'ENCRYPTION_FAILED'\n      );\n    }\n  }\n\n  /**\n   * Decrypt proxy credentials for specific expert\n   */\n  async decryptProxyCredentials(encryptedData: EncryptedData): Promise<DecryptedCredentials> {\n    try {\n      // Validate key ID and get encryption key\n      if (!this.keyManager.validateKeyId(encryptedData.keyId)) {\n        throw new DecryptionError('Invalid or inaccessible encryption key', 'INVALID_KEY');\n      }\n\n      const encryptionKey = this.keyManager.getExpertKey(encryptedData.keyId);\n\n      // Prepare decryption\n      const iv = Buffer.from(encryptedData.iv, 'base64');\n      const tag = Buffer.from(encryptedData.tag, 'base64');\n\n      // Create decipher with proper GCM implementation\n      const decipher = crypto.createDecipheriv(ALGORITHM, encryptionKey, iv);\n      decipher.setAuthTag(tag);\n\n      // Decrypt data\n      let decrypted = decipher.update(encryptedData.encryptedData, 'base64', 'utf8');\n      decrypted += decipher.final('utf8');\n\n      // Parse and validate decrypted data\n      const credentials = JSON.parse(decrypted) as DecryptedCredentials;\n      this.validateCredentials(credentials);\n\n      return credentials;\n\n    } catch (error) {\n      if (error instanceof DecryptionError) {\n        throw error;\n      }\n      throw new DecryptionError(\n        `Failed to decrypt proxy credentials: ${(error as Error).message}`,\n        'DECRYPTION_FAILED'\n      );\n    }\n  }\n\n  /**\n   * Re-encrypt credentials with new key (for key rotation)\n   */\n  async reencryptCredentials(\n    encryptedData: EncryptedData,\n    expertId: string\n  ): Promise<EncryptedData> {\n    try {\n      // Decrypt with old key\n      const credentials = await this.decryptProxyCredentials(encryptedData);\n      \n      // Generate new key and encrypt\n      const newKeyId = this.keyManager.rotateExpertKey(expertId, encryptedData.keyId);\n      return await this.encryptProxyCredentials(credentials, expertId, newKeyId);\n\n    } catch (error) {\n      throw new EncryptionError(\n        `Failed to re-encrypt credentials: ${(error as Error).message}`,\n        'REENCRYPTION_FAILED'\n      );\n    }\n  }\n\n  /**\n   * Securely generate new expert encryption key\n   */\n  generateExpertEncryptionKey(expertId: string): string {\n    if (!expertId || expertId.trim().length === 0) {\n      throw new KeyManagementError('Expert ID is required for key generation');\n    }\n    \n    return this.keyManager.generateExpertKey(expertId);\n  }\n\n  /**\n   * Validate key accessibility for expert\n   */\n  validateExpertKey(keyId: string): boolean {\n    return this.keyManager.validateKeyId(keyId);\n  }\n\n  /**\n   * Rotate encryption key for expert\n   */\n  rotateExpertKey(expertId: string, currentKeyId?: string): string {\n    return this.keyManager.rotateExpertKey(expertId, currentKeyId);\n  }\n\n  /**\n   * Encrypt any sensitive data with expert context\n   */\n  async encryptSensitiveData(\n    data: Record<string, any>,\n    expertId: string,\n    keyId?: string\n  ): Promise<EncryptedData> {\n    return this.encryptProxyCredentials(data as DecryptedCredentials, expertId, keyId);\n  }\n\n  /**\n   * Decrypt any sensitive data with expert context\n   */\n  async decryptSensitiveData(encryptedData: EncryptedData): Promise<Record<string, any>> {\n    return this.decryptProxyCredentials(encryptedData) as Record<string, any>;\n  }\n\n  /**\n   * Validate proxy credentials structure\n   */\n  private validateCredentials(credentials: DecryptedCredentials): void {\n    const required = ['host', 'port', 'username', 'password', 'protocol'];\n    const missing = required.filter(field => !(field in credentials));\n    \n    if (missing.length > 0) {\n      throw new DecryptionError(\n        `Missing required credential fields: ${missing.join(', ')}`,\n        'INVALID_CREDENTIALS'\n      );\n    }\n\n    // Validate port is a number\n    if (typeof credentials.port !== 'number' || credentials.port < 1 || credentials.port > 65535) {\n      throw new DecryptionError('Invalid port number', 'INVALID_PORT');\n    }\n\n    // Validate protocol\n    const validProtocols = ['http', 'https', 'socks5', 'socks4'];\n    if (!validProtocols.includes(credentials.protocol.toLowerCase())) {\n      throw new DecryptionError(\n        `Invalid protocol. Must be one of: ${validProtocols.join(', ')}`,\n        'INVALID_PROTOCOL'\n      );\n    }\n  }\n\n  /**\n   * Health check for encryption service\n   */\n  async healthCheck(): Promise<{\n    status: 'healthy' | 'degraded' | 'unhealthy';\n    details: Record<string, any>;\n  }> {\n    try {\n      // Test encryption/decryption cycle\n      const testData = {\n        host: 'test.example.com',\n        port: 8080,\n        username: 'test',\n        password: 'test123',\n        protocol: 'http'\n      };\n\n      const testExpertId = 'health_check_test';\n      const encrypted = await this.encryptProxyCredentials(testData, testExpertId);\n      const decrypted = await this.decryptProxyCredentials(encrypted);\n\n      // Verify data integrity\n      const isDataIntact = JSON.stringify(testData) === JSON.stringify(decrypted);\n\n      return {\n        status: isDataIntact ? 'healthy' : 'degraded',\n        details: {\n          encryptionTest: isDataIntact,\n          algorithm: ALGORITHM,\n          keyLength: KEY_LENGTH,\n          timestamp: new Date().toISOString()\n        }\n      };\n\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        details: {\n          error: (error as Error).message,\n          timestamp: new Date().toISOString()\n        }\n      };\n    }\n  }\n\n  /**\n   * Get encryption service metrics\n   */\n  getMetrics(): {\n    activeKeys: number;\n    algorithm: string;\n    keyLength: number;\n    serviceStatus: string;\n  } {\n    return {\n      activeKeys: this.keyManager['keys'].size,\n      algorithm: ALGORITHM,\n      keyLength: KEY_LENGTH,\n      serviceStatus: 'operational'\n    };\n  }\n}\n\n// Singleton instance\nlet encryptionServiceInstance: EncryptionService | null = null;\n\n/**\n * Get singleton encryption service instance\n */\nexport function getEncryptionService(): EncryptionService {\n  if (!encryptionServiceInstance) {\n    encryptionServiceInstance = new EncryptionService();\n  }\n  return encryptionServiceInstance;\n}\n\n/**\n * Utility function to encrypt proxy credentials\n */\nexport async function encryptProxyCredentials(\n  credentials: DecryptedCredentials,\n  expertId: string\n): Promise<EncryptedData> {\n  const service = getEncryptionService();\n  return service.encryptProxyCredentials(credentials, expertId);\n}\n\n/**\n * Utility function to decrypt proxy credentials\n */\nexport async function decryptProxyCredentials(\n  encryptedData: EncryptedData\n): Promise<DecryptedCredentials> {\n  const service = getEncryptionService();\n  return service.decryptProxyCredentials(encryptedData);\n}","size_bytes":12852},"src/server/proxy-assignment-service.ts":{"content":"import { db } from './db/index';\nimport { proxyAssignments, expertPersonas } from '../shared/schema';\nimport { ProxyCheapClient, createProxyCheapClient, ProxyDetails, ProxyTestResult } from './proxy-cheap-client';\nimport { getEncryptionService, EncryptedData, DecryptedCredentials } from './encryption-service';\nimport { eq, and, desc } from 'drizzle-orm';\n\n// Types for proxy assignment workflow\nexport interface ProxyAssignmentRequest {\n  expertId: string;\n  preferredLocation: {\n    country: string;\n    city?: string;\n    region?: string;\n  };\n  budget?: {\n    maxMonthlyCost: number;\n    maxDailyCost: number;\n  };\n  assignmentReason?: string;\n}\n\nexport interface ProxyAssignmentResult {\n  success: boolean;\n  assignmentId?: string;\n  proxyDetails?: ProxyDetails;\n  error?: string;\n  warnings?: string[];\n  costProjection?: {\n    dailyCost: number;\n    monthlyCost: number;\n  };\n}\n\nexport interface ExpertProxyStatus {\n  expertId: string;\n  hasActiveProxy: boolean;\n  proxyDetails?: {\n    id: string;\n    status: string;\n    location: string;\n    healthStatus: string;\n    costToDate: number;\n    assignedAt: string;\n  };\n  budgetStatus: {\n    currentMonthlyCost: number;\n    budgetLimit: number;\n    percentUsed: number;\n    canAssignMore: boolean;\n  };\n}\n\n// Assignment workflow status types\nexport type AssignmentStatus = \n  | 'unassigned' \n  | 'requesting' \n  | 'testing' \n  | 'active' \n  | 'failed' \n  | 'maintenance';\n\n// Custom errors\nexport class ProxyAssignmentError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public details?: any\n  ) {\n    super(message);\n    this.name = 'ProxyAssignmentError';\n  }\n}\n\n// Budget constants\nconst BUDGET_LIMITS = {\n  MAX_MONTHLY_COST: 6.35, // USD\n  MAX_PROXIES_PER_EXPERT: 5,\n  BUDGET_WARNING_THRESHOLD: 0.8, // 80%\n  BUDGET_CRITICAL_THRESHOLD: 1.0 // 100%\n};\n\n// Philippines locations for proxy validation\nconst PHILIPPINES_LOCATIONS = [\n  { country: 'PH', city: 'Manila', region: 'Metro Manila' },\n  { country: 'PH', city: 'Cebu', region: 'Central Visayas' },\n  { country: 'PH', city: 'Davao', region: 'Davao Region' },\n  { country: 'PH', city: 'Quezon City', region: 'Metro Manila' },\n  { country: 'PH', city: 'Makati', region: 'Metro Manila' }\n];\n\n// Main Proxy Assignment Service\nexport class ProxyAssignmentService {\n  private proxyCheapClient: ProxyCheapClient;\n  private encryptionService: ReturnType<typeof getEncryptionService>;\n\n  constructor() {\n    this.proxyCheapClient = createProxyCheapClient();\n    this.encryptionService = getEncryptionService();\n  }\n\n  /**\n   * Complete proxy assignment workflow for expert\n   */\n  async assignProxyToExpert(request: ProxyAssignmentRequest): Promise<ProxyAssignmentResult> {\n    const { expertId } = request;\n    console.log(`🔄 Starting proxy assignment for expert: ${expertId}`);\n\n    try {\n      // Step 1: Validate expert exists and budget constraints\n      await this.validateExpertAndBudget(expertId, request.budget);\n\n      // Step 2: Check if expert already has active proxy\n      const existingProxy = await this.getExpertActiveProxy(expertId);\n      if (existingProxy) {\n        throw new ProxyAssignmentError(\n          'Expert already has an active proxy assigned',\n          'PROXY_ALREADY_EXISTS',\n          { existingProxyId: existingProxy.id }\n        );\n      }\n\n      // Step 3: Update assignment status to 'requesting'\n      const assignmentId = await this.createProxyAssignment(expertId, 'requesting', request);\n      \n      // Step 4: Request proxy from Proxy-Cheap API\n      const proxyDetails = await this.requestProxyFromAPI(request.preferredLocation);\n      \n      // Step 5: Update assignment status to 'testing'\n      await this.updateAssignmentStatus(assignmentId, 'testing');\n      \n      // Step 6: Test proxy connection and validate Philippines location\n      const testResult = await this.testAndValidateProxy(proxyDetails);\n      \n      if (!testResult.success) {\n        await this.updateAssignmentStatus(assignmentId, 'failed');\n        throw new ProxyAssignmentError(\n          'Proxy failed connection or location validation',\n          'PROXY_VALIDATION_FAILED',\n          testResult\n        );\n      }\n\n      // Step 7: Encrypt and store proxy credentials\n      const encryptedCredentials = await this.encryptAndStoreCredentials(\n        proxyDetails, \n        expertId,\n        assignmentId\n      );\n\n      // Step 8: Activate proxy assignment\n      await this.activateProxyAssignment(assignmentId, proxyDetails, encryptedCredentials);\n\n      console.log(`✅ Proxy successfully assigned to expert: ${expertId}`);\n      \n      return {\n        success: true,\n        assignmentId,\n        proxyDetails,\n        costProjection: {\n          dailyCost: proxyDetails.cost.daily,\n          monthlyCost: proxyDetails.cost.monthly\n        }\n      };\n\n    } catch (error) {\n      console.error(`❌ Proxy assignment failed for expert ${expertId}:`, error);\n      \n      if (error instanceof ProxyAssignmentError) {\n        return {\n          success: false,\n          error: error.message,\n          warnings: error.details ? [JSON.stringify(error.details)] : undefined\n        };\n      }\n\n      return {\n        success: false,\n        error: `Assignment failed: ${(error as Error).message}`\n      };\n    }\n  }\n\n  /**\n   * Release proxy assignment for expert\n   */\n  async releaseProxyFromExpert(expertId: string, reason?: string): Promise<boolean> {\n    console.log(`🔄 Releasing proxy for expert: ${expertId}`);\n\n    try {\n      // Get current proxy assignment\n      const assignment = await db\n        .select()\n        .from(proxyAssignments)\n        .where(eq(proxyAssignments.personaId, expertId))\n        .limit(1);\n\n      if (assignment.length === 0) {\n        throw new ProxyAssignmentError(\n          'No active proxy assignment found for expert',\n          'NO_PROXY_ASSIGNED'\n        );\n      }\n\n      const proxyData = assignment[0];\n      \n      // Delete proxy from Proxy-Cheap API if we have the external ID\n      if (proxyData.proxyCheapId) {\n        try {\n          await this.proxyCheapClient.deleteProxy(proxyData.proxyCheapId);\n        } catch (error) {\n          console.warn(`⚠️ Failed to delete proxy from Proxy-Cheap API: ${(error as Error).message}`);\n        }\n      }\n\n      // Remove assignment from database\n      await db\n        .delete(proxyAssignments)\n        .where(eq(proxyAssignments.personaId, expertId));\n\n      console.log(`✅ Proxy released for expert: ${expertId}`);\n      return true;\n\n    } catch (error) {\n      console.error(`❌ Failed to release proxy for expert ${expertId}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Get expert proxy status and budget information\n   */\n  async getExpertProxyStatus(expertId: string): Promise<ExpertProxyStatus> {\n    // Get current proxy assignment\n    const assignment = await this.getExpertActiveProxy(expertId);\n    \n    // Calculate budget status\n    const budgetStatus = await this.calculateExpertBudgetStatus(expertId);\n\n    return {\n      expertId,\n      hasActiveProxy: !!assignment,\n      proxyDetails: assignment ? {\n        id: assignment.id,\n        status: assignment.assignmentStatus || 'unknown',\n        location: assignment.proxyLocation,\n        healthStatus: assignment.healthCheckStatus || 'unknown',\n        costToDate: parseFloat(assignment.monthlyCostUsd?.toString() || '0'),\n        assignedAt: assignment.assignedAt?.toISOString() || ''\n      } : undefined,\n      budgetStatus\n    };\n  }\n\n  /**\n   * Perform health check on assigned proxy\n   */\n  async performProxyHealthCheck(expertId: string): Promise<{\n    success: boolean;\n    healthStatus: string;\n    responseTime?: number;\n    location?: any;\n    error?: string;\n  }> {\n    try {\n      const assignment = await this.getExpertActiveProxy(expertId);\n      if (!assignment) {\n        return {\n          success: false,\n          healthStatus: 'no_proxy',\n          error: 'No active proxy assignment found'\n        };\n      }\n\n      // Decrypt credentials\n      const credentials = await this.decryptProxyCredentials(assignment);\n      \n      // Test connection\n      const testResult = await this.proxyCheapClient.testProxyConnection({\n        host: credentials.host,\n        port: credentials.port,\n        username: credentials.username,\n        password: credentials.password,\n        protocol: credentials.protocol as 'http' | 'https' | 'socks5'\n      });\n      \n      // Update health check data\n      await this.updateProxyHealthStatus(assignment.id, testResult);\n\n      return {\n        success: testResult.success,\n        healthStatus: testResult.success ? 'healthy' : 'failed',\n        responseTime: testResult.responseTime,\n        location: testResult.location,\n        error: testResult.error\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        healthStatus: 'error',\n        error: (error as Error).message\n      };\n    }\n  }\n\n  /**\n   * Get all proxy assignments with status summary\n   */\n  async getProxyAssignmentsSummary(): Promise<{\n    totalAssignments: number;\n    activeProxies: number;\n    failedProxies: number;\n    totalMonthlyCost: number;\n    averageResponseTime: number;\n  }> {\n    const assignments = await db.select().from(proxyAssignments);\n    \n    const summary = {\n      totalAssignments: assignments.length,\n      activeProxies: assignments.filter((a: any) => a.assignmentStatus === 'active').length,\n      failedProxies: assignments.filter((a: any) => a.assignmentStatus === 'failed').length,\n      totalMonthlyCost: assignments.reduce((total: number, a: any) => \n        total + parseFloat(a.monthlyCostUsd?.toString() || '0'), 0\n      ),\n      averageResponseTime: assignments.length > 0 ? \n        assignments.reduce((total: number, a: any) => total + (a.averageResponseTime || 0), 0) / assignments.length : 0\n    };\n\n    return summary;\n  }\n\n  // Private helper methods\n\n  private async validateExpertAndBudget(\n    expertId: string, \n    budget?: { maxMonthlyCost: number; maxDailyCost: number }\n  ): Promise<void> {\n    // Check if expert exists\n    const expert = await db\n      .select()\n      .from(expertPersonas)\n      .where(eq(expertPersonas.id, expertId))\n      .limit(1);\n\n    if (expert.length === 0) {\n      throw new ProxyAssignmentError(\n        'Expert not found',\n        'EXPERT_NOT_FOUND'\n      );\n    }\n\n    // Calculate current budget usage\n    const budgetStatus = await this.calculateExpertBudgetStatus(expertId);\n    \n    // Check budget limits\n    if (budgetStatus.currentMonthlyCost >= BUDGET_LIMITS.MAX_MONTHLY_COST) {\n      throw new ProxyAssignmentError(\n        `Monthly budget limit of $${BUDGET_LIMITS.MAX_MONTHLY_COST} exceeded`,\n        'BUDGET_EXCEEDED',\n        budgetStatus\n      );\n    }\n\n    // Check proxy count limit  \n    const activeProxies = await db\n      .select()\n      .from(proxyAssignments)\n      .where(and(\n        eq(proxyAssignments.personaId, expertId),\n        eq(proxyAssignments.assignmentStatus, 'active')\n      ));\n\n    if (activeProxies.length >= BUDGET_LIMITS.MAX_PROXIES_PER_EXPERT) {\n      throw new ProxyAssignmentError(\n        `Maximum of ${BUDGET_LIMITS.MAX_PROXIES_PER_EXPERT} proxies per expert exceeded`,\n        'PROXY_LIMIT_EXCEEDED'\n      );\n    }\n  }\n\n  private async getExpertActiveProxy(expertId: string) {\n    const assignments = await db\n      .select()\n      .from(proxyAssignments)\n      .where(and(\n        eq(proxyAssignments.personaId, expertId),\n        eq(proxyAssignments.assignmentStatus, 'active')\n      ))\n      .limit(1);\n\n    return assignments.length > 0 ? assignments[0] : null;\n  }\n\n  private async createProxyAssignment(\n    expertId: string, \n    status: AssignmentStatus,\n    request: ProxyAssignmentRequest\n  ): Promise<string> {\n    const assignmentData = {\n      personaId: expertId,\n      assignmentStatus: status,\n      proxyLocation: `${request.preferredLocation.country}${\n        request.preferredLocation.city ? `, ${request.preferredLocation.city}` : ''\n      }`,\n      assignmentReason: request.assignmentReason || 'Expert proxy assignment',\n      lastStatusChange: new Date(),\n      statusChangeReason: `Assignment ${status}`\n    };\n\n    const result = await db\n      .insert(proxyAssignments)\n      .values(assignmentData)\n      .returning({ id: proxyAssignments.id });\n\n    return result[0].id;\n  }\n\n  private async requestProxyFromAPI(location: { country: string; city?: string; region?: string }): Promise<ProxyDetails> {\n    // Use Philippines locations if not specified or ensure Philippines focus\n    const targetLocation = location.country === 'PH' ? \n      location : \n      PHILIPPINES_LOCATIONS[Math.floor(Math.random() * PHILIPPINES_LOCATIONS.length)];\n\n    return await this.proxyCheapClient.createProxy(targetLocation, {\n      type: 'residential',\n      duration: 30, // 30 days\n      bandwidth: 10 // 10GB\n    });\n  }\n\n  private async testAndValidateProxy(proxyDetails: ProxyDetails): Promise<ProxyTestResult> {\n    // Test connection\n    const testResult = await this.proxyCheapClient.testProxyConnection(proxyDetails.credentials);\n    \n    if (!testResult.success) {\n      return testResult;\n    }\n\n    // Validate Philippines location\n    const validation = await this.proxyCheapClient.validatePhilippinesLocation(proxyDetails.credentials);\n    \n    if (!validation.isValid) {\n      return {\n        success: false,\n        responseTime: testResult.responseTime,\n        ip: testResult.ip,\n        location: testResult.location,\n        error: validation.reason || 'Failed Philippines location validation',\n        timestamp: testResult.timestamp\n      };\n    }\n\n    return testResult;\n  }\n\n  private async encryptAndStoreCredentials(\n    proxyDetails: ProxyDetails,\n    expertId: string,\n    assignmentId: string\n  ): Promise<EncryptedData> {\n    const credentials: DecryptedCredentials = {\n      host: proxyDetails.credentials.host,\n      port: proxyDetails.credentials.port,\n      username: proxyDetails.credentials.username,\n      password: proxyDetails.credentials.password,\n      protocol: proxyDetails.credentials.protocol,\n      metadata: {\n        providerId: proxyDetails.id,\n        location: proxyDetails.location,\n        expiresAt: proxyDetails.expiresAt\n      }\n    };\n\n    return await this.encryptionService.encryptProxyCredentials(credentials, expertId);\n  }\n\n  private async activateProxyAssignment(\n    assignmentId: string,\n    proxyDetails: ProxyDetails,\n    encryptedCredentials: EncryptedData\n  ): Promise<void> {\n    await db\n      .update(proxyAssignments)\n      .set({\n        assignmentStatus: 'active',\n        proxyCheapId: proxyDetails.id,\n        proxyStatus: 'active',\n        proxyCredentialsEncrypted: JSON.stringify(encryptedCredentials),\n        encryptionKeyId: encryptedCredentials.keyId,\n        isPhilippinesVerified: true,\n        isResidentialVerified: true,\n        monthlyCostUsd: proxyDetails.cost.monthly.toString(),\n        dailyCostUsd: proxyDetails.cost.daily.toString(),\n        costTrackingStartDate: new Date(),\n        activatedAt: new Date(),\n        lastStatusChange: new Date(),\n        statusChangeReason: 'Proxy successfully activated'\n      })\n      .where(eq(proxyAssignments.id, assignmentId));\n  }\n\n  private async updateAssignmentStatus(\n    assignmentId: string,\n    status: AssignmentStatus,\n    reason?: string\n  ): Promise<void> {\n    await db\n      .update(proxyAssignments)\n      .set({\n        assignmentStatus: status,\n        lastStatusChange: new Date(),\n        statusChangeReason: reason || `Status changed to ${status}`\n      })\n      .where(eq(proxyAssignments.id, assignmentId));\n  }\n\n  private async calculateExpertBudgetStatus(expertId: string): Promise<{\n    currentMonthlyCost: number;\n    budgetLimit: number;\n    percentUsed: number;\n    canAssignMore: boolean;\n  }> {\n    const activeAssignments = await db\n      .select()\n      .from(proxyAssignments)\n      .where(and(\n        eq(proxyAssignments.personaId, expertId),\n        eq(proxyAssignments.assignmentStatus, 'active')\n      ));\n\n    const currentMonthlyCost = activeAssignments.reduce((total, assignment) => {\n      return total + parseFloat(assignment.monthlyCostUsd?.toString() || '0');\n    }, 0);\n    const percentUsed = (currentMonthlyCost / BUDGET_LIMITS.MAX_MONTHLY_COST) * 100;\n\n    return {\n      currentMonthlyCost,\n      budgetLimit: BUDGET_LIMITS.MAX_MONTHLY_COST,\n      percentUsed,\n      canAssignMore: currentMonthlyCost < BUDGET_LIMITS.MAX_MONTHLY_COST\n    };\n  }\n\n  private async decryptProxyCredentials(assignment: any): Promise<DecryptedCredentials> {\n    if (!assignment.proxyCredentialsEncrypted) {\n      throw new Error('No encrypted credentials found');\n    }\n\n    const encryptedData = JSON.parse(assignment.proxyCredentialsEncrypted) as EncryptedData;\n    return await this.encryptionService.decryptProxyCredentials(encryptedData);\n  }\n\n  private async updateProxyHealthStatus(\n    assignmentId: string,\n    testResult: ProxyTestResult\n  ): Promise<void> {\n    await db\n      .update(proxyAssignments)\n      .set({\n        lastHealthCheck: new Date(),\n        healthCheckStatus: testResult.success ? 'healthy' : 'failed',\n        averageResponseTime: testResult.responseTime,\n        consecutiveFailures: testResult.success ? 0 : undefined // Reset on success\n      })\n      .where(eq(proxyAssignments.id, assignmentId));\n  }\n}\n\n// Singleton service instance\nlet proxyAssignmentServiceInstance: ProxyAssignmentService | null = null;\n\n/**\n * Get singleton proxy assignment service instance\n */\nexport function getProxyAssignmentService(): ProxyAssignmentService {\n  if (!proxyAssignmentServiceInstance) {\n    proxyAssignmentServiceInstance = new ProxyAssignmentService();\n  }\n  return proxyAssignmentServiceInstance;\n}\n\n/**\n * Utility function to assign proxy to expert\n */\nexport async function assignProxyToExpert(request: ProxyAssignmentRequest): Promise<ProxyAssignmentResult> {\n  const service = getProxyAssignmentService();\n  return service.assignProxyToExpert(request);\n}\n\n/**\n * Utility function to release proxy from expert\n */\nexport async function releaseProxyFromExpert(expertId: string, reason?: string): Promise<boolean> {\n  const service = getProxyAssignmentService();\n  return service.releaseProxyFromExpert(expertId, reason);\n}","size_bytes":18263},"src/server/cost-management-service.ts":{"content":"import { db } from './db/index';\nimport { proxyAssignments, expertPersonas } from '../shared/schema';\nimport { eq, and, gte, lte, desc, asc } from 'drizzle-orm';\n\n// Cost management constants\nconst COST_LIMITS = {\n  MAX_MONTHLY_BUDGET: 6.35, // USD per expert\n  MAX_DAILY_BUDGET: 0.25, // USD per expert (roughly monthly/30)\n  WARNING_THRESHOLD: 0.8, // 80% of budget\n  CRITICAL_THRESHOLD: 0.95, // 95% of budget\n  OVERAGE_THRESHOLD: 1.0, // 100% of budget\n};\n\n// Types for cost management\nexport interface CostSummary {\n  expertId: string;\n  currentPeriod: {\n    startDate: Date;\n    endDate: Date;\n    totalCost: number;\n    dailyAverage: number;\n    projectedMonthlyCost: number;\n  };\n  budgetStatus: {\n    monthlyLimit: number;\n    remainingBudget: number;\n    percentUsed: number;\n    daysRemaining: number;\n    projectedOverage: number;\n  };\n  costBreakdown: {\n    proxyCount: number;\n    averageCostPerProxy: number;\n    highestCostProxy: number;\n    lowestCostProxy: number;\n  };\n  alerts: CostAlert[];\n}\n\nexport interface CostAlert {\n  id: string;\n  type: 'warning' | 'critical' | 'overage' | 'projection';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  expertId: string;\n  currentSpend: number;\n  threshold: number;\n  recommendedAction: string;\n  timestamp: Date;\n}\n\nexport interface ExpertCostHistory {\n  expertId: string;\n  dailyCosts: DailyCostEntry[];\n  monthlyTotals: MonthlyCostEntry[];\n  trends: {\n    averageDailyCost: number;\n    costTrend: 'increasing' | 'decreasing' | 'stable';\n    projectedMonthlySpend: number;\n    efficiencyScore: number; // Cost per successful connection\n  };\n}\n\nexport interface DailyCostEntry {\n  date: Date;\n  totalCost: number;\n  proxyCount: number;\n  averageCostPerProxy: number;\n}\n\nexport interface MonthlyCostEntry {\n  month: string; // YYYY-MM format\n  totalCost: number;\n  proxyCount: number;\n  budgetUtilization: number;\n}\n\nexport interface SystemCostOverview {\n  totalExperts: number;\n  totalMonthlyCost: number;\n  budgetUtilization: number;\n  expertsOverBudget: number;\n  expertsBelowWarningThreshold: number;\n  averageCostPerExpert: number;\n  projectedSystemCost: number;\n  costEfficiencyMetrics: {\n    averageResponseTime: number;\n    costPerSuccessfulConnection: number;\n    totalConnections: number;\n  };\n}\n\n// Cost calculation utilities\nclass CostCalculator {\n  /**\n   * Calculate current month cost for expert\n   */\n  static async calculateCurrentMonthCost(expertId: string): Promise<number> {\n    const now = new Date();\n    const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n    const monthEnd = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59);\n\n    const assignments = await db\n      .select()\n      .from(proxyAssignments)\n      .where(and(\n        eq(proxyAssignments.personaId, expertId),\n        gte(proxyAssignments.costTrackingStartDate, monthStart),\n        lte(proxyAssignments.costTrackingStartDate, monthEnd)\n      ));\n\n    return assignments.reduce((total, assignment) => {\n      const monthlyCost = parseFloat(assignment.monthlyCostUsd?.toString() || '0');\n      const dailyCost = parseFloat(assignment.dailyCostUsd?.toString() || '0');\n      \n      // Calculate prorated cost based on days active this month\n      const startDate = assignment.costTrackingStartDate || assignment.createdAt || now;\n      const daysActive = Math.ceil((now.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n      const proratedCost = Math.min(dailyCost * daysActive, monthlyCost);\n      \n      return total + proratedCost;\n    }, 0);\n  }\n\n  /**\n   * Project monthly cost based on current spending\n   */\n  static calculateProjectedMonthlyCost(currentCost: number, daysElapsed: number): number {\n    if (daysElapsed === 0) return 0;\n    \n    const now = new Date();\n    const daysInMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();\n    const dailyAverage = currentCost / daysElapsed;\n    \n    return dailyAverage * daysInMonth;\n  }\n\n  /**\n   * Calculate cost efficiency metrics\n   */\n  static calculateEfficiencyScore(totalCost: number, successfulConnections: number): number {\n    if (successfulConnections === 0) return 0;\n    return totalCost / successfulConnections;\n  }\n\n  /**\n   * Determine cost trend from historical data\n   */\n  static analyzeCostTrend(dailyCosts: DailyCostEntry[]): 'increasing' | 'decreasing' | 'stable' {\n    if (dailyCosts.length < 3) return 'stable';\n    \n    const recent = dailyCosts.slice(-7); // Last 7 days\n    const older = dailyCosts.slice(-14, -7); // Previous 7 days\n    \n    const recentAvg = recent.reduce((sum, entry) => sum + entry.totalCost, 0) / recent.length;\n    const olderAvg = older.length > 0 ? \n      older.reduce((sum, entry) => sum + entry.totalCost, 0) / older.length : recentAvg;\n    \n    const changePercent = ((recentAvg - olderAvg) / olderAvg) * 100;\n    \n    if (changePercent > 10) return 'increasing';\n    if (changePercent < -10) return 'decreasing';\n    return 'stable';\n  }\n}\n\n// Alert generation for cost management\nclass CostAlertManager {\n  /**\n   * Generate cost alerts based on spending patterns\n   */\n  static generateCostAlerts(expertId: string, costSummary: CostSummary): CostAlert[] {\n    const alerts: CostAlert[] = [];\n    const { currentPeriod, budgetStatus } = costSummary;\n\n    // Budget threshold alerts\n    if (budgetStatus.percentUsed >= COST_LIMITS.CRITICAL_THRESHOLD * 100) {\n      alerts.push({\n        id: `cost_critical_${expertId}_${Date.now()}`,\n        type: 'critical',\n        severity: 'critical',\n        message: `Critical: ${budgetStatus.percentUsed.toFixed(1)}% of monthly budget used`,\n        expertId,\n        currentSpend: currentPeriod.totalCost,\n        threshold: COST_LIMITS.MAX_MONTHLY_BUDGET * COST_LIMITS.CRITICAL_THRESHOLD,\n        recommendedAction: 'Consider reducing proxy usage or contact support for budget increase',\n        timestamp: new Date()\n      });\n    } else if (budgetStatus.percentUsed >= COST_LIMITS.WARNING_THRESHOLD * 100) {\n      alerts.push({\n        id: `cost_warning_${expertId}_${Date.now()}`,\n        type: 'warning',\n        severity: 'medium',\n        message: `Warning: ${budgetStatus.percentUsed.toFixed(1)}% of monthly budget used`,\n        expertId,\n        currentSpend: currentPeriod.totalCost,\n        threshold: COST_LIMITS.MAX_MONTHLY_BUDGET * COST_LIMITS.WARNING_THRESHOLD,\n        recommendedAction: 'Monitor usage closely to avoid exceeding budget',\n        timestamp: new Date()\n      });\n    }\n\n    // Overage alerts\n    if (budgetStatus.percentUsed >= 100) {\n      alerts.push({\n        id: `cost_overage_${expertId}_${Date.now()}`,\n        type: 'overage',\n        severity: 'critical',\n        message: `Budget exceeded by $${budgetStatus.projectedOverage.toFixed(2)}`,\n        expertId,\n        currentSpend: currentPeriod.totalCost,\n        threshold: COST_LIMITS.MAX_MONTHLY_BUDGET,\n        recommendedAction: 'Immediate action required: Reduce proxy usage or request budget increase',\n        timestamp: new Date()\n      });\n    }\n\n    // Projection alerts\n    if (budgetStatus.projectedOverage > 0) {\n      alerts.push({\n        id: `cost_projection_${expertId}_${Date.now()}`,\n        type: 'projection',\n        severity: 'high',\n        message: `Projected overage of $${budgetStatus.projectedOverage.toFixed(2)} this month`,\n        expertId,\n        currentSpend: currentPeriod.totalCost,\n        threshold: COST_LIMITS.MAX_MONTHLY_BUDGET,\n        recommendedAction: 'Adjust proxy usage to stay within budget',\n        timestamp: new Date()\n      });\n    }\n\n    return alerts;\n  }\n}\n\n// Main Cost Management Service\nexport class CostManagementService {\n  /**\n   * Get comprehensive cost summary for expert\n   */\n  async getExpertCostSummary(expertId: string): Promise<CostSummary> {\n    // Calculate current period costs\n    const currentCost = await CostCalculator.calculateCurrentMonthCost(expertId);\n    \n    // Get current period dates\n    const now = new Date();\n    const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n    const monthEnd = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n    const daysElapsed = Math.ceil((now.getTime() - monthStart.getTime()) / (1000 * 60 * 60 * 24));\n    const daysRemaining = Math.ceil((monthEnd.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    \n    // Calculate projections\n    const dailyAverage = daysElapsed > 0 ? currentCost / daysElapsed : 0;\n    const projectedMonthlyCost = CostCalculator.calculateProjectedMonthlyCost(currentCost, daysElapsed);\n    \n    // Budget calculations\n    const percentUsed = (currentCost / COST_LIMITS.MAX_MONTHLY_BUDGET) * 100;\n    const remainingBudget = Math.max(0, COST_LIMITS.MAX_MONTHLY_BUDGET - currentCost);\n    const projectedOverage = Math.max(0, projectedMonthlyCost - COST_LIMITS.MAX_MONTHLY_BUDGET);\n    \n    // Get proxy cost breakdown\n    const activeAssignments = await db\n      .select()\n      .from(proxyAssignments)\n      .where(and(\n        eq(proxyAssignments.personaId, expertId),\n        eq(proxyAssignments.assignmentStatus, 'active')\n      ));\n    \n    const proxyCosts = activeAssignments.map(a => parseFloat(a.monthlyCostUsd?.toString() || '0'));\n    const costBreakdown = {\n      proxyCount: activeAssignments.length,\n      averageCostPerProxy: proxyCosts.length > 0 ? proxyCosts.reduce((sum, cost) => sum + cost, 0) / proxyCosts.length : 0,\n      highestCostProxy: proxyCosts.length > 0 ? Math.max(...proxyCosts) : 0,\n      lowestCostProxy: proxyCosts.length > 0 ? Math.min(...proxyCosts) : 0\n    };\n\n    const costSummary: CostSummary = {\n      expertId,\n      currentPeriod: {\n        startDate: monthStart,\n        endDate: monthEnd,\n        totalCost: currentCost,\n        dailyAverage,\n        projectedMonthlyCost\n      },\n      budgetStatus: {\n        monthlyLimit: COST_LIMITS.MAX_MONTHLY_BUDGET,\n        remainingBudget,\n        percentUsed,\n        daysRemaining,\n        projectedOverage\n      },\n      costBreakdown,\n      alerts: []\n    };\n\n    // Generate alerts\n    costSummary.alerts = CostAlertManager.generateCostAlerts(expertId, costSummary);\n\n    return costSummary;\n  }\n\n  /**\n   * Get expert cost history and trends\n   */\n  async getExpertCostHistory(expertId: string, months: number = 6): Promise<ExpertCostHistory> {\n    const endDate = new Date();\n    const startDate = new Date(endDate.getFullYear(), endDate.getMonth() - months, 1);\n\n    // Get all assignments in the period\n    const assignments = await db\n      .select()\n      .from(proxyAssignments)\n      .where(and(\n        eq(proxyAssignments.personaId, expertId),\n        gte(proxyAssignments.createdAt, startDate)\n      ))\n      .orderBy(asc(proxyAssignments.createdAt));\n\n    // Build daily cost entries\n    const dailyCosts = this.buildDailyCostEntries(assignments, startDate, endDate);\n    \n    // Build monthly totals\n    const monthlyTotals = this.buildMonthlyCostEntries(dailyCosts);\n    \n    // Analyze trends\n    const averageDailyCost = dailyCosts.length > 0 ? \n      dailyCosts.reduce((sum, entry) => sum + entry.totalCost, 0) / dailyCosts.length : 0;\n    \n    const costTrend = CostCalculator.analyzeCostTrend(dailyCosts);\n    \n    const projectedMonthlySpend = CostCalculator.calculateProjectedMonthlyCost(\n      averageDailyCost * new Date().getDate(),\n      new Date().getDate()\n    );\n\n    // Calculate efficiency score (cost per successful connection)\n    const totalCost = dailyCosts.reduce((sum, entry) => sum + entry.totalCost, 0);\n    const totalConnections = assignments.reduce((sum, a) => sum + (a.totalRequests || 0), 0);\n    const efficiencyScore = CostCalculator.calculateEfficiencyScore(totalCost, totalConnections);\n\n    return {\n      expertId,\n      dailyCosts,\n      monthlyTotals,\n      trends: {\n        averageDailyCost,\n        costTrend,\n        projectedMonthlySpend,\n        efficiencyScore\n      }\n    };\n  }\n\n  /**\n   * Get system-wide cost overview\n   */\n  async getSystemCostOverview(): Promise<SystemCostOverview> {\n    // Get all experts with proxy assignments\n    const allExperts = await db\n      .select({ id: expertPersonas.id })\n      .from(expertPersonas);\n\n    // Calculate costs for each expert\n    const expertCosts = await Promise.all(\n      allExperts.map(expert => this.getExpertCostSummary(expert.id))\n    );\n\n    // Aggregate system metrics\n    const totalMonthlyCost = expertCosts.reduce((sum, expert) => sum + expert.currentPeriod.totalCost, 0);\n    const expertsOverBudget = expertCosts.filter(expert => expert.budgetStatus.percentUsed >= 100).length;\n    const expertsBelowWarningThreshold = expertCosts.filter(\n      expert => expert.budgetStatus.percentUsed < COST_LIMITS.WARNING_THRESHOLD * 100\n    ).length;\n    \n    const averageCostPerExpert = allExperts.length > 0 ? totalMonthlyCost / allExperts.length : 0;\n    const budgetUtilization = (totalMonthlyCost / (COST_LIMITS.MAX_MONTHLY_BUDGET * allExperts.length)) * 100;\n    const projectedSystemCost = expertCosts.reduce((sum, expert) => sum + expert.currentPeriod.projectedMonthlyCost, 0);\n\n    // Get performance metrics\n    const allAssignments = await db.select().from(proxyAssignments);\n    const averageResponseTime = allAssignments.length > 0 ?\n      allAssignments.reduce((sum, a) => sum + (a.averageResponseTime || 0), 0) / allAssignments.length : 0;\n    \n    const totalConnections = allAssignments.reduce((sum, a) => sum + (a.totalRequests || 0), 0);\n    const costPerSuccessfulConnection = totalConnections > 0 ? totalMonthlyCost / totalConnections : 0;\n\n    return {\n      totalExperts: allExperts.length,\n      totalMonthlyCost,\n      budgetUtilization,\n      expertsOverBudget,\n      expertsBelowWarningThreshold,\n      averageCostPerExpert,\n      projectedSystemCost,\n      costEfficiencyMetrics: {\n        averageResponseTime,\n        costPerSuccessfulConnection,\n        totalConnections\n      }\n    };\n  }\n\n  /**\n   * Check if expert can afford new proxy assignment\n   */\n  async canExpertAffordNewProxy(expertId: string, estimatedMonthlyCost: number): Promise<{\n    canAfford: boolean;\n    reason?: string;\n    currentSpend: number;\n    availableBudget: number;\n    wouldExceedBy?: number;\n  }> {\n    const costSummary = await this.getExpertCostSummary(expertId);\n    const newTotalCost = costSummary.currentPeriod.projectedMonthlyCost + estimatedMonthlyCost;\n    \n    if (newTotalCost <= COST_LIMITS.MAX_MONTHLY_BUDGET) {\n      return {\n        canAfford: true,\n        currentSpend: costSummary.currentPeriod.totalCost,\n        availableBudget: costSummary.budgetStatus.remainingBudget - estimatedMonthlyCost\n      };\n    } else {\n      return {\n        canAfford: false,\n        reason: 'New proxy would exceed monthly budget limit',\n        currentSpend: costSummary.currentPeriod.totalCost,\n        availableBudget: costSummary.budgetStatus.remainingBudget,\n        wouldExceedBy: newTotalCost - COST_LIMITS.MAX_MONTHLY_BUDGET\n      };\n    }\n  }\n\n  /**\n   * Generate monthly cost report for expert\n   */\n  async generateMonthlyCostReport(expertId: string, month?: string): Promise<{\n    reportPeriod: string;\n    totalCost: number;\n    budgetUtilization: number;\n    dailyBreakdown: DailyCostEntry[];\n    recommendations: string[];\n    comparison: {\n      previousMonth: number;\n      changePercent: number;\n      trend: 'increasing' | 'decreasing' | 'stable';\n    };\n  }> {\n    const targetMonth = month || new Date().toISOString().substring(0, 7); // YYYY-MM\n    const [year, monthNum] = targetMonth.split('-').map(Number);\n    \n    const monthStart = new Date(year, monthNum - 1, 1);\n    const monthEnd = new Date(year, monthNum, 0);\n    \n    // Get cost history for the month\n    const history = await this.getExpertCostHistory(expertId, 2); // 2 months for comparison\n    const monthlyData = history.monthlyTotals.find(m => m.month === targetMonth);\n    const currentMonthCost = monthlyData?.totalCost || 0;\n    \n    // Get previous month for comparison\n    const previousMonthStr = new Date(year, monthNum - 2, 1).toISOString().substring(0, 7);\n    const previousMonthData = history.monthlyTotals.find(m => m.month === previousMonthStr);\n    const previousMonthCost = previousMonthData?.totalCost || 0;\n    \n    const changePercent = previousMonthCost > 0 ? \n      ((currentMonthCost - previousMonthCost) / previousMonthCost) * 100 : 0;\n    \n    // Generate recommendations\n    const recommendations = this.generateCostRecommendations(currentMonthCost, history.trends);\n    \n    // Get daily breakdown for the month\n    const dailyBreakdown = history.dailyCosts.filter(day => \n      day.date >= monthStart && day.date <= monthEnd\n    );\n\n    return {\n      reportPeriod: targetMonth,\n      totalCost: currentMonthCost,\n      budgetUtilization: (currentMonthCost / COST_LIMITS.MAX_MONTHLY_BUDGET) * 100,\n      dailyBreakdown,\n      recommendations,\n      comparison: {\n        previousMonth: previousMonthCost,\n        changePercent,\n        trend: CostCalculator.analyzeCostTrend(history.dailyCosts)\n      }\n    };\n  }\n\n  // Private helper methods\n\n  private buildDailyCostEntries(assignments: any[], startDate: Date, endDate: Date): DailyCostEntry[] {\n    const dailyCosts: DailyCostEntry[] = [];\n    const currentDate = new Date(startDate);\n\n    while (currentDate <= endDate) {\n      const dayStart = new Date(currentDate);\n      const dayEnd = new Date(currentDate);\n      dayEnd.setHours(23, 59, 59);\n\n      // Calculate cost for this day\n      const activeAssignments = assignments.filter(a => {\n        const assignedDate = a.costTrackingStartDate || a.createdAt;\n        return assignedDate <= dayEnd && (a.assignmentStatus === 'active' || a.assignmentStatus === 'testing');\n      });\n\n      const totalCost = activeAssignments.reduce((sum, assignment) => {\n        const dailyCost = parseFloat(assignment.dailyCostUsd?.toString() || '0');\n        return sum + dailyCost;\n      }, 0);\n\n      const averageCostPerProxy = activeAssignments.length > 0 ? totalCost / activeAssignments.length : 0;\n\n      dailyCosts.push({\n        date: new Date(currentDate),\n        totalCost,\n        proxyCount: activeAssignments.length,\n        averageCostPerProxy\n      });\n\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n\n    return dailyCosts;\n  }\n\n  private buildMonthlyCostEntries(dailyCosts: DailyCostEntry[]): MonthlyCostEntry[] {\n    const monthlyTotals: Map<string, MonthlyCostEntry> = new Map();\n\n    dailyCosts.forEach(day => {\n      const monthKey = day.date.toISOString().substring(0, 7); // YYYY-MM\n      \n      if (!monthlyTotals.has(monthKey)) {\n        monthlyTotals.set(monthKey, {\n          month: monthKey,\n          totalCost: 0,\n          proxyCount: 0,\n          budgetUtilization: 0\n        });\n      }\n\n      const monthData = monthlyTotals.get(monthKey)!;\n      monthData.totalCost += day.totalCost;\n      monthData.proxyCount = Math.max(monthData.proxyCount, day.proxyCount);\n      monthData.budgetUtilization = (monthData.totalCost / COST_LIMITS.MAX_MONTHLY_BUDGET) * 100;\n    });\n\n    return Array.from(monthlyTotals.values()).sort((a, b) => a.month.localeCompare(b.month));\n  }\n\n  private generateCostRecommendations(currentCost: number, trends: any): string[] {\n    const recommendations: string[] = [];\n    \n    if (currentCost > COST_LIMITS.MAX_MONTHLY_BUDGET * 0.8) {\n      recommendations.push('Consider optimizing proxy usage to stay within budget');\n    }\n    \n    if (trends.costTrend === 'increasing') {\n      recommendations.push('Monitor increasing cost trend and consider proxy consolidation');\n    }\n    \n    if (trends.efficiencyScore > 0.1) {\n      recommendations.push('Review proxy performance to improve cost efficiency');\n    }\n    \n    if (currentCost < COST_LIMITS.MAX_MONTHLY_BUDGET * 0.5) {\n      recommendations.push('Budget utilization is low - consider additional proxies if needed');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Health check for cost management service\n   */\n  async healthCheck(): Promise<{\n    status: 'healthy' | 'degraded' | 'unhealthy';\n    details: Record<string, any>;\n  }> {\n    try {\n      const systemOverview = await this.getSystemCostOverview();\n      \n      let status: 'healthy' | 'degraded' | 'unhealthy' = 'healthy';\n      \n      if (systemOverview.expertsOverBudget > systemOverview.totalExperts * 0.5) {\n        status = 'unhealthy';\n      } else if (systemOverview.budgetUtilization > 90) {\n        status = 'degraded';\n      }\n\n      return {\n        status,\n        details: {\n          totalExperts: systemOverview.totalExperts,\n          totalMonthlyCost: systemOverview.totalMonthlyCost,\n          expertsOverBudget: systemOverview.expertsOverBudget,\n          budgetUtilization: systemOverview.budgetUtilization,\n          timestamp: new Date().toISOString()\n        }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        details: {\n          error: (error as Error).message,\n          timestamp: new Date().toISOString()\n        }\n      };\n    }\n  }\n}\n\n// Singleton service instance\nlet costManagementServiceInstance: CostManagementService | null = null;\n\n/**\n * Get singleton cost management service instance\n */\nexport function getCostManagementService(): CostManagementService {\n  if (!costManagementServiceInstance) {\n    costManagementServiceInstance = new CostManagementService();\n  }\n  return costManagementServiceInstance;\n}\n\n/**\n * Utility function to check expert budget before proxy assignment\n */\nexport async function validateExpertBudget(expertId: string, estimatedCost: number): Promise<boolean> {\n  const service = getCostManagementService();\n  const result = await service.canExpertAffordNewProxy(expertId, estimatedCost);\n  return result.canAfford;\n}","size_bytes":21681},"src/server/proxy-monitoring-service.ts":{"content":"import { db } from './db/index';\nimport { proxyAssignments } from '../shared/schema';\nimport { getProxyAssignmentService } from './proxy-assignment-service';\nimport { createProxyCheapClient } from './proxy-cheap-client';\nimport { getEncryptionService } from './encryption-service';\nimport { eq, and, lt, gte, desc } from 'drizzle-orm';\n\n// Monitoring Configuration\nconst MONITORING_CONFIG = {\n  HEALTH_CHECK_INTERVAL: 20 * 60 * 1000, // 20 minutes in milliseconds\n  REPUTATION_CHECK_INTERVAL: 60 * 60 * 1000, // 1 hour\n  GEO_VALIDATION_INTERVAL: 4 * 60 * 60 * 1000, // 4 hours\n  MAX_CONSECUTIVE_FAILURES: 3,\n  RESPONSE_TIME_THRESHOLD: 10000, // 10 seconds\n  SUCCESS_RATE_THRESHOLD: 0.85, // 85%\n  ALERT_COOLDOWN: 30 * 60 * 1000, // 30 minutes\n};\n\n// Types for monitoring\nexport interface ProxyHealthMetrics {\n  proxyId: string;\n  expertId: string;\n  status: 'healthy' | 'degraded' | 'failed' | 'unknown';\n  lastCheck: Date;\n  responseTime: number;\n  successRate: number;\n  consecutiveFailures: number;\n  location: {\n    country: string;\n    city: string;\n    isPhilippinesVerified: boolean;\n  };\n  reputation: {\n    score: number;\n    isResidential: boolean;\n    blacklistStatus: string;\n  };\n  alerts: ProxyAlert[];\n}\n\nexport interface ProxyAlert {\n  id: string;\n  type: 'health' | 'location' | 'reputation' | 'cost' | 'performance';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  proxyId: string;\n  expertId: string;\n  timestamp: Date;\n  resolved: boolean;\n  resolvedAt?: Date;\n}\n\nexport interface MonitoringSummary {\n  totalProxies: number;\n  healthyProxies: number;\n  degradedProxies: number;\n  failedProxies: number;\n  activeAlerts: number;\n  averageResponseTime: number;\n  systemHealth: 'healthy' | 'degraded' | 'critical';\n  lastMonitoringRun: Date;\n}\n\n// IP Reputation and Geolocation Services\nclass IPReputationService {\n  /**\n   * Check IP reputation using multiple sources\n   */\n  async checkIPReputation(ip: string): Promise<{\n    score: number;\n    isResidential: boolean;\n    blacklistStatus: 'clean' | 'flagged' | 'unknown';\n    sources: string[];\n  }> {\n    try {\n      // In a real implementation, integrate with services like:\n      // - AbuseIPDB\n      // - VirusTotal\n      // - IPQualityScore\n      // For now, simulate reputation check\n      \n      const isPrivateIP = this.isPrivateIP(ip);\n      const simulatedScore = Math.random() * 100;\n      \n      return {\n        score: simulatedScore,\n        isResidential: simulatedScore > 70 && !isPrivateIP,\n        blacklistStatus: simulatedScore > 80 ? 'clean' : simulatedScore > 50 ? 'unknown' : 'flagged',\n        sources: ['simulated-reputation-service']\n      };\n    } catch (error) {\n      console.error(`Failed to check IP reputation for ${ip}:`, error);\n      return {\n        score: 0,\n        isResidential: false,\n        blacklistStatus: 'unknown',\n        sources: []\n      };\n    }\n  }\n\n  /**\n   * Validate geographic location accuracy\n   */\n  async validateGeographicLocation(ip: string): Promise<{\n    isPhilippines: boolean;\n    detectedCountry: string;\n    detectedCity: string;\n    detectedRegion: string;\n    confidence: number;\n  }> {\n    try {\n      // In real implementation, use geolocation services like:\n      // - MaxMind GeoIP2\n      // - IP2Location\n      // - IPGeolocation.io\n      \n      // Simulate geolocation check\n      const philippinesLocations = [\n        { country: 'PH', city: 'Manila', region: 'Metro Manila' },\n        { country: 'PH', city: 'Cebu', region: 'Central Visayas' },\n        { country: 'PH', city: 'Davao', region: 'Davao Region' }\n      ];\n      \n      const randomLocation = philippinesLocations[Math.floor(Math.random() * philippinesLocations.length)];\n      const isActuallyPhilippines = Math.random() > 0.1; // 90% chance it's actually Philippines\n      \n      if (isActuallyPhilippines) {\n        return {\n          isPhilippines: true,\n          detectedCountry: 'PH',\n          detectedCity: randomLocation.city,\n          detectedRegion: randomLocation.region,\n          confidence: 0.95\n        };\n      } else {\n        return {\n          isPhilippines: false,\n          detectedCountry: 'US',\n          detectedCity: 'New York',\n          detectedRegion: 'New York',\n          confidence: 0.87\n        };\n      }\n    } catch (error) {\n      console.error(`Failed to validate geolocation for ${ip}:`, error);\n      return {\n        isPhilippines: false,\n        detectedCountry: 'unknown',\n        detectedCity: 'unknown',\n        detectedRegion: 'unknown',\n        confidence: 0\n      };\n    }\n  }\n\n  private isPrivateIP(ip: string): boolean {\n    const privateRanges = [\n      /^10\\./,\n      /^172\\.(1[6-9]|2[0-9]|3[0-1])\\./,\n      /^192\\.168\\./,\n      /^127\\./,\n      /^169\\.254\\./\n    ];\n    \n    return privateRanges.some(range => range.test(ip));\n  }\n}\n\n// Alert Management System\nclass AlertManager {\n  private alerts: Map<string, ProxyAlert> = new Map();\n  private lastAlertTime: Map<string, number> = new Map();\n\n  /**\n   * Create new alert with cooldown protection\n   */\n  createAlert(\n    type: ProxyAlert['type'],\n    severity: ProxyAlert['severity'],\n    message: string,\n    proxyId: string,\n    expertId: string\n  ): ProxyAlert | null {\n    const alertKey = `${proxyId}_${type}`;\n    const now = Date.now();\n    const lastAlert = this.lastAlertTime.get(alertKey) || 0;\n    \n    // Check cooldown period\n    if (now - lastAlert < MONITORING_CONFIG.ALERT_COOLDOWN) {\n      return null; // Skip alert due to cooldown\n    }\n    \n    const alert: ProxyAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type,\n      severity,\n      message,\n      proxyId,\n      expertId,\n      timestamp: new Date(),\n      resolved: false\n    };\n    \n    this.alerts.set(alert.id, alert);\n    this.lastAlertTime.set(alertKey, now);\n    \n    console.log(`🚨 Alert created: ${severity.toUpperCase()} - ${message} (Proxy: ${proxyId})`);\n    return alert;\n  }\n\n  /**\n   * Resolve alert by ID\n   */\n  resolveAlert(alertId: string): boolean {\n    const alert = this.alerts.get(alertId);\n    if (alert && !alert.resolved) {\n      alert.resolved = true;\n      alert.resolvedAt = new Date();\n      console.log(`✅ Alert resolved: ${alert.message} (${alertId})`);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get active alerts for proxy\n   */\n  getActiveAlertsForProxy(proxyId: string): ProxyAlert[] {\n    return Array.from(this.alerts.values())\n      .filter(alert => alert.proxyId === proxyId && !alert.resolved);\n  }\n\n  /**\n   * Get all active alerts\n   */\n  getAllActiveAlerts(): ProxyAlert[] {\n    return Array.from(this.alerts.values()).filter(alert => !alert.resolved);\n  }\n\n  /**\n   * Clean up old resolved alerts\n   */\n  cleanupOldAlerts(maxAge: number = 24 * 60 * 60 * 1000): void {\n    const cutoff = Date.now() - maxAge;\n    let cleanedCount = 0;\n    \n    for (const [id, alert] of this.alerts.entries()) {\n      if (alert.resolved && alert.timestamp.getTime() < cutoff) {\n        this.alerts.delete(id);\n        cleanedCount++;\n      }\n    }\n    \n    if (cleanedCount > 0) {\n      console.log(`🧹 Cleaned up ${cleanedCount} old alerts`);\n    }\n  }\n}\n\n// Main Proxy Monitoring Service\nexport class ProxyMonitoringService {\n  private proxyCheapClient = createProxyCheapClient();\n  private encryptionService = getEncryptionService();\n  private ipReputationService = new IPReputationService();\n  private alertManager = new AlertManager();\n  private isMonitoring = false;\n  private monitoringInterval: NodeJS.Timeout | null = null;\n\n  /**\n   * Start continuous monitoring of all proxy assignments\n   */\n  startMonitoring(): void {\n    if (this.isMonitoring) {\n      console.log('🔍 Proxy monitoring is already running');\n      return;\n    }\n\n    this.isMonitoring = true;\n    console.log('🚀 Starting proxy monitoring service...');\n\n    // Run initial monitoring\n    this.runMonitoringCycle();\n\n    // Schedule regular monitoring cycles\n    this.monitoringInterval = setInterval(() => {\n      this.runMonitoringCycle();\n    }, MONITORING_CONFIG.HEALTH_CHECK_INTERVAL);\n  }\n\n  /**\n   * Stop monitoring service\n   */\n  stopMonitoring(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n    this.isMonitoring = false;\n    console.log('⏹️ Proxy monitoring service stopped');\n  }\n\n  /**\n   * Run a complete monitoring cycle for all active proxies\n   */\n  async runMonitoringCycle(): Promise<void> {\n    try {\n      console.log('🔍 Starting proxy monitoring cycle...');\n      \n      // Get all active proxy assignments\n      const activeProxies = await db\n        .select()\n        .from(proxyAssignments)\n        .where(eq(proxyAssignments.assignmentStatus, 'active'));\n\n      if (activeProxies.length === 0) {\n        console.log('📭 No active proxies to monitor');\n        return;\n      }\n\n      console.log(`🔍 Monitoring ${activeProxies.length} active proxies...`);\n\n      // Monitor each proxy\n      const monitoringPromises = activeProxies.map(proxy => \n        this.monitorSingleProxy(proxy)\n      );\n\n      await Promise.allSettled(monitoringPromises);\n\n      // Clean up old alerts\n      this.alertManager.cleanupOldAlerts();\n\n      console.log('✅ Proxy monitoring cycle completed');\n\n    } catch (error) {\n      console.error('❌ Error during monitoring cycle:', error);\n    }\n  }\n\n  /**\n   * Monitor a single proxy assignment\n   */\n  async monitorSingleProxy(assignment: any): Promise<ProxyHealthMetrics> {\n    const proxyId = assignment.id;\n    const expertId = assignment.personaId;\n    \n    try {\n      // Decrypt proxy credentials\n      const credentials = await this.decryptProxyCredentials(assignment);\n      \n      // Perform health check\n      const healthResult = await this.performHealthCheck(credentials);\n      \n      // Check IP reputation (less frequently)\n      let reputationResult = null;\n      const lastReputationCheck = assignment.lastReputationCheck;\n      const needsReputationCheck = !lastReputationCheck || \n        (Date.now() - lastReputationCheck.getTime()) > MONITORING_CONFIG.REPUTATION_CHECK_INTERVAL;\n      \n      if (needsReputationCheck) {\n        reputationResult = await this.ipReputationService.checkIPReputation(healthResult.ip);\n      }\n\n      // Validate geographic location (less frequently)\n      let geoResult = null;\n      const lastGeoCheck = assignment.geoValidationLastCheck;\n      const needsGeoCheck = !lastGeoCheck || \n        (Date.now() - lastGeoCheck.getTime()) > MONITORING_CONFIG.GEO_VALIDATION_INTERVAL;\n      \n      if (needsGeoCheck) {\n        geoResult = await this.ipReputationService.validateGeographicLocation(healthResult.ip);\n      }\n\n      // Update database with monitoring results\n      await this.updateMonitoringResults(assignment, healthResult, reputationResult, geoResult);\n\n      // Generate alerts if needed\n      await this.checkAndGenerateAlerts(assignment, healthResult, reputationResult, geoResult);\n\n      // Return health metrics\n      return this.buildHealthMetrics(assignment, healthResult, reputationResult, geoResult);\n\n    } catch (error) {\n      console.error(`❌ Failed to monitor proxy ${proxyId}:`, error);\n      \n      // Create critical alert for monitoring failure\n      this.alertManager.createAlert(\n        'health',\n        'critical',\n        `Monitoring failed: ${(error as Error).message}`,\n        proxyId,\n        expertId\n      );\n\n      // Return failed status\n      return {\n        proxyId,\n        expertId,\n        status: 'failed',\n        lastCheck: new Date(),\n        responseTime: 0,\n        successRate: 0,\n        consecutiveFailures: (assignment.consecutiveFailures || 0) + 1,\n        location: {\n          country: assignment.detectedCountry || 'unknown',\n          city: assignment.detectedCity || 'unknown',\n          isPhilippinesVerified: false\n        },\n        reputation: {\n          score: 0,\n          isResidential: false,\n          blacklistStatus: 'unknown'\n        },\n        alerts: this.alertManager.getActiveAlertsForProxy(proxyId)\n      };\n    }\n  }\n\n  /**\n   * Get monitoring summary for all proxies\n   */\n  async getMonitoringSummary(): Promise<MonitoringSummary> {\n    const assignments = await db.select().from(proxyAssignments);\n    \n    const activeProxies = assignments.filter(a => a.assignmentStatus === 'active');\n    const healthyProxies = activeProxies.filter(a => a.healthCheckStatus === 'healthy');\n    const degradedProxies = activeProxies.filter(a => a.healthCheckStatus === 'degraded');\n    const failedProxies = activeProxies.filter(a => a.healthCheckStatus === 'failed');\n    \n    const averageResponseTime = activeProxies.length > 0 ?\n      activeProxies.reduce((sum, a) => sum + (a.averageResponseTime || 0), 0) / activeProxies.length : 0;\n    \n    const activeAlerts = this.alertManager.getAllActiveAlerts().length;\n    \n    let systemHealth: 'healthy' | 'degraded' | 'critical' = 'healthy';\n    if (failedProxies.length > activeProxies.length * 0.5) {\n      systemHealth = 'critical';\n    } else if (degradedProxies.length + failedProxies.length > activeProxies.length * 0.3) {\n      systemHealth = 'degraded';\n    }\n\n    return {\n      totalProxies: assignments.length,\n      healthyProxies: healthyProxies.length,\n      degradedProxies: degradedProxies.length,\n      failedProxies: failedProxies.length,\n      activeAlerts,\n      averageResponseTime,\n      systemHealth,\n      lastMonitoringRun: new Date()\n    };\n  }\n\n  /**\n   * Get detailed health metrics for specific proxy\n   */\n  async getProxyHealthMetrics(proxyId: string): Promise<ProxyHealthMetrics | null> {\n    const assignment = await db\n      .select()\n      .from(proxyAssignments)\n      .where(eq(proxyAssignments.id, proxyId))\n      .limit(1);\n\n    if (assignment.length === 0) {\n      return null;\n    }\n\n    return this.monitorSingleProxy(assignment[0]);\n  }\n\n  // Private helper methods\n\n  private async performHealthCheck(credentials: any): Promise<{\n    success: boolean;\n    responseTime: number;\n    ip: string;\n    error?: string;\n  }> {\n    try {\n      const testResult = await this.proxyCheapClient.testProxyConnection({\n        host: credentials.host,\n        port: credentials.port,\n        username: credentials.username,\n        password: credentials.password,\n        protocol: credentials.protocol as 'http' | 'https' | 'socks5'\n      });\n\n      return {\n        success: testResult.success,\n        responseTime: testResult.responseTime,\n        ip: testResult.ip,\n        error: testResult.error\n      };\n    } catch (error) {\n      return {\n        success: false,\n        responseTime: 0,\n        ip: '',\n        error: (error as Error).message\n      };\n    }\n  }\n\n  private async decryptProxyCredentials(assignment: any): Promise<any> {\n    if (!assignment.proxyCredentialsEncrypted) {\n      throw new Error('No encrypted credentials found');\n    }\n\n    const encryptedData = JSON.parse(assignment.proxyCredentialsEncrypted);\n    return await this.encryptionService.decryptProxyCredentials(encryptedData);\n  }\n\n  private async updateMonitoringResults(\n    assignment: any,\n    healthResult: any,\n    reputationResult: any,\n    geoResult: any\n  ): Promise<void> {\n    const updateData: any = {\n      lastHealthCheck: new Date(),\n      healthCheckStatus: healthResult.success ? 'healthy' : 'failed',\n      averageResponseTime: healthResult.responseTime,\n      consecutiveFailures: healthResult.success ? 0 : (assignment.consecutiveFailures || 0) + 1,\n    };\n\n    // Update reputation data if checked\n    if (reputationResult) {\n      updateData.ipReputationScore = reputationResult.score.toString();\n      updateData.isResidentialVerified = reputationResult.isResidential;\n      updateData.blacklistCheckStatus = reputationResult.blacklistStatus;\n      updateData.lastReputationCheck = new Date();\n    }\n\n    // Update geolocation data if checked\n    if (geoResult) {\n      updateData.detectedCountry = geoResult.detectedCountry;\n      updateData.detectedCity = geoResult.detectedCity;\n      updateData.detectedRegion = geoResult.detectedRegion;\n      updateData.isPhilippinesVerified = geoResult.isPhilippines;\n      updateData.geoValidationLastCheck = new Date();\n    }\n\n    await db\n      .update(proxyAssignments)\n      .set(updateData)\n      .where(eq(proxyAssignments.id, assignment.id));\n  }\n\n  private async checkAndGenerateAlerts(\n    assignment: any,\n    healthResult: any,\n    reputationResult: any,\n    geoResult: any\n  ): Promise<void> {\n    const proxyId = assignment.id;\n    const expertId = assignment.personaId;\n\n    // Health alerts\n    if (!healthResult.success) {\n      const consecutiveFailures = (assignment.consecutiveFailures || 0) + 1;\n      if (consecutiveFailures >= MONITORING_CONFIG.MAX_CONSECUTIVE_FAILURES) {\n        this.alertManager.createAlert(\n          'health',\n          'critical',\n          `Proxy has failed ${consecutiveFailures} consecutive health checks`,\n          proxyId,\n          expertId\n        );\n      }\n    }\n\n    // Performance alerts\n    if (healthResult.responseTime > MONITORING_CONFIG.RESPONSE_TIME_THRESHOLD) {\n      this.alertManager.createAlert(\n        'performance',\n        'medium',\n        `High response time: ${healthResult.responseTime}ms`,\n        proxyId,\n        expertId\n      );\n    }\n\n    // Location alerts\n    if (geoResult && !geoResult.isPhilippines) {\n      this.alertManager.createAlert(\n        'location',\n        'high',\n        `Proxy not located in Philippines: ${geoResult.detectedCountry}`,\n        proxyId,\n        expertId\n      );\n    }\n\n    // Reputation alerts\n    if (reputationResult) {\n      if (reputationResult.blacklistStatus === 'flagged') {\n        this.alertManager.createAlert(\n          'reputation',\n          'high',\n          'Proxy IP flagged in reputation databases',\n          proxyId,\n          expertId\n        );\n      }\n\n      if (!reputationResult.isResidential) {\n        this.alertManager.createAlert(\n          'reputation',\n          'medium',\n          'Proxy IP detected as non-residential',\n          proxyId,\n          expertId\n        );\n      }\n    }\n  }\n\n  private buildHealthMetrics(\n    assignment: any,\n    healthResult: any,\n    reputationResult: any,\n    geoResult: any\n  ): ProxyHealthMetrics {\n    let status: 'healthy' | 'degraded' | 'failed' | 'unknown' = 'unknown';\n    \n    if (healthResult.success) {\n      if (healthResult.responseTime < MONITORING_CONFIG.RESPONSE_TIME_THRESHOLD) {\n        status = 'healthy';\n      } else {\n        status = 'degraded';\n      }\n    } else {\n      status = 'failed';\n    }\n\n    return {\n      proxyId: assignment.id,\n      expertId: assignment.personaId,\n      status,\n      lastCheck: new Date(),\n      responseTime: healthResult.responseTime,\n      successRate: assignment.connectionSuccessRate || 0,\n      consecutiveFailures: assignment.consecutiveFailures || 0,\n      location: {\n        country: assignment.detectedCountry || 'unknown',\n        city: assignment.detectedCity || 'unknown',\n        isPhilippinesVerified: assignment.isPhilippinesVerified || false\n      },\n      reputation: {\n        score: reputationResult?.score || parseFloat(assignment.ipReputationScore || '0'),\n        isResidential: reputationResult?.isResidential || assignment.isResidentialVerified || false,\n        blacklistStatus: reputationResult?.blacklistStatus || assignment.blacklistCheckStatus || 'unknown'\n      },\n      alerts: this.alertManager.getActiveAlertsForProxy(assignment.id)\n    };\n  }\n\n  /**\n   * Health check for monitoring service itself\n   */\n  async healthCheck(): Promise<{\n    status: 'healthy' | 'degraded' | 'unhealthy';\n    details: Record<string, any>;\n  }> {\n    try {\n      const summary = await this.getMonitoringSummary();\n      \n      return {\n        status: summary.systemHealth === 'critical' ? 'unhealthy' : \n                summary.systemHealth === 'degraded' ? 'degraded' : 'healthy',\n        details: {\n          isMonitoring: this.isMonitoring,\n          totalProxies: summary.totalProxies,\n          activeAlerts: summary.activeAlerts,\n          systemHealth: summary.systemHealth,\n          lastRun: summary.lastMonitoringRun,\n          timestamp: new Date().toISOString()\n        }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        details: {\n          error: (error as Error).message,\n          timestamp: new Date().toISOString()\n        }\n      };\n    }\n  }\n}\n\n// Singleton service instance\nlet monitoringServiceInstance: ProxyMonitoringService | null = null;\n\n/**\n * Get singleton monitoring service instance\n */\nexport function getProxyMonitoringService(): ProxyMonitoringService {\n  if (!monitoringServiceInstance) {\n    monitoringServiceInstance = new ProxyMonitoringService();\n  }\n  return monitoringServiceInstance;\n}\n\n/**\n * Auto-start monitoring service\n */\nexport function startProxyMonitoring(): void {\n  const service = getProxyMonitoringService();\n  service.startMonitoring();\n}","size_bytes":20988},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"twilio>=9.8.0\",\n]\n","size_bytes":165},"src/server/twilio-client.ts":{"content":"import twilio from 'twilio';\nimport { db } from './db/index';\nimport { expertPhoneNumbers, smsVerificationSessions, smsMessages, verificationCodes, expertPersonas } from '../shared/schema';\nimport { getEncryptionService, EncryptedData } from './encryption-service';\nimport { eq, and, desc, gt } from 'drizzle-orm';\nimport winston from 'winston';\n\n// Import real-time dashboard delivery\nlet deliverVerificationCodeToExpert: any = null;\n// Lazy import to avoid circular dependency\nasync function loadDashboardDelivery() {\n  if (!deliverVerificationCodeToExpert) {\n    const dashboardModule = await import('./routes/dashboard');\n    deliverVerificationCodeToExpert = dashboardModule.deliverVerificationCodeToExpert;\n  }\n  return deliverVerificationCodeToExpert;\n}\n\n// Initialize logger\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'twilio-client' },\n  transports: [new winston.transports.Console()]\n});\n\n// Twilio Configuration\ninterface TwilioConfig {\n  accountSid: string;\n  authToken: string;\n  phoneNumber: string;\n}\n\n// Types for Twilio operations\nexport interface PhoneNumberProvisionRequest {\n  expertId: string;\n  phoneNumberType?: 'local' | 'mobile' | 'toll-free';\n  areaCode?: string;\n  friendlyName?: string;\n}\n\nexport interface PhoneNumberProvisionResult {\n  phoneNumberId: string;\n  twilioPhoneNumber: string;\n  twilioPhoneSid: string;\n  monthlyCostUsd: number;\n  capabilities: Record<string, any>;\n  status: 'provisioned' | 'failed';\n  error?: string;\n}\n\nexport interface SMSVerificationSessionRequest {\n  expertId: string;\n  platformType: 'medium' | 'reddit' | 'quora' | 'facebook' | 'linkedin';\n  platformAction: 'signup' | 'login' | 'phone_verification' | '2fa_setup';\n  expectedCodePattern?: '4-digit' | '6-digit' | '8-digit' | 'alphanumeric';\n  sessionNotes?: string;\n}\n\nexport interface SMSVerificationSessionResult {\n  sessionId: string;\n  phoneNumber: string;\n  sessionStatus: string;\n  webhookUrl: string;\n  expectedCodePattern: string;\n  expiresAt: Date;\n}\n\nexport interface VerificationCodeResult {\n  codeId: string;\n  verificationCode: string;\n  codeType: string;\n  platformType: string;\n  extractedAt: Date;\n  isValid: boolean;\n  expiresAt?: Date;\n  validationScore?: number;\n}\n\nexport interface WebhookSMSEvent {\n  MessageSid: string;\n  From: string;\n  To: string;\n  Body: string;\n  MessageStatus: string;\n  EventType: string;\n}\n\n// Error classes\nexport class TwilioClientError extends Error {\n  constructor(message: string, public code: string, public details?: any) {\n    super(message);\n    this.name = 'TwilioClientError';\n  }\n}\n\nexport class PhoneProvisioningError extends TwilioClientError {\n  constructor(message: string, details?: any) {\n    super(message, 'PHONE_PROVISIONING_ERROR', details);\n  }\n}\n\nexport class SMSProcessingError extends TwilioClientError {\n  constructor(message: string, details?: any) {\n    super(message, 'SMS_PROCESSING_ERROR', details);\n  }\n}\n\nexport class VerificationSessionError extends TwilioClientError {\n  constructor(message: string, details?: any) {\n    super(message, 'VERIFICATION_SESSION_ERROR', details);\n  }\n}\n\n/**\n * Comprehensive Twilio SMS Automation Client\n * Handles Philippines phone number provisioning, SMS verification automation,\n * and real-time verification code extraction for expert platform authentication\n */\nexport class TwilioSMSClient {\n  private twilioClient: twilio.Twilio;\n  private encryptionService = getEncryptionService();\n  private config: TwilioConfig;\n\n  // Budget constraints (Philippines focus)\n  private static readonly PHILIPPINES_COUNTRY_CODE = '+63';\n  private static readonly MAX_PHONE_NUMBERS_PER_EXPERT = 1;\n  private static readonly ESTIMATED_MONTHLY_COST_PER_NUMBER = 1.00; // USD\n  private static readonly TOTAL_MONTHLY_BUDGET = 15.00; // USD for Twilio\n  \n  // Enhanced verification code patterns for full 4-8 digit + alphanumeric support\n  private static readonly PLATFORM_CODE_PATTERNS = {\n    medium: [\n      /(?:verification code|verify|code)[\\s:\\-]*(\\d{4,8})(?![0-9])/i,\n      /(?:verification code|verify|code)[\\s:\\-]*([A-Z0-9]{4,8})(?![A-Z0-9])/i,\n      /\\b(\\d{4,8})\\b.*(?:code|verification|verify)/i\n    ],\n    reddit: [\n      /(?:verification code|verify|code)[\\s:\\-]*(\\d{4,8})(?![0-9])/i,\n      /(?:verification code|verify|code)[\\s:\\-]*([A-Z0-9]{4,8})(?![A-Z0-9])/i,\n      /\\b(\\d{4,8})\\b.*(?:code|verification|verify)/i\n    ],\n    quora: [\n      /(?:verification|verify|code)[\\s:\\-]*(\\d{4,8})(?![0-9])/i,\n      /(?:verification|verify|code)[\\s:\\-]*([A-Z0-9]{4,8})(?![A-Z0-9])/i,\n      /\\b(\\d{4,8})\\b.*(?:code|verification|verify)/i\n    ],\n    facebook: [\n      /(?:verification code|verify|code|FB)[\\s:\\-]*(\\d{4,8})(?![0-9])/i,\n      /(?:verification code|verify|code|FB)[\\s:\\-]*([A-Z0-9]{4,8})(?![A-Z0-9])/i,\n      /\\b(\\d{4,8})\\b.*(?:code|verification|verify)/i\n    ],\n    linkedin: [\n      /(?:verification code|verify|code|LinkedIn)[\\s:\\-]*(\\d{4,8})(?![0-9])/i,\n      /(?:verification code|verify|code|LinkedIn)[\\s:\\-]*([A-Z0-9]{4,8})(?![A-Z0-9])/i,\n      /\\b(\\d{4,8})\\b.*(?:code|verification|verify)/i\n    ],\n    // Enhanced generic fallback patterns with confidence scoring\n    generic: [\n      /(?:code|verification|verify)[\\s:\\-]*(\\d{4,8})(?![0-9])/i,\n      /(?:code|verification|verify)[\\s:\\-]*([A-Z0-9]{4,8})(?![A-Z0-9])/i,\n      /your\\s+(?:code|pin|otp)[\\s:\\-]*([A-Z0-9]{4,8})/i,\n      /authentication\\s+code[\\s:\\-]*([A-Z0-9]{4,8})/i,\n      /\\b(\\d{4,8})\\b.*(?:code|verification|verify)/i,\n      /verification.*?(\\d{4,8})(?![0-9])/i\n    ]\n  };\n\n  constructor() {\n    this.config = this.loadTwilioConfig();\n    this.twilioClient = twilio(this.config.accountSid, this.config.authToken);\n    \n    logger.info('🔧 Twilio SMS client initialized', {\n      accountSid: this.config.accountSid.substring(0, 10) + '...',\n      phoneNumber: this.config.phoneNumber.substring(0, 4) + '***' + this.config.phoneNumber.slice(-4)\n    });\n  }\n\n  private loadTwilioConfig(): TwilioConfig {\n    const accountSid = process.env.TWILIO_ACCOUNT_SID;\n    const authToken = process.env.TWILIO_AUTH_TOKEN;\n    const phoneNumber = process.env.TWILIO_PHONE_NUMBER;\n\n    if (!accountSid || !authToken || !phoneNumber) {\n      throw new TwilioClientError(\n        'Missing required Twilio environment variables',\n        'MISSING_CREDENTIALS',\n        { required: ['TWILIO_ACCOUNT_SID', 'TWILIO_AUTH_TOKEN', 'TWILIO_PHONE_NUMBER'] }\n      );\n    }\n\n    return { accountSid, authToken, phoneNumber };\n  }\n\n  /**\n   * Provision Philippines phone number for expert\n   */\n  async provisionPhilippinesPhoneNumber(request: PhoneNumberProvisionRequest): Promise<PhoneNumberProvisionResult> {\n    try {\n      logger.info('📱 Provisioning Philippines phone number', { expertId: request.expertId });\n\n      // Check if expert already has a phone number\n      const existingPhoneNumbers = await db\n        .select()\n        .from(expertPhoneNumbers)\n        .where(and(\n          eq(expertPhoneNumbers.personaId, request.expertId),\n          eq(expertPhoneNumbers.assignmentStatus, 'assigned')\n        ));\n\n      if (existingPhoneNumbers.length >= TwilioSMSClient.MAX_PHONE_NUMBERS_PER_EXPERT) {\n        throw new PhoneProvisioningError(\n          `Expert ${request.expertId} already has maximum phone numbers (${TwilioSMSClient.MAX_PHONE_NUMBERS_PER_EXPERT})`\n        );\n      }\n\n      // Check budget constraints\n      await this.validateBudgetConstraints();\n\n      // Search for available Philippines phone numbers\n      const availableNumbers = await this.twilioClient.availablePhoneNumbers('PH')\n        .local\n        .list({\n          smsEnabled: true,\n          voiceEnabled: true,\n          limit: 10,\n          areaCode: request.areaCode ? parseInt(request.areaCode) : undefined\n        });\n\n      if (availableNumbers.length === 0) {\n        throw new PhoneProvisioningError('No Philippines phone numbers available');\n      }\n\n      // Purchase the first available number\n      const selectedNumber = availableNumbers[0];\n      const purchasedNumber = await this.twilioClient.incomingPhoneNumbers.create({\n        phoneNumber: selectedNumber.phoneNumber,\n        friendlyName: request.friendlyName || `Expert ${request.expertId} - PH`,\n        smsUrl: `${process.env.REPLIT_DOMAIN || 'http://localhost:3001'}/api/webhooks/sms`,\n        smsMethod: 'POST',\n        voiceUrl: `${process.env.REPLIT_DOMAIN || 'http://localhost:3001'}/api/webhooks/voice`,\n        voiceMethod: 'POST'\n      });\n\n      // Generate encryption key for phone number credentials\n      const encryptionKeyId = this.encryptionService.generateExpertEncryptionKey(request.expertId);\n\n      // Store phone number in database\n      const phoneNumberRecord = await db\n        .insert(expertPhoneNumbers)\n        .values({\n          personaId: request.expertId,\n          twilioPhoneNumber: purchasedNumber.phoneNumber,\n          twilioPhoneSid: purchasedNumber.sid,\n          phoneNumberStatus: 'active',\n          countryCode: 'PH',\n          friendlyName: purchasedNumber.friendlyName || '',\n          phoneNumberType: request.phoneNumberType || 'local',\n          capabilities: {\n            voice: purchasedNumber.capabilities.voice,\n            sms: purchasedNumber.capabilities.sms,\n            mms: purchasedNumber.capabilities.mms\n          },\n          assignmentStatus: 'assigned',\n          monthlyCostUsd: TwilioSMSClient.ESTIMATED_MONTHLY_COST_PER_NUMBER.toFixed(2),\n          webhookUrl: `${process.env.REPLIT_DOMAIN || 'http://localhost:3001'}/api/webhooks/sms`,\n          verificationEnabled: true,\n          encryptionKeyId,\n          healthStatus: 'healthy',\n          assignedAt: new Date()\n        })\n        .returning();\n\n      logger.info('✅ Philippines phone number provisioned successfully', {\n        expertId: request.expertId,\n        phoneNumber: purchasedNumber.phoneNumber.substring(0, 4) + '***' + purchasedNumber.phoneNumber.slice(-4),\n        phoneNumberId: phoneNumberRecord[0].id\n      });\n\n      return {\n        phoneNumberId: phoneNumberRecord[0].id,\n        twilioPhoneNumber: purchasedNumber.phoneNumber,\n        twilioPhoneSid: purchasedNumber.sid,\n        monthlyCostUsd: TwilioSMSClient.ESTIMATED_MONTHLY_COST_PER_NUMBER,\n        capabilities: phoneNumberRecord[0].capabilities as Record<string, any>,\n        status: 'provisioned'\n      };\n\n    } catch (error: any) {\n      logger.error('❌ Phone number provisioning failed', { \n        expertId: request.expertId, \n        error: error.message \n      });\n      \n      if (error instanceof PhoneProvisioningError) {\n        throw error;\n      }\n      \n      throw new PhoneProvisioningError(\n        `Failed to provision phone number: ${error.message}`,\n        { originalError: error.message }\n      );\n    }\n  }\n\n  /**\n   * Create SMS verification session for platform authentication\n   */\n  async createVerificationSession(request: SMSVerificationSessionRequest): Promise<SMSVerificationSessionResult> {\n    try {\n      logger.info('🔐 Creating SMS verification session', { \n        expertId: request.expertId, \n        platformType: request.platformType \n      });\n\n      // Get expert's phone number\n      const phoneNumber = await db\n        .select()\n        .from(expertPhoneNumbers)\n        .where(and(\n          eq(expertPhoneNumbers.personaId, request.expertId),\n          eq(expertPhoneNumbers.assignmentStatus, 'assigned'),\n          eq(expertPhoneNumbers.phoneNumberStatus, 'active')\n        ))\n        .limit(1);\n\n      if (phoneNumber.length === 0) {\n        throw new VerificationSessionError(\n          `No active phone number found for expert ${request.expertId}`\n        );\n      }\n\n      // Create verification session\n      const sessionExpiry = new Date();\n      sessionExpiry.setMinutes(sessionExpiry.getMinutes() + 30); // 30 minute expiry\n\n      const session = await db\n        .insert(smsVerificationSessions)\n        .values({\n          personaId: request.expertId,\n          phoneNumberId: phoneNumber[0].id,\n          platformType: request.platformType,\n          platformAction: request.platformAction,\n          sessionStatus: 'active',\n          sessionExpiredAt: sessionExpiry,\n          expectedCodePattern: request.expectedCodePattern || '6-digit',\n          maxRetries: 3,\n          attemptsRemaining: 3,\n          sessionNotes: request.sessionNotes\n        })\n        .returning();\n\n      const webhookUrl = `${process.env.REPLIT_DOMAIN || 'http://localhost:3001'}/api/webhooks/sms/${session[0].id}`;\n\n      logger.info('✅ SMS verification session created', {\n        sessionId: session[0].id,\n        expertId: request.expertId,\n        platformType: request.platformType,\n        phoneNumber: phoneNumber[0].twilioPhoneNumber.substring(0, 4) + '***' + phoneNumber[0].twilioPhoneNumber.slice(-4)\n      });\n\n      return {\n        sessionId: session[0].id,\n        phoneNumber: phoneNumber[0].twilioPhoneNumber,\n        sessionStatus: session[0].sessionStatus || 'active',\n        webhookUrl,\n        expectedCodePattern: session[0].expectedCodePattern || '6-digit',\n        expiresAt: sessionExpiry\n      };\n\n    } catch (error: any) {\n      logger.error('❌ Verification session creation failed', { \n        expertId: request.expertId, \n        error: error.message \n      });\n      \n      if (error instanceof VerificationSessionError) {\n        throw error;\n      }\n      \n      throw new VerificationSessionError(\n        `Failed to create verification session: ${error.message}`,\n        { originalError: error.message }\n      );\n    }\n  }\n\n  /**\n   * Process incoming SMS webhook and extract verification codes\n   */\n  async processSMSWebhook(webhookData: WebhookSMSEvent): Promise<VerificationCodeResult | null> {\n    try {\n      logger.info('📨 Processing incoming SMS webhook', {\n        messageSid: webhookData.MessageSid.substring(0, 10) + '...',\n        fromNumber: webhookData.From.substring(0, 4) + '***' + webhookData.From.slice(-4),\n        toNumber: webhookData.To.substring(0, 4) + '***' + webhookData.To.slice(-4)\n      });\n\n      // Find phone number record\n      const phoneNumber = await db\n        .select()\n        .from(expertPhoneNumbers)\n        .where(eq(expertPhoneNumbers.twilioPhoneNumber, webhookData.To))\n        .limit(1);\n\n      if (phoneNumber.length === 0) {\n        logger.warn('⚠️ SMS received for unknown phone number', { \n          phoneNumber: webhookData.To.substring(0, 4) + '***' + webhookData.To.slice(-4) \n        });\n        return null;\n      }\n\n      // Enhanced session lookup: Find active verification session with expert context\n      const activeSession = await db\n        .select({\n          id: smsVerificationSessions.id,\n          personaId: smsVerificationSessions.personaId,\n          platformType: smsVerificationSessions.platformType,\n          platformAction: smsVerificationSessions.platformAction,\n          sessionStatus: smsVerificationSessions.sessionStatus,\n          expectedCodePattern: smsVerificationSessions.expectedCodePattern,\n          sessionExpiredAt: smsVerificationSessions.sessionExpiredAt,\n          attemptsRemaining: smsVerificationSessions.attemptsRemaining,\n          createdAt: smsVerificationSessions.createdAt\n        })\n        .from(smsVerificationSessions)\n        .where(and(\n          eq(smsVerificationSessions.phoneNumberId, phoneNumber[0].id),\n          eq(smsVerificationSessions.sessionStatus, 'active'),\n          gt(smsVerificationSessions.sessionExpiredAt, new Date()) // Not expired\n        ))\n        .orderBy(desc(smsVerificationSessions.createdAt))\n        .limit(1);\n\n      // If no active session found, log for debugging\n      if (activeSession.length === 0) {\n        logger.warn('⚠️ No active verification session found for SMS', {\n          phoneNumber: webhookData.To.substring(0, 4) + '***' + webhookData.To.slice(-4),\n          messageSid: webhookData.MessageSid.substring(0, 10) + '...'\n        });\n      } else {\n        logger.info('✅ Found active verification session', {\n          sessionId: activeSession[0].id.substring(0, 8) + '...',\n          platformType: activeSession[0].platformType,\n          platformAction: activeSession[0].platformAction,\n          attemptsRemaining: activeSession[0].attemptsRemaining\n        });\n      }\n\n      // Store SMS message\n      const smsMessage = await db\n        .insert(smsMessages)\n        .values({\n          sessionId: activeSession.length > 0 ? activeSession[0].id : null,\n          phoneNumberId: phoneNumber[0].id,\n          twilioMessageSid: webhookData.MessageSid,\n          fromPhoneNumber: webhookData.From,\n          toPhoneNumber: webhookData.To,\n          messageBody: webhookData.Body,\n          messageDirection: 'inbound',\n          messageStatus: webhookData.MessageStatus,\n          processingStatus: 'pending'\n        })\n        .returning();\n\n      // Extract verification code with proper session context\n      const sessionContext = activeSession.length > 0 ? activeSession[0] : null;\n      const verificationCode = await this.extractVerificationCode(\n        webhookData.Body,\n        sessionContext,\n        smsMessage[0]\n      );\n\n      if (verificationCode) {\n        // Update message processing status\n        await db\n          .update(smsMessages)\n          .set({\n            verificationCode: verificationCode.verificationCode,\n            codeConfidence: '1.00',\n            codePattern: verificationCode.codeType,\n            processingStatus: 'processed',\n            deliveredToDashboard: false,\n            processedAt: new Date()\n          })\n          .where(eq(smsMessages.id, smsMessage[0].id));\n\n        logger.info('🎯 Verification code extracted successfully', {\n          codeLength: verificationCode.verificationCode.length,\n          codeType: verificationCode.codeType,\n          platform: verificationCode.platformType,\n          codePattern: verificationCode.verificationCode.replace(/\\d/g, 'X').replace(/[A-Z]/g, 'Y')\n        });\n\n        // Real-time delivery to expert dashboard\n        if (sessionContext?.personaId) {\n          try {\n            const deliveryFunction = await loadDashboardDelivery();\n            await deliveryFunction(sessionContext.personaId, {\n              codeId: verificationCode.codeId,\n              verificationCode: verificationCode.verificationCode,\n              codeType: verificationCode.codeType,\n              platformType: verificationCode.platformType,\n              extractedAt: verificationCode.extractedAt,\n              expiresAt: verificationCode.expiresAt,\n              isValid: verificationCode.isValid\n            });\n          } catch (deliveryError: any) {\n            logger.warn('⚠️ Failed to deliver verification code to dashboard', {\n              expertId: sessionContext.personaId.substring(0, 8) + '...',\n              error: deliveryError.message\n            });\n          }\n        }\n\n        return verificationCode;\n      }\n\n      // Update message as processed but no code found\n      await db\n        .update(smsMessages)\n        .set({\n          processingStatus: 'processed',\n          processingNotes: 'No verification code detected',\n          processedAt: new Date()\n        })\n        .where(eq(smsMessages.id, smsMessage[0].id));\n\n      logger.info('ℹ️ SMS processed but no verification code found', {\n        messageLength: webhookData.Body.length,\n        hasNumbers: /\\d/.test(webhookData.Body),\n        messagePattern: webhookData.Body.replace(/\\d/g, 'X').replace(/[A-Za-z]/g, 'Y').substring(0, 20) + '...'\n      });\n\n      return null;\n\n    } catch (error: any) {\n      logger.error('❌ SMS webhook processing failed', { \n        messageSid: webhookData.MessageSid.substring(0, 10) + '...', \n        error: error.message \n      });\n      \n      throw new SMSProcessingError(\n        `Failed to process SMS webhook: ${error.message}`,\n        { webhookData, originalError: error.message }\n      );\n    }\n  }\n\n  /**\n   * Enhanced verification code extraction with platform-specific patterns and confidence scoring\n   */\n  private async extractVerificationCode(\n    messageBody: string,\n    session: any | null,\n    smsMessage: any\n  ): Promise<VerificationCodeResult | null> {\n    try {\n      const platformType = session?.platformType || 'generic';\n      \n      // Get platform-specific patterns or fall back to generic\n      const platformPatterns = TwilioSMSClient.PLATFORM_CODE_PATTERNS[platformType as keyof typeof TwilioSMSClient.PLATFORM_CODE_PATTERNS] \n        || TwilioSMSClient.PLATFORM_CODE_PATTERNS.generic;\n\n      let bestMatch: { code: string; confidence: number; type: string; pattern: string } | null = null;\n\n      // Try platform-specific patterns first\n      for (let i = 0; i < platformPatterns.length; i++) {\n        const pattern = platformPatterns[i];\n        const match = messageBody.match(pattern);\n        \n        if (match && match[1]) {\n          const code = match[1].trim();\n          \n          // Validate code length (4-8 characters)\n          if (code.length >= 4 && code.length <= 8) {\n            let confidence = 0.7 + (i === 0 ? 0.2 : 0.0); // Higher confidence for first pattern\n            let codeType = 'unknown';\n            \n            // Determine code type and adjust confidence\n            if (/^\\d+$/.test(code)) {\n              codeType = 'numeric';\n              confidence += 0.1; // Numeric codes are more common\n            } else if (/^[A-Z0-9]+$/.test(code.toUpperCase())) {\n              codeType = 'alphanumeric';\n              confidence += 0.05;\n            } else if (/^[a-zA-Z0-9]+$/.test(code)) {\n              codeType = 'mixed_case';\n              confidence += 0.03;\n            }\n            \n            // Context-based confidence boost\n            if (messageBody.toLowerCase().includes('verification') || \n                messageBody.toLowerCase().includes('verify') ||\n                messageBody.toLowerCase().includes('authenticate')) {\n              confidence += 0.05;\n            }\n            \n            // Length-based confidence (6-digit is most common)\n            if (code.length === 6) confidence += 0.05;\n            else if (code.length === 4 || code.length === 8) confidence += 0.03;\n            \n            const patternType = i < 2 ? `${platformType}_primary` : `${platformType}_fallback`;\n            \n            if (!bestMatch || confidence > bestMatch.confidence) {\n              bestMatch = {\n                code: code.toUpperCase(),\n                confidence: Math.min(confidence, 0.99), // Cap at 99%\n                type: codeType,\n                pattern: patternType\n              };\n            }\n          }\n        }\n      }\n\n      // If no good match found, return null\n      if (!bestMatch || bestMatch.confidence <= 0.6) {\n        return null;\n      }\n\n      // Store verification code in database\n      const codeExpiry = new Date();\n      codeExpiry.setMinutes(codeExpiry.getMinutes() + 10); // 10 minute expiry\n\n      const verificationCodeRecord = await db\n        .insert(verificationCodes)\n        .values({\n          sessionId: session?.id || null,\n          messageId: smsMessage.id,\n          verificationCode: bestMatch.code,\n          codeType: bestMatch.type,\n          codeLength: bestMatch.code.length,\n          isValid: true,\n          validationScore: bestMatch.confidence.toFixed(2),\n          platformType: session?.platformType || 'unknown',\n          codeUsageType: session?.platformAction || 'unknown',\n          codeStatus: 'active',\n          expiresAt: codeExpiry,\n          sentToDashboard: false\n        })\n        .returning();\n\n      return {\n        codeId: verificationCodeRecord[0].id,\n        verificationCode: bestMatch.code,\n        codeType: bestMatch.type,\n        platformType: session?.platformType || 'unknown',\n        extractedAt: new Date(),\n        isValid: true,\n        expiresAt: codeExpiry\n      };\n\n    } catch (error: any) {\n      logger.error('❌ Verification code extraction failed', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Get active verification codes for expert dashboard\n   */\n  async getActiveVerificationCodes(expertId: string): Promise<VerificationCodeResult[]> {\n    try {\n      const phoneNumbers = await db\n        .select()\n        .from(expertPhoneNumbers)\n        .where(eq(expertPhoneNumbers.personaId, expertId));\n\n      if (phoneNumbers.length === 0) {\n        return [];\n      }\n\n      const phoneNumberIds = phoneNumbers.map(p => p.id);\n      \n      const activeCodes = await db\n        .select({\n          id: verificationCodes.id,\n          verificationCode: verificationCodes.verificationCode,\n          codeType: verificationCodes.codeType,\n          platformType: verificationCodes.platformType,\n          extractedAt: verificationCodes.extractedAt,\n          isValid: verificationCodes.isValid,\n          expiresAt: verificationCodes.expiresAt,\n          sessionId: verificationCodes.sessionId\n        })\n        .from(verificationCodes)\n        .innerJoin(smsVerificationSessions, eq(verificationCodes.sessionId, smsVerificationSessions.id))\n        .where(and(\n          eq(verificationCodes.codeStatus, 'active'),\n          eq(verificationCodes.isValid, true),\n          gt(verificationCodes.expiresAt, new Date())\n        ))\n        .orderBy(desc(verificationCodes.extractedAt));\n\n      return activeCodes.map(code => ({\n        codeId: code.id,\n        verificationCode: code.verificationCode || '',\n        codeType: code.codeType || 'unknown',\n        platformType: code.platformType || 'unknown',\n        extractedAt: code.extractedAt || new Date(),\n        isValid: code.isValid || false,\n        expiresAt: code.expiresAt || undefined\n      }));\n\n    } catch (error: any) {\n      logger.error('❌ Failed to get active verification codes', { \n        expertId, \n        error: error.message \n      });\n      return [];\n    }\n  }\n\n  /**\n   * Validate budget constraints for phone number provisioning\n   */\n  private async validateBudgetConstraints(): Promise<void> {\n    const currentPhoneNumbers = await db\n      .select()\n      .from(expertPhoneNumbers)\n      .where(eq(expertPhoneNumbers.assignmentStatus, 'assigned'));\n\n    const totalMonthlyCost = currentPhoneNumbers.reduce((total, phone) => {\n      return total + parseFloat(phone.monthlyCostUsd?.toString() || '0');\n    }, 0);\n\n    if (totalMonthlyCost + TwilioSMSClient.ESTIMATED_MONTHLY_COST_PER_NUMBER > TwilioSMSClient.TOTAL_MONTHLY_BUDGET) {\n      throw new PhoneProvisioningError(\n        `Adding phone number would exceed budget. Current: $${totalMonthlyCost.toFixed(2)}, Budget: $${TwilioSMSClient.TOTAL_MONTHLY_BUDGET.toFixed(2)}`\n      );\n    }\n  }\n\n  /**\n   * Health check for Twilio service\n   */\n  async healthCheck(): Promise<{\n    status: 'healthy' | 'degraded' | 'failed';\n    accountInfo: any;\n    phoneNumberCount: number;\n    activeSessionCount: number;\n  }> {\n    try {\n      const account = await this.twilioClient.api.v2010.accounts(this.config.accountSid).fetch();\n      \n      const phoneNumberCount = await db\n        .select()\n        .from(expertPhoneNumbers)\n        .where(eq(expertPhoneNumbers.assignmentStatus, 'assigned'));\n\n      const activeSessionCount = await db\n        .select()\n        .from(smsVerificationSessions)\n        .where(eq(smsVerificationSessions.sessionStatus, 'active'));\n\n      return {\n        status: 'healthy',\n        accountInfo: {\n          accountSid: account.sid,\n          friendlyName: account.friendlyName,\n          status: account.status\n        },\n        phoneNumberCount: phoneNumberCount.length,\n        activeSessionCount: activeSessionCount.length\n      };\n\n    } catch (error: any) {\n      logger.error('❌ Twilio health check failed', { error: error.message });\n      \n      return {\n        status: 'failed',\n        accountInfo: null,\n        phoneNumberCount: 0,\n        activeSessionCount: 0\n      };\n    }\n  }\n}\n\n// Factory function for creating Twilio SMS client\nexport function createTwilioSMSClient(): TwilioSMSClient {\n  return new TwilioSMSClient();\n}\n\n// Export factory function for on-demand creation\nexport function createTwilioSMSClientInstance(): TwilioSMSClient {\n  return createTwilioSMSClient();\n}","size_bytes":28236},"src/server/middleware/twilioSignatureValidation.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport crypto from 'crypto';\nimport { logger } from '../services/logger';\n\n/**\n * Security middleware for validating Twilio webhook signatures\n * Prevents SMS injection attacks and unauthorized webhook calls\n */\n\nexport interface TwilioValidatedRequest extends Request {\n  rawBody?: Buffer;\n  twilioSignature?: string;\n  isValidTwilioRequest?: boolean;\n}\n\n/**\n * Middleware to capture raw body for signature validation\n * Must be applied before express.json() middleware\n */\nexport const captureRawBody = (req: TwilioValidatedRequest, res: Response, next: NextFunction) => {\n  const chunks: Buffer[] = [];\n  \n  req.on('data', (chunk: Buffer) => {\n    chunks.push(chunk);\n  });\n  \n  req.on('end', () => {\n    req.rawBody = Buffer.concat(chunks);\n    next();\n  });\n  \n  req.on('error', (error) => {\n    logger.error('Error capturing raw body for Twilio signature validation', { error: error.message });\n    next(error);\n  });\n};\n\n/**\n * Validates Twilio webhook signature using HMAC-SHA1\n * Reference: https://www.twilio.com/docs/usage/webhooks/webhooks-security\n */\nexport const validateTwilioSignature = (req: TwilioValidatedRequest, res: Response, next: NextFunction) => {\n  try {\n    const authToken = process.env.TWILIO_AUTH_TOKEN;\n    \n    if (!authToken) {\n      logger.error('❌ TWILIO_AUTH_TOKEN not configured for signature validation');\n      return res.status(500).json({\n        error: 'Server configuration error',\n        message: 'Webhook validation not properly configured'\n      });\n    }\n\n    const twilioSignature = req.get('X-Twilio-Signature');\n    \n    if (!twilioSignature) {\n      logger.warn('⚠️ Webhook request missing X-Twilio-Signature header', {\n        ip: req.ip,\n        userAgent: req.get('User-Agent'),\n        url: req.url\n      });\n      return res.status(403).json({\n        error: 'Forbidden',\n        message: 'Missing webhook signature'\n      });\n    }\n\n    // Get the full URL for signature validation\n    const protocol = req.secure ? 'https' : 'http';\n    const host = req.get('Host');\n    const url = `${protocol}://${host}${req.originalUrl}`;\n    \n    // Get request body for signature validation\n    const body = req.rawBody ? req.rawBody.toString('utf8') : '';\n    \n    // Create expected signature\n    const expectedSignature = generateTwilioSignature(authToken, url, body);\n    \n    // Compare signatures using timing-safe comparison\n    const isValid = crypto.timingSafeEqual(\n      Buffer.from(twilioSignature),\n      Buffer.from(expectedSignature)\n    );\n    \n    if (!isValid) {\n      logger.warn('⚠️ Invalid Twilio webhook signature detected', {\n        ip: req.ip,\n        userAgent: req.get('User-Agent'),\n        url: req.url,\n        expectedSignature: expectedSignature.substring(0, 20) + '...',\n        receivedSignature: twilioSignature.substring(0, 20) + '...'\n      });\n      return res.status(403).json({\n        error: 'Forbidden',\n        message: 'Invalid webhook signature'\n      });\n    }\n    \n    // Mark request as validated\n    req.twilioSignature = twilioSignature;\n    req.isValidTwilioRequest = true;\n    \n    logger.info('✅ Twilio webhook signature validated successfully', {\n      url: req.url,\n      ip: req.ip\n    });\n    \n    next();\n    \n  } catch (error: any) {\n    logger.error('❌ Error validating Twilio webhook signature', {\n      error: error.message,\n      url: req.url,\n      ip: req.ip\n    });\n    \n    return res.status(500).json({\n      error: 'Internal server error',\n      message: 'Webhook validation failed'\n    });\n  }\n};\n\n/**\n * Generate expected Twilio signature for comparison\n */\nfunction generateTwilioSignature(authToken: string, url: string, body: string): string {\n  // Parse URL parameters and sort them\n  const urlObj = new URL(url);\n  const params: string[] = [];\n  \n  // Add URL parameters\n  urlObj.searchParams.forEach((value, key) => {\n    params.push(`${key}${value}`);\n  });\n  \n  // Add POST body parameters if present\n  if (body) {\n    const bodyParams = new URLSearchParams(body);\n    bodyParams.forEach((value, key) => {\n      params.push(`${key}${value}`);\n    });\n  }\n  \n  // Sort parameters and concatenate with URL\n  params.sort();\n  const baseString = url + params.join('');\n  \n  // Generate HMAC-SHA1 signature\n  const hmac = crypto.createHmac('sha1', authToken);\n  hmac.update(baseString, 'utf8');\n  const signature = hmac.digest('base64');\n  \n  return signature;\n}\n\n/**\n * Rate limiting middleware specifically for webhooks\n */\nexport const webhookRateLimit = (req: Request, res: Response, next: NextFunction) => {\n  // Implement simple rate limiting (can be enhanced with Redis)\n  const rateLimitKey = `webhook_rate_limit_${req.ip}`;\n  \n  // For now, just log the rate limiting attempt\n  // In production, implement proper rate limiting with Redis\n  logger.info('🚦 Webhook rate limit check', {\n    ip: req.ip,\n    url: req.url,\n    timestamp: new Date().toISOString()\n  });\n  \n  next();\n};\n\n/**\n * Request sanitization middleware for webhook data\n */\nexport const sanitizeWebhookRequest = (req: Request, res: Response, next: NextFunction) => {\n  try {\n    // Sanitize common webhook fields\n    if (req.body) {\n      // Remove any potentially dangerous characters from text fields\n      const sanitizedBody: any = {};\n      \n      for (const [key, value] of Object.entries(req.body)) {\n        if (typeof value === 'string') {\n          // Basic sanitization - remove control characters and normalize\n          sanitizedBody[key] = value\n            .replace(/[\\x00-\\x1F\\x7F]/g, '') // Remove control characters\n            .substring(0, 1000) // Limit length\n            .trim();\n        } else {\n          sanitizedBody[key] = value;\n        }\n      }\n      \n      req.body = sanitizedBody;\n    }\n    \n    next();\n  } catch (error: any) {\n    logger.error('❌ Error sanitizing webhook request', { error: error.message });\n    return res.status(400).json({\n      error: 'Bad request',\n      message: 'Invalid request format'\n    });\n  }\n};","size_bytes":6038},"src/server/routes/dashboard.ts":{"content":"import express from 'express';\nimport { Request, Response } from 'express';\nimport { db } from '../db/index';\nimport { verificationCodes, expertPersonas, smsVerificationSessions } from '../../shared/schema';\nimport { eq, and, desc } from 'drizzle-orm';\nimport { logger } from '../services/logger';\nimport { authenticateExpert, authorizeExpertAccess } from '../middleware/auth';\n\nconst router = express.Router();\n\n// Store active SSE connections for real-time code delivery\nconst activeConnections = new Map<string, Response>();\n\n/**\n * Server-Sent Events endpoint for real-time verification code delivery\n * Route: GET /api/dashboard/verification-codes/stream/:expertId\n * SECURITY: Requires authentication via JWT token in query param for SSE compatibility\n */\nrouter.get('/verification-codes/stream/:expertId', authenticateExpert, authorizeExpertAccess, async (req: Request, res: Response) => {\n  const expertId = req.params.expertId;\n  \n  try {\n    // Expert already verified by authentication middleware\n    // Use authenticated expert info from req.expertPersona\n\n    // Set SSE headers with restricted CORS\n    res.writeHead(200, {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive',\n      'Access-Control-Allow-Origin': process.env.NODE_ENV === 'production' \n        ? process.env.FRONTEND_URL || 'https://your-domain.com'\n        : 'http://localhost:3000',\n      'Access-Control-Allow-Headers': 'Cache-Control, Authorization',\n      'Access-Control-Allow-Credentials': 'true'\n    });\n\n    // Store connection for real-time updates\n    activeConnections.set(expertId, res);\n\n    // Send initial connection confirmation\n    res.write(`data: ${JSON.stringify({\n      type: 'connection',\n      message: 'Connected to verification code stream',\n      expertId: expertId,\n      timestamp: new Date().toISOString()\n    })}\\n\\n`);\n\n    // Send any pending verification codes\n    await sendPendingCodes(expertId, res);\n\n    logger.info('🔗 Expert connected to verification code stream', {\n      expertId: expertId.substring(0, 8) + '...',\n      expertName: req.expertPersona?.expertName || 'Unknown'\n    });\n\n    // Handle client disconnect\n    req.on('close', () => {\n      activeConnections.delete(expertId);\n      logger.info('🔌 Expert disconnected from verification code stream', {\n        expertId: expertId.substring(0, 8) + '...'\n      });\n    });\n\n    // Keep connection alive with periodic heartbeat\n    const heartbeat = setInterval(() => {\n      if (activeConnections.has(expertId)) {\n        res.write(`data: ${JSON.stringify({\n          type: 'heartbeat',\n          timestamp: new Date().toISOString()\n        })}\\n\\n`);\n      } else {\n        clearInterval(heartbeat);\n      }\n    }, 30000); // 30 second heartbeat\n\n  } catch (error: any) {\n    logger.error('❌ SSE connection failed', {\n      expertId: expertId.substring(0, 8) + '...',\n      error: error.message\n    });\n    \n    res.status(500).json({\n      error: 'Stream connection failed',\n      message: error.message\n    });\n  }\n});\n\n/**\n * Send pending verification codes to expert dashboard\n */\nasync function sendPendingCodes(expertId: string, res: Response) {\n  try {\n    // Get unsent verification codes for this expert (fixed database joins)\n    const pendingCodes = await db\n      .select({\n        id: verificationCodes.id,\n        verificationCode: verificationCodes.verificationCode,\n        codeType: verificationCodes.codeType,\n        platformType: verificationCodes.platformType,\n        codeUsageType: verificationCodes.codeUsageType,\n        extractedAt: verificationCodes.extractedAt,\n        expiresAt: verificationCodes.expiresAt,\n        validationScore: verificationCodes.validationScore\n      })\n      .from(verificationCodes)\n      .innerJoin(\n        smsVerificationSessions,\n        eq(verificationCodes.sessionId, smsVerificationSessions.id)\n      )\n      .where(and(\n        eq(smsVerificationSessions.personaId, expertId),\n        eq(verificationCodes.sentToDashboard, false),\n        eq(verificationCodes.codeStatus, 'active')\n      ))\n      .orderBy(desc(verificationCodes.extractedAt))\n      .limit(10);\n\n    // Send each pending code\n    for (const code of pendingCodes) {\n      const codeEvent = {\n        type: 'verification_code',\n        data: {\n          codeId: code.id,\n          verificationCode: code.verificationCode,\n          codeType: code.codeType,\n          platformType: code.platformType,\n          codeUsageType: code.codeUsageType,\n          confidence: parseFloat(code.validationScore || '0'),\n          extractedAt: code.extractedAt,\n          expiresAt: code.expiresAt,\n          isNew: true\n        },\n        timestamp: new Date().toISOString()\n      };\n\n      res.write(`data: ${JSON.stringify(codeEvent)}\\n\\n`);\n\n      // Mark as sent to dashboard\n      await db\n        .update(verificationCodes)\n        .set({ \n          sentToDashboard: true,\n          dashboardDeliveryAt: new Date()\n        })\n        .where(eq(verificationCodes.id, code.id));\n    }\n\n    if (pendingCodes.length > 0) {\n      logger.info('📤 Sent pending verification codes to dashboard', {\n        expertId: expertId.substring(0, 8) + '...',\n        codeCount: pendingCodes.length\n      });\n    }\n\n  } catch (error: any) {\n    logger.error('❌ Failed to send pending codes', {\n      expertId: expertId.substring(0, 8) + '...',\n      error: error.message\n    });\n  }\n}\n\n/**\n * Real-time verification code delivery function (called from SMS processing)\n * This function is called when a new verification code is extracted\n */\nexport async function deliverVerificationCodeToExpert(\n  expertId: string, \n  verificationCode: {\n    codeId: string;\n    verificationCode: string;\n    codeType: string;\n    platformType: string;\n    extractedAt: Date;\n    expiresAt: Date;\n    isValid: boolean;\n  }\n): Promise<void> {\n  try {\n    const connection = activeConnections.get(expertId);\n    \n    if (connection) {\n      const codeEvent = {\n        type: 'verification_code',\n        data: {\n          ...verificationCode,\n          isNew: true,\n          confidence: 0.9 // Default confidence for real-time delivery\n        },\n        timestamp: new Date().toISOString()\n      };\n\n      connection.write(`data: ${JSON.stringify(codeEvent)}\\n\\n`);\n\n      logger.info('🚀 Real-time verification code delivered to expert', {\n        expertId: expertId.substring(0, 8) + '...',\n        codeType: verificationCode.codeType,\n        platformType: verificationCode.platformType,\n        codePattern: verificationCode.verificationCode.replace(/\\d/g, 'X').replace(/[A-Z]/g, 'Y')\n      });\n    } else {\n      logger.info('📭 Expert not connected - code stored for later retrieval', {\n        expertId: expertId.substring(0, 8) + '...',\n        codeId: verificationCode.codeId.substring(0, 8) + '...'\n      });\n    }\n\n  } catch (error: any) {\n    logger.error('❌ Failed to deliver verification code to expert', {\n      expertId: expertId.substring(0, 8) + '...',\n      error: error.message\n    });\n  }\n}\n\n/**\n * Get verification code history for expert dashboard\n * Route: GET /api/dashboard/verification-codes/:expertId\n */\nrouter.get('/verification-codes/:expertId', authenticateExpert, authorizeExpertAccess, async (req: Request, res: Response) => {\n  const expertId = req.params.expertId;\n  const limit = parseInt(req.query.limit as string) || 20;\n  \n  try {\n    // Get recent verification codes for this expert (fixed database joins)\n    const recentCodes = await db\n      .select({\n        id: verificationCodes.id,\n        verificationCode: verificationCodes.verificationCode,\n        codeType: verificationCodes.codeType,\n        platformType: verificationCodes.platformType,\n        codeUsageType: verificationCodes.codeUsageType,\n        codeStatus: verificationCodes.codeStatus,\n        extractedAt: verificationCodes.extractedAt,\n        expiresAt: verificationCodes.expiresAt,\n        validationScore: verificationCodes.validationScore,\n        viewedByUser: verificationCodes.viewedByUser,\n        usedAt: verificationCodes.usedAt\n      })\n      .from(verificationCodes)\n      .innerJoin(\n        smsVerificationSessions,\n        eq(verificationCodes.sessionId, smsVerificationSessions.id)\n      )\n      .where(eq(smsVerificationSessions.personaId, expertId))\n      .orderBy(desc(verificationCodes.extractedAt))\n      .limit(limit);\n\n    res.json({\n      expertId,\n      codes: recentCodes,\n      total: recentCodes.length,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error: any) {\n    logger.error('❌ Failed to get verification code history', {\n      expertId: expertId.substring(0, 8) + '...',\n      error: error.message\n    });\n\n    res.status(500).json({\n      error: 'Failed to get verification code history',\n      message: error.message\n    });\n  }\n});\n\n/**\n * Mark verification code as viewed/used  \n * Route: POST /api/dashboard/verification-codes/:codeId/mark-used\n * SECURITY: Requires authentication + ownership verification to prevent cross-expert manipulation\n */\nrouter.post('/verification-codes/:codeId/mark-used', authenticateExpert, async (req: Request, res: Response) => {\n  const codeId = req.params.codeId;\n  const authenticatedExpertId = req.expertId;\n  \n  try {\n    // Verify code ownership before allowing modification\n    const codeOwnership = await db\n      .select({ \n        codeId: verificationCodes.id,\n        personaId: smsVerificationSessions.personaId \n      })\n      .from(verificationCodes)\n      .innerJoin(\n        smsVerificationSessions,\n        eq(verificationCodes.sessionId, smsVerificationSessions.id)\n      )\n      .where(eq(verificationCodes.id, codeId))\n      .limit(1);\n\n    if (codeOwnership.length === 0) {\n      return res.status(404).json({\n        error: 'Verification code not found',\n        message: 'Code does not exist or has been deleted'\n      });\n    }\n\n    // Critical security check: Ensure expert can only modify their own codes\n    if (!authenticatedExpertId || codeOwnership[0].personaId !== authenticatedExpertId) {\n      logger.warn('❌ Unauthorized verification code access attempt', {\n        authenticatedExpert: authenticatedExpertId ? authenticatedExpertId.substring(0, 8) + '...' : 'unknown',\n        codeOwner: (codeOwnership[0].personaId ?? 'unknown').substring(0, 8) + '...',\n        codeId: codeId.substring(0, 8) + '...',\n        ip: req.ip\n      });\n      \n      return res.status(403).json({\n        error: 'Access denied',\n        message: 'Cannot modify verification codes belonging to other experts'\n      });\n    }\n\n    // Now safe to update the verification code\n    await db\n      .update(verificationCodes)\n      .set({\n        viewedByUser: true,\n        viewedAt: new Date(),\n        usedAt: new Date(),\n        codeStatus: 'used'\n      })\n      .where(eq(verificationCodes.id, codeId));\n\n    logger.info('✅ Verification code marked as used', {\n      codeId: codeId.substring(0, 8) + '...'\n    });\n\n    res.json({\n      success: true,\n      message: 'Verification code marked as used',\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error: any) {\n    logger.error('❌ Failed to mark verification code as used', {\n      codeId: codeId.substring(0, 8) + '...',\n      error: error.message\n    });\n\n    res.status(500).json({\n      error: 'Failed to mark verification code as used',\n      message: error.message\n    });\n  }\n});\n\nexport { router as dashboardRouter };","size_bytes":11458},"src/server/routes/webhooks.ts":{"content":"import express from 'express';\nimport { Request, Response } from 'express';\nimport { TwilioValidatedRequest, validateTwilioSignature, webhookRateLimit, sanitizeWebhookRequest } from '../middleware/twilioSignatureValidation';\nimport { TwilioSMSClient, WebhookSMSEvent } from '../twilio-client';\nimport { db } from '../db/index';\nimport { smsWebhookEvents, smsMessages, verificationCodes, expertPhoneNumbers } from '../../shared/schema';\nimport { logger } from '../services/logger';\nimport { eq } from 'drizzle-orm';\nimport { z } from 'zod';\n\nconst router = express.Router();\n\n// Lazy initialize Twilio SMS client to avoid environment issues\nlet twilioSMSClient: TwilioSMSClient | null = null;\n\nfunction getTwilioSMSClient(): TwilioSMSClient {\n  if (!twilioSMSClient) {\n    twilioSMSClient = new TwilioSMSClient();\n  }\n  return twilioSMSClient;\n}\n\n/**\n * Validation schema for incoming SMS webhooks\n * Reference: https://www.twilio.com/docs/sms/webhooks\n */\nconst smsWebhookSchema = z.object({\n  MessageSid: z.string().min(1),\n  AccountSid: z.string().min(1),\n  From: z.string().min(1),\n  To: z.string().min(1),\n  Body: z.string().default(''),\n  MessageStatus: z.enum(['queued', 'sending', 'sent', 'failed', 'delivered', 'undelivered', 'receiving', 'received']),\n  MessageDirection: z.enum(['inbound', 'outbound-api', 'outbound-call', 'outbound-reply']).optional(),\n  NumMedia: z.string().optional(),\n  SmsStatus: z.string().optional(),\n  ApiVersion: z.string().optional(),\n  SmsSid: z.string().optional(),\n  SmsMessageSid: z.string().optional(),\n  NumSegments: z.string().optional(),\n  ReferralNumMedia: z.string().optional(),\n  Price: z.string().optional(),\n  PriceUnit: z.string().optional(),\n  ErrorCode: z.string().optional(),\n  ErrorMessage: z.string().optional()\n});\n\n/**\n * Helper function to get safe headers for logging\n */\nfunction getSecureHeaders(req: Request): Record<string, any> {\n  const safeHeaders: Record<string, any> = {};\n  const allowedHeaders = ['content-type', 'user-agent', 'x-twilio-signature'];\n  \n  Object.entries(req.headers).forEach(([key, value]) => {\n    if (allowedHeaders.includes(key.toLowerCase())) {\n      safeHeaders[key] = value;\n    }\n  });\n  \n  return safeHeaders;\n}\n\n/**\n * Log webhook event to audit table\n */\nasync function logWebhookEvent(eventData: {\n  webhookEventType: string;\n  twilioEventSid: string;\n  requestBody: any;\n  requestHeaders: Record<string, any>;\n  sourceIp: string;\n  processingStatus: string;\n  sessionId?: string;\n  processingError?: string;\n}): Promise<{ id: string } | null> {\n  try {\n    const [insertedEvent] = await db.insert(smsWebhookEvents).values({\n      webhookEventType: eventData.webhookEventType,\n      twilioEventSid: eventData.twilioEventSid,\n      requestBody: eventData.requestBody,\n      requestHeaders: eventData.requestHeaders,\n      sourceIp: eventData.sourceIp,\n      processingStatus: eventData.processingStatus,\n      sessionId: eventData.sessionId || null,\n      processingError: eventData.processingError || null\n    }).returning({ id: smsWebhookEvents.id });\n    \n    return insertedEvent || null;\n  } catch (error) {\n    logger.error('❌ Failed to log webhook event', { error: (error as Error).message });\n    return null;\n  }\n}\n\n/**\n * Update webhook event status\n */\nasync function updateWebhookEventStatus(eventId: string, updateData: {\n  processingStatus: string;\n  processingError?: string | null;\n  processingDuration?: number;\n}) {\n  try {\n    await db.update(smsWebhookEvents)\n      .set({\n        processingStatus: updateData.processingStatus,\n        processingError: updateData.processingError,\n        processingDuration: updateData.processingDuration\n      })\n      .where(eq(smsWebhookEvents.id, eventId));\n  } catch (error) {\n    logger.error('❌ Failed to update webhook event status', { \n      eventId, \n      error: (error as Error).message \n    });\n  }\n}\n\n/**\n * Secure SMS webhook endpoint with comprehensive security validation\n * Route: POST /api/webhooks/sms\n */\nrouter.post('/sms', \n  webhookRateLimit,\n  validateTwilioSignature,\n  sanitizeWebhookRequest,\n  async (req: TwilioValidatedRequest, res: Response) => {\n    const webhookStartTime = Date.now();\n    \n    try {\n      logger.info('📨 Received SMS webhook request', {\n        isValidated: req.isValidTwilioRequest,\n        ip: req.ip,\n        url: req.url\n      });\n\n      // Validate webhook payload structure\n      const validationResult = smsWebhookSchema.safeParse(req.body);\n      \n      if (!validationResult.success) {\n        logger.warn('⚠️ Invalid SMS webhook payload structure', {\n          validationErrors: validationResult.error.issues,\n          receivedFields: Object.keys(req.body)\n        });\n        \n        // Log to audit table (without sensitive SMS body)\n        await logWebhookEvent({\n          webhookEventType: 'sms_received',\n          twilioEventSid: req.body.MessageSid || 'unknown',\n          requestBody: {\n            MessageSid: req.body.MessageSid,\n            From: req.body.From?.substring(0, 4) + '***' + req.body.From?.slice(-4),\n            To: req.body.To?.substring(0, 4) + '***' + req.body.To?.slice(-4),\n            MessageStatus: req.body.MessageStatus,\n            bodyLength: req.body.Body?.length || 0\n          },\n          requestHeaders: getSecureHeaders(req),\n          sourceIp: req.ip || 'unknown',\n          processingStatus: 'validation_failed',\n          processingError: JSON.stringify({ validationErrors: validationResult.error.issues })\n        });\n        \n        return res.status(400).json({\n          error: 'Invalid webhook payload',\n          message: 'Webhook data does not match expected format'\n        });\n      }\n\n      const webhookData: WebhookSMSEvent = {\n        MessageSid: validationResult.data.MessageSid,\n        From: validationResult.data.From,\n        To: validationResult.data.To,\n        Body: validationResult.data.Body,\n        MessageStatus: validationResult.data.MessageStatus,\n        EventType: 'sms_received'\n      };\n\n      // Log webhook event to audit table (before processing, without sensitive data)\n      const webhookRecord = await logWebhookEvent({\n        webhookEventType: 'sms_received',\n        twilioEventSid: webhookData.MessageSid,\n        requestBody: {\n          MessageSid: req.body.MessageSid,\n          From: req.body.From?.substring(0, 4) + '***' + req.body.From?.slice(-4),\n          To: req.body.To?.substring(0, 4) + '***' + req.body.To?.slice(-4),\n          MessageStatus: req.body.MessageStatus,\n          bodyLength: req.body.Body?.length || 0\n        },\n        requestHeaders: getSecureHeaders(req),\n        sourceIp: req.ip || 'unknown',\n        processingStatus: 'received'\n      });\n\n      // Process SMS webhook through Twilio SMS client\n      const smsClient = getTwilioSMSClient();\n      const verificationResult = await smsClient.processSMSWebhook(webhookData);\n      \n      // Update webhook event with processing results\n      if (webhookRecord) {\n        await updateWebhookEventStatus(webhookRecord.id, {\n          processingStatus: 'processed',\n          processingError: verificationResult ? null : 'No verification code found',\n          processingDuration: Date.now() - webhookStartTime\n        });\n      }\n\n      logger.info('✅ SMS webhook processed successfully', {\n        messageSid: webhookData.MessageSid,\n        verificationFound: !!verificationResult,\n        processingTime: Date.now() - webhookStartTime\n      });\n\n      res.status(200).json({\n        status: 'success',\n        message: 'SMS webhook processed',\n        verificationCodeFound: !!verificationResult\n      });\n\n    } catch (error) {\n      logger.error('❌ SMS webhook processing failed', {\n        error: (error as Error).message,\n        stack: (error as Error).stack,\n        messageSid: req.body.MessageSid,\n        fromMasked: req.body.From?.substring(0, 4) + '***' + req.body.From?.slice(-4),\n        toMasked: req.body.To?.substring(0, 4) + '***' + req.body.To?.slice(-4),\n        bodyLength: req.body.Body?.length || 0,\n        processingTime: Date.now() - webhookStartTime\n      });\n\n      res.status(500).json({\n        error: 'Webhook processing failed',\n        message: 'Internal server error during SMS processing'\n      });\n    }\n  }\n);\n\n/**\n * Voice webhook endpoint (required for Twilio phone numbers)\n * Route: POST /api/webhooks/voice\n */\nrouter.post('/voice', \n  webhookRateLimit,\n  validateTwilioSignature,\n  async (req: TwilioValidatedRequest, res: Response) => {\n    try {\n      logger.info('📞 Received voice webhook request', {\n        isValidated: req.isValidTwilioRequest,\n        ip: req.ip\n      });\n\n      // Log voice webhook event (without sensitive data)\n      await logWebhookEvent({\n        webhookEventType: 'voice_received',\n        twilioEventSid: req.body.CallSid || 'unknown',\n        requestBody: {\n          CallSid: req.body.CallSid,\n          From: req.body.From?.substring(0, 4) + '***' + req.body.From?.slice(-4),\n          To: req.body.To?.substring(0, 4) + '***' + req.body.To?.slice(-4),\n          CallStatus: req.body.CallStatus\n        },\n        requestHeaders: getSecureHeaders(req),\n        sourceIp: req.ip || 'unknown',\n        processingStatus: 'received'\n      });\n\n      // Return TwiML to reject voice calls (SMS-only number)\n      const twiml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Response>\n  <Say voice=\"alice\">This number is for SMS verification only. Please do not call.</Say>\n  <Hangup/>\n</Response>`;\n\n      res.type('text/xml');\n      res.status(200).send(twiml);\n\n    } catch (error) {\n      logger.error('❌ Voice webhook processing failed', {\n        error: (error as Error).message,\n        callSid: req.body.CallSid,\n        fromMasked: req.body.From?.substring(0, 4) + '***' + req.body.From?.slice(-4),\n        toMasked: req.body.To?.substring(0, 4) + '***' + req.body.To?.slice(-4)\n      });\n\n      res.status(500).json({\n        error: 'Voice webhook processing failed',\n        message: 'Internal server error'\n      });\n    }\n  }\n);\n\n/**\n * Health check endpoint for webhook monitoring\n * Route: GET /api/webhooks/health\n */\nrouter.get('/health', (req: Request, res: Response) => {\n  res.status(200).json({\n    status: 'healthy',\n    service: 'twilio-webhooks',\n    timestamp: new Date().toISOString(),\n    endpoints: {\n      sms: '/api/webhooks/sms',\n      voice: '/api/webhooks/voice'\n    }\n  });\n});\n\nexport { router as webhooksRouter };","size_bytes":10422},"src/server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport { db } from '../db/index';\nimport { expertPersonas } from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\nimport { logger } from '../services/logger';\n\n// Extend Express Request type to include authenticated expert\ndeclare global {\n  namespace Express {\n    interface Request {\n      expertId?: string;\n      expertPersona?: {\n        id: string;\n        expertName: string;\n        expertStatus: string | null;\n      };\n    }\n  }\n}\n\n// JWT secret from environment or default for development\nconst JWT_SECRET = process.env.JWT_SECRET || 'dev-jwt-secret-change-in-production';\n\n/**\n * Generate JWT token for expert authentication\n */\nexport function generateExpertToken(expertId: string, expertName: string): string {\n  return jwt.sign(\n    { \n      expertId, \n      expertName,\n      type: 'expert_access',\n      iat: Math.floor(Date.now() / 1000)\n    },\n    JWT_SECRET,\n    { \n      expiresIn: '24h',\n      issuer: 'geo-expert-authority',\n      audience: 'expert-dashboard'\n    }\n  );\n}\n\n/**\n * Authenticate expert access to dashboard endpoints\n * Validates JWT token and ensures expert exists in database\n */\nexport async function authenticateExpert(req: Request, res: Response, next: NextFunction) {\n  try {\n    // Extract token from Authorization header or query param (for SSE)\n    let token: string | undefined;\n    \n    const authHeader = req.headers.authorization;\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      token = authHeader.substring(7);\n    } else if (req.query.token) {\n      token = req.query.token as string;\n    }\n\n    if (!token) {\n      logger.warn('❌ Dashboard access denied: No authentication token', {\n        ip: req.ip,\n        path: req.path,\n        userAgent: req.get('User-Agent')?.substring(0, 100)\n      });\n      \n      return res.status(401).json({\n        error: 'Authentication required',\n        message: 'Valid JWT token required for dashboard access'\n      });\n    }\n\n    // Verify JWT token\n    const decoded = jwt.verify(token, JWT_SECRET) as jwt.JwtPayload;\n    \n    if (!decoded.expertId || decoded.type !== 'expert_access') {\n      logger.warn('❌ Dashboard access denied: Invalid token format', {\n        ip: req.ip,\n        path: req.path,\n        tokenType: decoded.type || 'unknown'\n      });\n      \n      return res.status(401).json({\n        error: 'Invalid token',\n        message: 'Token does not contain valid expert credentials'\n      });\n    }\n\n    // Verify expert exists in database\n    const expert = await db\n      .select({\n        id: expertPersonas.id,\n        expertName: expertPersonas.expertName,\n        expertStatus: expertPersonas.expertStatus\n      })\n      .from(expertPersonas)\n      .where(eq(expertPersonas.id, decoded.expertId))\n      .limit(1);\n\n    if (expert.length === 0) {\n      logger.warn('❌ Dashboard access denied: Expert not found', {\n        expertId: decoded.expertId.substring(0, 8) + '...',\n        ip: req.ip,\n        path: req.path\n      });\n      \n      return res.status(401).json({\n        error: 'Expert not found',\n        message: 'Expert account does not exist or has been deactivated'\n      });\n    }\n\n    // Attach expert info to request\n    req.expertId = expert[0].id;\n    req.expertPersona = expert[0];\n\n    logger.info('✅ Expert authenticated for dashboard access', {\n      expertId: expert[0].id.substring(0, 8) + '...',\n      expertName: expert[0].expertName,\n      path: req.path\n    });\n\n    next();\n\n  } catch (error) {\n    if (error instanceof jwt.JsonWebTokenError) {\n      logger.warn('❌ Dashboard access denied: Invalid JWT', {\n        error: error.message,\n        ip: req.ip,\n        path: req.path\n      });\n      \n      return res.status(401).json({\n        error: 'Invalid token',\n        message: 'JWT token is malformed or expired'\n      });\n    }\n\n    logger.error('❌ Authentication middleware error', {\n      error: (error as Error).message,\n      stack: (error as Error).stack,\n      ip: req.ip,\n      path: req.path\n    });\n\n    return res.status(500).json({\n      error: 'Authentication error',\n      message: 'Internal error during authentication'\n    });\n  }\n}\n\n/**\n * Authorize expert access to specific expert data\n * Ensures authenticated expert can only access their own data\n */\nexport function authorizeExpertAccess(req: Request, res: Response, next: NextFunction) {\n  const requestedExpertId = req.params.expertId;\n  const authenticatedExpertId = req.expertId;\n\n  if (!authenticatedExpertId) {\n    logger.error('❌ Authorization called without authentication', {\n      path: req.path,\n      ip: req.ip\n    });\n    \n    return res.status(500).json({\n      error: 'Authentication required',\n      message: 'Expert must be authenticated before authorization'\n    });\n  }\n\n  if (requestedExpertId !== authenticatedExpertId) {\n    logger.warn('❌ Unauthorized expert data access attempt', {\n      authenticatedExpert: authenticatedExpertId.substring(0, 8) + '...',\n      requestedExpert: requestedExpertId.substring(0, 8) + '...',\n      path: req.path,\n      ip: req.ip\n    });\n    \n    return res.status(403).json({\n      error: 'Access denied',\n      message: 'Cannot access verification codes for other experts'\n    });\n  }\n\n  next();\n}","size_bytes":5305},"src/server/routes/proxyAssignments.ts":{"content":"import { Router, Request, Response } from 'express';\nimport { db } from '../db/index';\nimport { proxyAssignments, expertPersonas } from '../../shared/schema';\nimport { eq, and } from 'drizzle-orm';\nimport { z } from 'zod';\nimport { logger } from '../services/logger';\nimport crypto from 'crypto';\nimport axios from 'axios';\nimport { HttpProxyAgent } from 'http-proxy-agent';\n\nconst router = Router();\n\n// Manila Proxy Configuration\nconst MANILA_PROXY = {\n  host: '95.135.113.91',\n  port: '46137', \n  username: 'MkkW6ZQHCOcmsFS',\n  password: process.env.MANILA_PROXY_PASSWORD || '',\n  location: 'Manila, Philippines'\n};\n\n// Validation schemas\nconst assignProxySchema = z.object({\n  personaId: z.string().uuid(),\n  assignmentReason: z.string().optional()\n});\n\nconst testProxySchema = z.object({\n  host: z.string(),\n  port: z.string(),\n  username: z.string(),\n  password: z.string()\n});\n\n// Secure encryption utility functions\nfunction encrypt(text: string): string {\n  const algorithm = 'aes-256-gcm';\n  const key = process.env.MASTER_ENCRYPTION_KEY || 'default-key-for-dev-only-change-in-production';\n  const keyBuffer = crypto.scryptSync(key, 'salt', 32);\n  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv(algorithm, keyBuffer, iv);\n  \n  let encrypted = cipher.update(text, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  \n  const authTag = cipher.getAuthTag();\n  \n  return iv.toString('hex') + ':' + authTag.toString('hex') + ':' + encrypted;\n}\n\nfunction decrypt(encryptedText: string): string {\n  try {\n    const algorithm = 'aes-256-gcm';\n    const key = process.env.MASTER_ENCRYPTION_KEY || 'default-key-for-dev-only-change-in-production';\n    const keyBuffer = crypto.scryptSync(key, 'salt', 32);\n    const textParts = encryptedText.split(':');\n    \n    if (textParts.length !== 3) {\n      throw new Error('Invalid encrypted text format');\n    }\n    \n    const iv = Buffer.from(textParts[0], 'hex');\n    const authTag = Buffer.from(textParts[1], 'hex');\n    const encryptedData = textParts[2];\n    \n    const decipher = crypto.createDecipheriv(algorithm, keyBuffer, iv);\n    decipher.setAuthTag(authTag);\n    \n    let decrypted = decipher.update(encryptedData, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    \n    return decrypted;\n  } catch (error) {\n    logger.error('Decryption failed', { error: (error as Error).message });\n    return '';\n  }\n}\n\n// Interface for geo API response\ninterface GeoResponse {\n  status: string;\n  message?: string;\n  country: string;\n  countryCode: string;\n  region: string;\n  regionName: string;\n  city: string;\n  lat: number;\n  lon: number;\n  timezone: string;\n  query: string;\n}\n\n// Secure proxy connection test using axios with HttpProxyAgent\nasync function testProxyConnection(host: string, port: string, username: string, password: string): Promise<{\n  success: boolean;\n  responseTime: number;\n  geoData?: any;\n  error?: string;\n}> {\n  const startTime = Date.now();\n  \n  try {\n    logger.info('Testing proxy connection', { host, port, username: username.substring(0, 4) + '***' });\n    \n    // Create proxy agent with authentication\n    const proxyUrl = `http://${encodeURIComponent(username)}:${encodeURIComponent(password)}@${host}:${port}`;\n    const proxyAgent = new HttpProxyAgent(proxyUrl);\n    \n    // Test proxy connection with geo IP lookup using axios instance with proxy agent\n    const axiosInstance = axios.create({\n      timeout: 25000,\n      httpAgent: proxyAgent,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    } as any);\n    \n    const response = await axiosInstance.get<GeoResponse>('http://ip-api.com/json/', {\n      params: {\n        fields: 'status,message,country,countryCode,region,regionName,city,lat,lon,timezone,query'\n      }\n    });\n    \n    const responseTime = Date.now() - startTime;\n    \n    if (!response.data) {\n      return {\n        success: false,\n        responseTime,\n        error: 'No response data from geo service'\n      };\n    }\n    \n    const geoData = response.data;\n    \n    if (geoData.status === 'success') {\n      const isPhilippines = geoData.countryCode === 'PH';\n      \n      logger.info('Proxy geo verification', {\n        country: geoData.country,\n        region: geoData.regionName,\n        city: geoData.city,\n        isPhilippines,\n        responseTime\n      });\n      \n      return {\n        success: true,\n        responseTime,\n        geoData: {\n          country: geoData.country,\n          countryCode: geoData.countryCode,\n          region: geoData.regionName,\n          city: geoData.city,\n          ip: geoData.query,\n          isPhilippines\n        }\n      };\n    } else {\n      return {\n        success: false,\n        responseTime,\n        error: geoData.message || 'Geo lookup failed'\n      };\n    }\n  } catch (error: unknown) {\n    const responseTime = Date.now() - startTime;\n    let errorMessage = 'Unknown error';\n    \n    if (error instanceof Error) {\n      errorMessage = error.message;\n      \n      // Check for specific error codes\n      const anyError = error as any;\n      if (anyError.code === 'ECONNABORTED') {\n        errorMessage = 'Connection timeout';\n      } else if (anyError.code === 'ECONNREFUSED') {\n        errorMessage = 'Connection refused by proxy';\n      } else if (anyError.response) {\n        errorMessage = `HTTP ${anyError.response.status}: ${anyError.response.statusText}`;\n      } else if (anyError.request && !anyError.response) {\n        errorMessage = 'No response received from proxy';\n      }\n    }\n    \n    logger.error('Proxy test failed', { \n      error: errorMessage, \n      responseTime,\n      host,\n      port\n    });\n    \n    return {\n      success: false,\n      responseTime,\n      error: errorMessage\n    };\n  }\n}\n\n// GET /api/proxy-assignments - Get all proxy assignments\nrouter.get('/', async (req: Request, res: Response) => {\n  try {\n    const assignments = await db\n      .select({\n        id: proxyAssignments.id,\n        personaId: proxyAssignments.personaId,\n        assignmentStatus: proxyAssignments.assignmentStatus,\n        proxyLocation: proxyAssignments.proxyLocation,\n        proxyStatus: proxyAssignments.proxyStatus,\n        isPhilippinesVerified: proxyAssignments.isPhilippinesVerified,\n        detectedCountry: proxyAssignments.detectedCountry,\n        detectedCity: proxyAssignments.detectedCity,\n        averageResponseTime: proxyAssignments.averageResponseTime,\n        connectionSuccessRate: proxyAssignments.connectionSuccessRate,\n        lastHealthCheck: proxyAssignments.lastHealthCheck,\n        healthCheckStatus: proxyAssignments.healthCheckStatus,\n        createdAt: proxyAssignments.createdAt,\n        updatedAt: proxyAssignments.updatedAt,\n        // Join expert data\n        expertName: expertPersonas.expertName\n      })\n      .from(proxyAssignments)\n      .leftJoin(expertPersonas, eq(proxyAssignments.personaId, expertPersonas.id));\n\n    logger.info(`Retrieved ${assignments.length} proxy assignments`);\n\n    res.json({\n      success: true,\n      data: assignments\n    });\n  } catch (error) {\n    logger.error('Failed to fetch proxy assignments', { error: (error as Error).message });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch proxy assignments'\n    });\n  }\n});\n\n// GET /api/proxy-assignments/:personaId - Get proxy assignment for a specific expert\nrouter.get('/expert/:personaId', async (req: Request, res: Response) => {\n  try {\n    const { personaId } = req.params;\n\n    const assignment = await db\n      .select()\n      .from(proxyAssignments)\n      .where(eq(proxyAssignments.personaId, personaId))\n      .limit(1);\n\n    if (assignment.length === 0) {\n      return res.json({\n        success: true,\n        data: null,\n        message: 'No proxy assigned to this expert'\n      });\n    }\n\n    const assignmentData = assignment[0];\n    \n    // Return assignment without sensitive credentials\n    const safeAssignment = {\n      id: assignmentData.id,\n      personaId: assignmentData.personaId,\n      assignmentStatus: assignmentData.assignmentStatus,\n      proxyLocation: assignmentData.proxyLocation,\n      proxyStatus: assignmentData.proxyStatus,\n      isPhilippinesVerified: assignmentData.isPhilippinesVerified,\n      detectedCountry: assignmentData.detectedCountry,\n      detectedCity: assignmentData.detectedCity,\n      detectedRegion: assignmentData.detectedRegion,\n      averageResponseTime: assignmentData.averageResponseTime,\n      connectionSuccessRate: assignmentData.connectionSuccessRate,\n      lastHealthCheck: assignmentData.lastHealthCheck,\n      healthCheckStatus: assignmentData.healthCheckStatus,\n      consecutiveFailures: assignmentData.consecutiveFailures,\n      createdAt: assignmentData.createdAt,\n      updatedAt: assignmentData.updatedAt\n    };\n\n    res.json({\n      success: true,\n      data: safeAssignment\n    });\n  } catch (error) {\n    logger.error('Failed to fetch expert proxy assignment', { \n      personaId: req.params.personaId,\n      error: (error as Error).message \n    });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch proxy assignment'\n    });\n  }\n});\n\n// POST /api/proxy-assignments/assign - Assign Manila proxy to expert\nrouter.post('/assign', async (req: Request, res: Response) => {\n  try {\n    const validatedData = assignProxySchema.parse(req.body);\n    const { personaId, assignmentReason = 'Manila proxy assignment for Philippines authority building' } = validatedData;\n\n    // Check if expert exists\n    const expert = await db\n      .select()\n      .from(expertPersonas)\n      .where(eq(expertPersonas.id, personaId))\n      .limit(1);\n\n    if (expert.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Expert not found'\n      });\n    }\n\n    // Check if proxy already assigned\n    const existing = await db\n      .select()\n      .from(proxyAssignments)\n      .where(eq(proxyAssignments.personaId, personaId))\n      .limit(1);\n\n    if (existing.length > 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Expert already has a proxy assignment'\n      });\n    }\n\n    // Validate Manila proxy credentials\n    if (!MANILA_PROXY.password) {\n      return res.status(500).json({\n        success: false,\n        error: 'Manila proxy password not configured in environment'\n      });\n    }\n\n    // Create proxy assignment with \"testing\" status\n    const [newAssignment] = await db\n      .insert(proxyAssignments)\n      .values({\n        personaId,\n        proxyCheapId: 'manila-static-01',\n        proxyProvider: 'proxy-cheap',\n        proxyType: 'residential',\n        proxyLocation: MANILA_PROXY.location,\n        assignmentStatus: 'testing',\n        proxyStatus: 'inactive',\n        proxyHostEncrypted: encrypt(MANILA_PROXY.host),\n        proxyPortEncrypted: encrypt(MANILA_PROXY.port),\n        proxyUsernameEncrypted: encrypt(MANILA_PROXY.username),\n        proxyPasswordEncrypted: encrypt(MANILA_PROXY.password),\n        assignmentReason,\n        encryptionKeyId: 'master-key-001',\n        assignedAt: new Date()\n      })\n      .returning();\n\n    logger.info('Created proxy assignment for expert', {\n      expertId: personaId,\n      expertName: expert[0].expertName,\n      assignmentId: newAssignment.id\n    });\n\n    // Start asynchronous proxy testing\n    setImmediate(async () => {\n      try {\n        logger.info('Starting proxy health test', { assignmentId: newAssignment.id });\n        \n        const testResult = await testProxyConnection(\n          MANILA_PROXY.host,\n          MANILA_PROXY.port,\n          MANILA_PROXY.username,\n          MANILA_PROXY.password\n        );\n\n        // Update assignment based on test result AND location verification\n        if (testResult.success && testResult.geoData?.isPhilippines === true) {\n          await db\n            .update(proxyAssignments)\n            .set({\n              assignmentStatus: 'active',\n              proxyStatus: 'active',\n              healthCheckStatus: 'healthy',\n              lastHealthCheck: new Date(),\n              detectedCountry: testResult.geoData.countryCode,\n              detectedCity: testResult.geoData.city,\n              detectedRegion: testResult.geoData.region,\n              isPhilippinesVerified: true,\n              averageResponseTime: testResult.responseTime,\n              connectionSuccessRate: '100.00',\n              consecutiveFailures: 0,\n              activatedAt: new Date(),\n              updatedAt: new Date()\n            })\n            .where(eq(proxyAssignments.id, newAssignment.id));\n\n          logger.info('Proxy test successful and Philippines location verified - assignment activated', {\n            assignmentId: newAssignment.id,\n            responseTime: testResult.responseTime,\n            location: `${testResult.geoData.city}, ${testResult.geoData.country}`,\n            isPhilippines: testResult.geoData.isPhilippines\n          });\n        } else {\n          // Determine failure reason\n          let failureReason = 'Connection test failed';\n          if (testResult.success && testResult.geoData?.isPhilippines === false) {\n            failureReason = `Location verification failed: detected ${testResult.geoData.country} instead of Philippines`;\n          } else if (testResult.error) {\n            failureReason = testResult.error;\n          }\n          \n          await db\n            .update(proxyAssignments)\n            .set({\n              assignmentStatus: 'failed',\n              proxyStatus: 'failed',\n              healthCheckStatus: 'failed',\n              lastHealthCheck: new Date(),\n              detectedCountry: testResult.geoData?.countryCode || null,\n              detectedCity: testResult.geoData?.city || null,\n              detectedRegion: testResult.geoData?.region || null,\n              isPhilippinesVerified: testResult.geoData?.isPhilippines || false,\n              statusChangeReason: failureReason,\n              consecutiveFailures: 1,\n              updatedAt: new Date()\n            })\n            .where(eq(proxyAssignments.id, newAssignment.id));\n\n          logger.error('Proxy assignment failed', {\n            assignmentId: newAssignment.id,\n            reason: failureReason,\n            responseTime: testResult.responseTime,\n            detectedLocation: testResult.geoData ? `${testResult.geoData.city}, ${testResult.geoData.country}` : 'unknown',\n            isPhilippines: testResult.geoData?.isPhilippines\n          });\n        }\n      } catch (testError) {\n        logger.error('Proxy test process failed', {\n          assignmentId: newAssignment.id,\n          error: (testError as Error).message\n        });\n        \n        await db\n          .update(proxyAssignments)\n          .set({\n            assignmentStatus: 'failed',\n            proxyStatus: 'failed',\n            healthCheckStatus: 'failed',\n            lastHealthCheck: new Date(),\n            statusChangeReason: `Test process failed: ${(testError as Error).message}`,\n            consecutiveFailures: 1,\n            updatedAt: new Date()\n          })\n          .where(eq(proxyAssignments.id, newAssignment.id));\n      }\n    });\n\n    res.status(201).json({\n      success: true,\n      data: {\n        id: newAssignment.id,\n        personaId: newAssignment.personaId,\n        assignmentStatus: newAssignment.assignmentStatus,\n        proxyLocation: newAssignment.proxyLocation,\n        proxyStatus: newAssignment.proxyStatus,\n        assignedAt: newAssignment.assignedAt\n      },\n      message: 'Proxy assignment created and testing in progress'\n    });\n\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid request data',\n        details: error.errors\n      });\n    }\n\n    logger.error('Failed to assign proxy', { error: (error as Error).message, stack: (error as Error).stack });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to assign proxy'\n    });\n  }\n});\n\n// POST /api/proxy-assignments/:id/test - Test proxy connection\nrouter.post('/:id/test', async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n\n    const assignment = await db\n      .select()\n      .from(proxyAssignments)\n      .where(eq(proxyAssignments.id, id))\n      .limit(1);\n\n    if (assignment.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Proxy assignment not found'\n      });\n    }\n\n    const assignmentData = assignment[0];\n    \n    // Decrypt credentials for testing\n    const host = decrypt(assignmentData.proxyHostEncrypted || '');\n    const port = decrypt(assignmentData.proxyPortEncrypted || '');\n    const username = decrypt(assignmentData.proxyUsernameEncrypted || '');\n    const password = decrypt(assignmentData.proxyPasswordEncrypted || '');\n\n    if (!host || !port || !username || !password) {\n      return res.status(500).json({\n        success: false,\n        error: 'Failed to decrypt proxy credentials'\n      });\n    }\n\n    // Update status to testing\n    await db\n      .update(proxyAssignments)\n      .set({\n        assignmentStatus: 'testing',\n        lastHealthCheck: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(proxyAssignments.id, id));\n\n    // Perform test\n    const testResult = await testProxyConnection(host, port, username, password);\n\n    // Update assignment based on test result\n    if (testResult.success) {\n      await db\n        .update(proxyAssignments)\n        .set({\n          assignmentStatus: 'active',\n          proxyStatus: 'active',\n          healthCheckStatus: 'healthy',\n          detectedCountry: testResult.geoData?.countryCode || null,\n          detectedCity: testResult.geoData?.city || null,\n          detectedRegion: testResult.geoData?.region || null,\n          isPhilippinesVerified: testResult.geoData?.isPhilippines || false,\n          averageResponseTime: testResult.responseTime,\n          connectionSuccessRate: '100.00',\n          consecutiveFailures: 0,\n          lastHealthCheck: new Date(),\n          updatedAt: new Date()\n        })\n        .where(eq(proxyAssignments.id, id));\n    } else {\n      await db\n        .update(proxyAssignments)\n        .set({\n          assignmentStatus: 'failed',\n          proxyStatus: 'failed',\n          healthCheckStatus: 'failed',\n          statusChangeReason: testResult.error || 'Connection test failed',\n          consecutiveFailures: (assignmentData.consecutiveFailures || 0) + 1,\n          lastHealthCheck: new Date(),\n          updatedAt: new Date()\n        })\n        .where(eq(proxyAssignments.id, id));\n    }\n\n    logger.info('Proxy test completed', {\n      assignmentId: id,\n      success: testResult.success,\n      responseTime: testResult.responseTime,\n      error: testResult.error\n    });\n\n    res.json({\n      success: true,\n      data: {\n        testSuccess: testResult.success,\n        responseTime: testResult.responseTime,\n        geoData: testResult.geoData,\n        error: testResult.error\n      }\n    });\n\n  } catch (error) {\n    logger.error('Failed to test proxy', { assignmentId: req.params.id, error: (error as Error).message });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to test proxy connection'\n    });\n  }\n});\n\n// DELETE /api/proxy-assignments/:id - Remove proxy assignment\nrouter.delete('/:id', async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n\n    const assignment = await db\n      .select()\n      .from(proxyAssignments)\n      .where(eq(proxyAssignments.id, id))\n      .limit(1);\n\n    if (assignment.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Proxy assignment not found'\n      });\n    }\n\n    await db\n      .delete(proxyAssignments)\n      .where(eq(proxyAssignments.id, id));\n\n    logger.info('Deleted proxy assignment', {\n      assignmentId: id,\n      personaId: assignment[0].personaId\n    });\n\n    res.json({\n      success: true,\n      message: 'Proxy assignment removed successfully'\n    });\n\n  } catch (error) {\n    logger.error('Failed to delete proxy assignment', { \n      assignmentId: req.params.id,\n      error: (error as Error).message \n    });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to remove proxy assignment'\n    });\n  }\n});\n\n// POST /api/proxy-assignments/health-check - Run health check on all active proxies\nrouter.post('/health-check', async (req: Request, res: Response) => {\n  try {\n    const activeAssignments = await db\n      .select()\n      .from(proxyAssignments)\n      .where(eq(proxyAssignments.proxyStatus, 'active'));\n\n    logger.info(`Starting health check for ${activeAssignments.length} active proxy assignments`);\n\n    const results: any[] = [];\n\n    for (const assignment of activeAssignments) {\n      try {\n        // Decrypt credentials\n        const host = decrypt(assignment.proxyHostEncrypted || '');\n        const port = decrypt(assignment.proxyPortEncrypted || '');\n        const username = decrypt(assignment.proxyUsernameEncrypted || '');\n        const password = decrypt(assignment.proxyPasswordEncrypted || '');\n\n        if (!host || !port || !username || !password) {\n          results.push({\n            assignmentId: assignment.id,\n            success: false,\n            error: 'Failed to decrypt credentials'\n          });\n          continue;\n        }\n\n        const testResult = await testProxyConnection(host, port, username, password);\n\n        // Update assignment based on result\n        if (testResult.success) {\n          await db\n            .update(proxyAssignments)\n            .set({\n              proxyStatus: 'active',\n              healthCheckStatus: 'healthy',\n              averageResponseTime: testResult.responseTime,\n              consecutiveFailures: 0,\n              lastHealthCheck: new Date(),\n              updatedAt: new Date()\n            })\n            .where(eq(proxyAssignments.id, assignment.id));\n        } else {\n          const newFailureCount = (assignment.consecutiveFailures || 0) + 1;\n          await db\n            .update(proxyAssignments)\n            .set({\n              proxyStatus: newFailureCount >= 3 ? 'failed' : 'active',\n              healthCheckStatus: 'failed',\n              consecutiveFailures: newFailureCount,\n              statusChangeReason: testResult.error || 'Health check failed',\n              lastHealthCheck: new Date(),\n              updatedAt: new Date()\n            })\n            .where(eq(proxyAssignments.id, assignment.id));\n        }\n\n        results.push({\n          assignmentId: assignment.id,\n          success: testResult.success,\n          responseTime: testResult.responseTime,\n          error: testResult.error\n        });\n\n      } catch (error) {\n        logger.error('Health check failed for assignment', {\n          assignmentId: assignment.id,\n          error: (error as Error).message\n        });\n        \n        results.push({\n          assignmentId: assignment.id,\n          success: false,\n          error: (error as Error).message\n        });\n      }\n    }\n\n    const successCount = results.filter(r => r.success).length;\n    const failureCount = results.length - successCount;\n\n    logger.info('Health check completed', {\n      total: results.length,\n      successful: successCount,\n      failed: failureCount\n    });\n\n    res.json({\n      success: true,\n      data: {\n        totalChecked: results.length,\n        successful: successCount,\n        failed: failureCount,\n        results\n      },\n      message: `Health check completed: ${successCount}/${results.length} proxies healthy`\n    });\n\n  } catch (error) {\n    logger.error('Failed to run health check', { error: (error as Error).message });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to run proxy health check'\n    });\n  }\n});\n\nexport default router;","size_bytes":23845},"src/client/src/components/ProxyAssignmentButton.tsx":{"content":"import React, { useState } from 'react';\nimport { ExpertPersona } from '../types/expert';\nimport { ProxySetupDocumentation } from './ProxySetupDocumentation';\n\ninterface ProxyStatus {\n  id: string;\n  personaId: string;\n  assignmentStatus: 'unassigned' | 'testing' | 'active' | 'failed';\n  proxyLocation: string;\n  proxyStatus: string;\n  isPhilippinesVerified?: boolean;\n  detectedCity?: string;\n  detectedCountry?: string;\n  averageResponseTime?: number;\n  connectionSuccessRate?: string;\n  lastHealthCheck?: string;\n  healthCheckStatus?: string;\n}\n\ninterface ProxyAssignmentButtonProps {\n  expert: ExpertPersona;\n  onStatusChange?: (expertId: string, status: ProxyStatus | null) => void;\n}\n\nexport function ProxyAssignmentButton({ expert, onStatusChange }: ProxyAssignmentButtonProps) {\n  const [proxyStatus, setProxyStatus] = useState<ProxyStatus | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showDocumentation, setShowDocumentation] = useState(false);\n\n  // Load proxy status on component mount\n  React.useEffect(() => {\n    loadProxyStatus();\n  }, [expert.id]);\n\n  const loadProxyStatus = async () => {\n    try {\n      const response = await fetch(`/api/proxy-assignments/expert/${expert.id}`);\n      const data = await response.json();\n      \n      if (data.success) {\n        setProxyStatus(data.data);\n        onStatusChange?.(expert.id, data.data);\n      } else {\n        setProxyStatus(null);\n        onStatusChange?.(expert.id, null);\n      }\n    } catch (err) {\n      console.error('Failed to load proxy status:', err);\n      setError('Failed to load proxy status');\n    }\n  };\n\n  const assignProxy = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('/api/proxy-assignments/assign', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          personaId: expert.id,\n          assignmentReason: `Manila proxy assignment for ${expert.expertName} - Philippines real estate authority building`\n        }),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        const newStatus: ProxyStatus = {\n          id: data.data.id,\n          personaId: data.data.personaId,\n          assignmentStatus: 'testing',\n          proxyLocation: data.data.proxyLocation,\n          proxyStatus: data.data.proxyStatus\n        };\n        \n        setProxyStatus(newStatus);\n        onStatusChange?.(expert.id, newStatus);\n        \n        // Poll for status updates during testing\n        pollStatusUpdates();\n      } else {\n        setError(data.error || 'Failed to assign proxy');\n      }\n    } catch (err) {\n      setError('Network error occurred');\n      console.error('Proxy assignment error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const pollStatusUpdates = async () => {\n    const maxPolls = 12; // 60 seconds total (5s * 12)\n    let pollCount = 0;\n\n    const poll = async () => {\n      if (pollCount >= maxPolls) return;\n      pollCount++;\n\n      try {\n        // Load current status and check if we should continue polling\n        const response = await fetch(`/api/proxy-assignments/expert/${expert.id}`);\n        const data = await response.json();\n        \n        if (data.success && data.data) {\n          setProxyStatus(data.data);\n          onStatusChange?.(expert.id, data.data);\n          \n          // Continue polling if still in testing status\n          if (data.data.assignmentStatus === 'testing') {\n            setTimeout(poll, 5000);\n          }\n        } else {\n          // No assignment found or error - stop polling\n          setProxyStatus(null);\n          onStatusChange?.(expert.id, null);\n        }\n      } catch (err) {\n        console.error('Status polling error:', err);\n        // Don't continue polling on errors\n      }\n    };\n\n    setTimeout(poll, 3000); // Start polling after 3 seconds\n  };\n\n  const testProxy = async () => {\n    if (!proxyStatus) return;\n    \n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`/api/proxy-assignments/${proxyStatus.id}/test`, {\n        method: 'POST',\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        // Reload status to get updated information\n        await loadProxyStatus();\n      } else {\n        setError(data.error || 'Proxy test failed');\n      }\n    } catch (err) {\n      setError('Test request failed');\n      console.error('Proxy test error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const removeProxy = async () => {\n    if (!proxyStatus) return;\n    \n    if (!window.confirm(`Remove proxy assignment for ${expert.expertName}?`)) {\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`/api/proxy-assignments/${proxyStatus.id}`, {\n        method: 'DELETE',\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        setProxyStatus(null);\n        onStatusChange?.(expert.id, null);\n      } else {\n        setError(data.error || 'Failed to remove proxy');\n      }\n    } catch (err) {\n      setError('Network error occurred');\n      console.error('Proxy removal error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'unassigned': return 'text-gray-500 bg-gray-100';\n      case 'testing': return 'text-yellow-700 bg-yellow-100';\n      case 'active': return 'text-green-700 bg-green-100';\n      case 'failed': return 'text-red-700 bg-red-100';\n      default: return 'text-gray-500 bg-gray-100';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'unassigned': \n        return <div className=\"w-2 h-2 rounded-full bg-gray-400\"></div>;\n      case 'testing': \n        return <div className=\"w-2 h-2 rounded-full bg-yellow-400 animate-pulse\"></div>;\n      case 'active': \n        return <div className=\"w-2 h-2 rounded-full bg-green-400\"></div>;\n      case 'failed': \n        return <div className=\"w-2 h-2 rounded-full bg-red-400\"></div>;\n      default: \n        return <div className=\"w-2 h-2 rounded-full bg-gray-400\"></div>;\n    }\n  };\n\n  if (!proxyStatus) {\n    return (\n      <div className=\"space-y-2\">\n        <button\n          onClick={assignProxy}\n          disabled={loading}\n          className=\"w-full px-3 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n        >\n          {loading ? (\n            <>\n              <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n              Assigning Proxy...\n            </>\n          ) : (\n            <>\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n              </svg>\n              Assign Manila Proxy\n            </>\n          )}\n        </button>\n        \n        {error && (\n          <p className=\"text-sm text-red-600 mt-1\">{error}</p>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      {/* Proxy Status Display */}\n      <div className=\"bg-white border rounded-lg p-3 space-y-2\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            {getStatusIcon(proxyStatus.assignmentStatus)}\n            <span className={`text-xs px-2 py-1 rounded-full font-medium ${getStatusColor(proxyStatus.assignmentStatus)}`}>\n              {proxyStatus.assignmentStatus.toUpperCase()}\n            </span>\n          </div>\n          <span className=\"text-xs text-gray-500\">{proxyStatus.proxyLocation}</span>\n        </div>\n\n        {/* Connection Details */}\n        {proxyStatus.assignmentStatus === 'active' && (\n          <div className=\"grid grid-cols-2 gap-2 pt-2 border-t\">\n            {proxyStatus.isPhilippinesVerified && (\n              <div className=\"flex items-center gap-1\">\n                <svg className=\"w-3 h-3 text-green-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                </svg>\n                <span className=\"text-xs text-green-700\">Philippines Verified</span>\n              </div>\n            )}\n            \n            {proxyStatus.detectedCity && (\n              <div className=\"text-xs text-gray-600\">\n                📍 {proxyStatus.detectedCity}\n              </div>\n            )}\n            \n            {proxyStatus.averageResponseTime && (\n              <div className=\"text-xs text-gray-600\">\n                ⏱️ {proxyStatus.averageResponseTime}ms\n              </div>\n            )}\n            \n            {proxyStatus.connectionSuccessRate && (\n              <div className=\"text-xs text-gray-600\">\n                📊 {proxyStatus.connectionSuccessRate}% success\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Success Display with Setup Guide */}\n        {proxyStatus.assignmentStatus === 'active' && (\n          <div className=\"text-xs text-green-600 bg-green-50 p-2 rounded border border-green-100\">\n            <div className=\"flex items-center justify-between\">\n              <span>Manila proxy active and verified</span>\n              <button\n                onClick={() => setShowDocumentation(true)}\n                className=\"text-blue-600 hover:text-blue-800 font-medium\"\n              >\n                Setup Guide →\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Error Display */}\n        {proxyStatus.assignmentStatus === 'failed' && (\n          <div className=\"text-xs text-red-600 bg-red-50 p-2 rounded border border-red-100\">\n            Proxy connection failed. Check network connectivity.\n          </div>\n        )}\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex gap-2\">\n        {proxyStatus.assignmentStatus !== 'testing' && (\n          <button\n            onClick={testProxy}\n            disabled={loading}\n            className=\"flex-1 px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-1\"\n          >\n            {loading ? (\n              <div className=\"w-3 h-3 border-2 border-gray-400 border-t-transparent rounded-full animate-spin\"></div>\n            ) : (\n              <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            )}\n            Test\n          </button>\n        )}\n        \n        <button\n          onClick={removeProxy}\n          disabled={loading}\n          className=\"flex-1 px-3 py-2 text-sm text-red-600 border border-red-300 rounded-md hover:bg-red-50 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-1\"\n        >\n          <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n          </svg>\n          Remove\n        </button>\n      </div>\n\n      {error && (\n        <p className=\"text-sm text-red-600\">{error}</p>\n      )}\n\n      {/* Setup Documentation Modal */}\n      {showDocumentation && proxyStatus?.assignmentStatus === 'active' && (\n        <ProxySetupDocumentation\n          proxyConfig={{\n            host: '95.135.113.91',\n            port: '46137',\n            location: 'Manila, Philippines',\n            type: 'Residential'\n          }}\n          onClose={() => setShowDocumentation(false)}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":12219},"src/client/src/components/ProxySetupDocumentation.tsx":{"content":"import React, { useState } from 'react';\n\ninterface ProxyConfigInfo {\n  host: string;\n  port: string;\n  location: string;\n  type: string;\n}\n\ninterface ProxySetupDocumentationProps {\n  proxyConfig: ProxyConfigInfo;\n  onClose: () => void;\n}\n\nexport function ProxySetupDocumentation({ proxyConfig, onClose }: ProxySetupDocumentationProps) {\n  const [activeTab, setActiveTab] = useState<'browser' | 'platforms' | 'verification'>('browser');\n\n  const tabs = [\n    { id: 'browser', label: 'Browser Setup', icon: '🌐' },\n    { id: 'platforms', label: 'Platform Config', icon: '📱' },\n    { id: 'verification', label: 'Verification', icon: '✅' }\n  ];\n\n  const BrowserSetupContent = () => (\n    <div className=\"space-y-6\">\n      {/* Chrome Setup */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <div className=\"w-8 h-8 bg-gradient-to-r from-red-400 to-yellow-400 rounded-full flex items-center justify-center text-white text-sm font-bold\">C</div>\n          <h3 className=\"text-lg font-semibold\">Chrome Browser Setup</h3>\n        </div>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <h4 className=\"font-medium text-gray-900 mb-2\">Method 1: Chrome Settings (Recommended)</h4>\n            <ol className=\"list-decimal list-inside space-y-2 text-sm text-gray-700\">\n              <li>Open Chrome and go to <code className=\"bg-gray-100 px-2 py-1 rounded\">chrome://settings/</code></li>\n              <li>Click \"Advanced\" → \"System\"</li>\n              <li>Click \"Open your computer's proxy settings\"</li>\n              <li>Set Manual proxy configuration:\n                <div className=\"mt-2 bg-gray-50 p-3 rounded border\">\n                  <div className=\"font-mono text-sm\">\n                    <div><strong>HTTP Proxy:</strong> {proxyConfig.host}:{proxyConfig.port}</div>\n                    <div><strong>HTTPS Proxy:</strong> {proxyConfig.host}:{proxyConfig.port}</div>\n                    <div><strong>SOCKS Proxy:</strong> {proxyConfig.host}:{proxyConfig.port}</div>\n                  </div>\n                </div>\n              </li>\n              <li>Save settings and restart Chrome</li>\n            </ol>\n          </div>\n\n          <div>\n            <h4 className=\"font-medium text-gray-900 mb-2\">Method 2: Chrome Extension</h4>\n            <ol className=\"list-decimal list-inside space-y-2 text-sm text-gray-700\">\n              <li>Install \"Proxy SwitchyOmega\" from Chrome Web Store</li>\n              <li>Create new profile: \"Manila Proxy\"</li>\n              <li>Configure proxy server:\n                <div className=\"mt-2 bg-gray-50 p-3 rounded border\">\n                  <div className=\"font-mono text-sm\">\n                    <div><strong>Protocol:</strong> HTTP</div>\n                    <div><strong>Server:</strong> {proxyConfig.host}</div>\n                    <div><strong>Port:</strong> {proxyConfig.port}</div>\n                  </div>\n                </div>\n              </li>\n              <li>Apply changes and activate profile</li>\n            </ol>\n          </div>\n        </div>\n      </div>\n\n      {/* Firefox Setup */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <div className=\"w-8 h-8 bg-gradient-to-r from-orange-400 to-red-500 rounded-full flex items-center justify-center text-white text-sm font-bold\">F</div>\n          <h3 className=\"text-lg font-semibold\">Firefox Browser Setup</h3>\n        </div>\n        \n        <ol className=\"list-decimal list-inside space-y-2 text-sm text-gray-700\">\n          <li>Open Firefox and go to <code className=\"bg-gray-100 px-2 py-1 rounded\">about:preferences</code></li>\n          <li>Scroll down to \"Network Settings\" → Click \"Settings...\"</li>\n          <li>Select \"Manual proxy configuration\"</li>\n          <li>Enter proxy details:\n            <div className=\"mt-2 bg-gray-50 p-3 rounded border\">\n              <div className=\"font-mono text-sm\">\n                <div><strong>HTTP Proxy:</strong> {proxyConfig.host} Port: {proxyConfig.port}</div>\n                <div><strong>SSL Proxy:</strong> {proxyConfig.host} Port: {proxyConfig.port}</div>\n                <div>☑️ Use this proxy server for all protocols</div>\n              </div>\n            </div>\n          </li>\n          <li>Click \"OK\" and restart Firefox</li>\n        </ol>\n      </div>\n\n      {/* Important Notes */}\n      <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4\">\n        <h4 className=\"font-medium text-amber-800 mb-2\">⚠️ Important Security Notes</h4>\n        <ul className=\"list-disc list-inside text-sm text-amber-700 space-y-1\">\n          <li>Always use incognito/private browsing when creating platform accounts</li>\n          <li>Clear browser cache and cookies before each session</li>\n          <li>Use different browser profiles for each expert persona</li>\n          <li>Never access personal accounts while proxy is active</li>\n        </ul>\n      </div>\n    </div>\n  );\n\n  const PlatformConfigContent = () => (\n    <div className=\"space-y-6\">\n      {/* Medium Setup */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <div className=\"w-8 h-8 bg-black rounded-full flex items-center justify-center text-white text-sm font-bold\">M</div>\n          <h3 className=\"text-lg font-semibold\">Medium Account Creation</h3>\n        </div>\n        \n        <div className=\"space-y-4\">\n          <div className=\"bg-green-50 border border-green-200 rounded p-3\">\n            <p className=\"text-sm text-green-800\">✅ <strong>Philippines proxy verified</strong> - Safe to create Medium account</p>\n          </div>\n          \n          <ol className=\"list-decimal list-inside space-y-2 text-sm text-gray-700\">\n            <li>Navigate to <code className=\"bg-gray-100 px-2 py-1 rounded\">medium.com</code> in proxy-configured browser</li>\n            <li>Click \"Sign up\" and use Philippines-based email address</li>\n            <li>Complete profile with Philippines real estate expertise:\n              <ul className=\"list-disc list-inside ml-4 mt-2 space-y-1\">\n                <li>Professional headshot photo</li>\n                <li>Manila/Philippines location in bio</li>\n                <li>Real estate expertise focus areas</li>\n                <li>Local market experience highlights</li>\n              </ul>\n            </li>\n            <li>Write initial article about Philippines real estate market</li>\n            <li>Engage with local real estate content to build authority</li>\n          </ol>\n        </div>\n      </div>\n\n      {/* Reddit Setup */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <div className=\"w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white text-sm font-bold\">R</div>\n          <h3 className=\"text-lg font-semibold\">Reddit Account Creation</h3>\n        </div>\n        \n        <ol className=\"list-decimal list-inside space-y-2 text-sm text-gray-700\">\n          <li>Go to <code className=\"bg-gray-100 px-2 py-1 rounded\">reddit.com</code> with proxy active</li>\n          <li>Create account with Philippines-relevant username</li>\n          <li>Join Philippines real estate subreddits:\n            <ul className=\"list-disc list-inside ml-4 mt-2 space-y-1\">\n              <li><code className=\"bg-gray-100 px-2 py-1 rounded\">r/Philippines</code></li>\n              <li><code className=\"bg-gray-100 px-2 py-1 rounded\">r/phinvest</code></li>\n              <li><code className=\"bg-gray-100 px-2 py-1 rounded\">r/phclassifieds</code></li>\n              <li><code className=\"bg-gray-100 px-2 py-1 rounded\">r/RealEstate</code></li>\n            </ul>\n          </li>\n          <li>Build karma by commenting helpfully on Philippines real estate topics</li>\n          <li>Create valuable posts about Manila property market insights</li>\n        </ol>\n      </div>\n\n      {/* Quora Setup */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <div className=\"w-8 h-8 bg-red-600 rounded-full flex items-center justify-center text-white text-sm font-bold\">Q</div>\n          <h3 className=\"text-lg font-semibold\">Quora Account Creation</h3>\n        </div>\n        \n        <ol className=\"list-decimal list-inside space-y-2 text-sm text-gray-700\">\n          <li>Visit <code className=\"bg-gray-100 px-2 py-1 rounded\">quora.com</code> through Manila proxy</li>\n          <li>Sign up with professional Philippines-based email</li>\n          <li>Complete detailed profile:\n            <ul className=\"list-disc list-inside ml-4 mt-2 space-y-1\">\n              <li>Add Philippines real estate credentials</li>\n              <li>List specific Manila market expertise</li>\n              <li>Include professional experience and education</li>\n            </ul>\n          </li>\n          <li>Follow Philippines real estate topics and spaces</li>\n          <li>Answer questions about Manila property market with detailed expertise</li>\n          <li>Create Quora Space for Philippines real estate insights</li>\n        </ol>\n      </div>\n    </div>\n  );\n\n  const VerificationContent = () => (\n    <div className=\"space-y-6\">\n      {/* IP Verification */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">🌐 IP Location Verification</h3>\n        \n        <div className=\"space-y-4\">\n          <div className=\"bg-green-50 border border-green-200 rounded p-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <div className=\"text-sm font-medium text-green-800\">Current Proxy Location</div>\n                <div className=\"text-lg text-green-900\">{proxyConfig.location}</div>\n              </div>\n              <div>\n                <div className=\"text-sm font-medium text-green-800\">Proxy Type</div>\n                <div className=\"text-lg text-green-900\">{proxyConfig.type}</div>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <h4 className=\"font-medium text-gray-900 mb-2\">Verification Steps</h4>\n            <ol className=\"list-decimal list-inside space-y-2 text-sm text-gray-700\">\n              <li>Visit <code className=\"bg-gray-100 px-2 py-1 rounded\">whatismyipaddress.com</code></li>\n              <li>Confirm location shows as \"Manila, Philippines\" or nearby</li>\n              <li>Check <code className=\"bg-gray-100 px-2 py-1 rounded\">iplocation.net</code> for additional verification</li>\n              <li>Test with <code className=\"bg-gray-100 px-2 py-1 rounded\">ipinfo.io</code> to ensure consistent results</li>\n              <li>Save screenshots as proof of Philippines location</li>\n            </ol>\n          </div>\n        </div>\n      </div>\n\n      {/* Platform Detection Test */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">🔍 Platform Detection Test</h3>\n        \n        <div className=\"space-y-4\">\n          <p className=\"text-sm text-gray-700\">Test how platforms detect your location:</p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"bg-gray-50 p-4 rounded border\">\n              <h4 className=\"font-medium text-gray-900 mb-2\">Google</h4>\n              <p className=\"text-xs text-gray-600\">Visit google.com and check if results are Philippines-focused</p>\n            </div>\n            \n            <div className=\"bg-gray-50 p-4 rounded border\">\n              <h4 className=\"font-medium text-gray-900 mb-2\">Facebook</h4>\n              <p className=\"text-xs text-gray-600\">Location suggestions should show Philippines cities</p>\n            </div>\n            \n            <div className=\"bg-gray-50 p-4 rounded border\">\n              <h4 className=\"font-medium text-gray-900 mb-2\">LinkedIn</h4>\n              <p className=\"text-xs text-gray-600\">Job suggestions should be Philippines-based</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Troubleshooting */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">🔧 Troubleshooting</h3>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <h4 className=\"font-medium text-red-600 mb-2\">Common Issues & Solutions</h4>\n            \n            <div className=\"space-y-3\">\n              <div className=\"border-l-4 border-yellow-400 pl-4\">\n                <div className=\"font-medium text-gray-900\">Connection Timeout</div>\n                <div className=\"text-sm text-gray-600\">Check proxy credentials and try switching browser</div>\n              </div>\n              \n              <div className=\"border-l-4 border-yellow-400 pl-4\">\n                <div className=\"font-medium text-gray-900\">Wrong Location Detected</div>\n                <div className=\"text-sm text-gray-600\">Clear browser cache, restart browser, or try incognito mode</div>\n              </div>\n              \n              <div className=\"border-l-4 border-yellow-400 pl-4\">\n                <div className=\"font-medium text-gray-900\">Platform Account Suspended</div>\n                <div className=\"text-sm text-gray-600\">Switch to different browser profile and wait 24 hours before retry</div>\n              </div>\n              \n              <div className=\"border-l-4 border-red-400 pl-4\">\n                <div className=\"font-medium text-gray-900\">Proxy Not Working</div>\n                <div className=\"text-sm text-gray-600\">Contact support immediately - proxy credentials may have changed</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'browser': return <BrowserSetupContent />;\n      case 'platforms': return <PlatformConfigContent />;\n      case 'verification': return <VerificationContent />;\n      default: return <BrowserSetupContent />;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-gray-50 rounded-xl max-w-4xl w-full max-h-[90vh] flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">Manila Proxy Setup Guide</h2>\n            <p className=\"text-gray-600 mt-1\">Complete setup instructions for Philippines real estate authority building</p>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-gray-200 rounded-full transition-colors\"\n          >\n            <svg className=\"w-6 h-6 text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* Tabs */}\n        <div className=\"flex border-b border-gray-200 bg-white\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={`flex-1 px-6 py-4 text-sm font-medium flex items-center justify-center gap-2 transition-colors ${\n                activeTab === tab.id\n                  ? 'border-b-2 border-blue-500 text-blue-600 bg-blue-50'\n                  : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50'\n              }`}\n            >\n              <span className=\"text-lg\">{tab.icon}</span>\n              {tab.label}\n            </button>\n          ))}\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto p-6\">\n          {renderTabContent()}\n        </div>\n\n        {/* Footer */}\n        <div className=\"border-t border-gray-200 p-4 bg-white\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-gray-500\">\n              🇵🇭 Proxy Location: <strong>Manila, Philippines</strong> • Status: <strong className=\"text-green-600\">Active</strong>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\n            >\n              Got it, Close Guide\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16663}},"version":1}